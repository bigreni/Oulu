(window.webpackJsonp = window.webpackJsonp || []).push([
    ["main"], {
        "../core-js/array/from": function(e, t) {
            e.exports = Array.from
        },
        "../core-js/object/create": function(e, t) {
            e.exports = Object.create
        },
        "../core-js/object/define-property": function(e, t) {
            e.exports = Object.defineProperty
        },
        "../core-js/object/set-prototype-of": function(e, t) {
            e.exports = Object.setPrototypeOf
        },
        "../core-js/symbol": function(e, t) {
            e.exports = Symbol
        },
        "../core-js/symbol/iterator": function(e, t) {
            e.exports = Symbol.iterator
        },
        "./app/action/FavouriteActions.js": function(e, t, a) {
            "use strict";

            function n(e, t) {
                e.dispatch("AddFavouriteLocation", t)
            }

            function i(e, t) {
                e.dispatch("DeleteFavouriteLocation", t)
            }

            function r(e, t) {
                e.dispatch("DeleteFavouriteStop", t)
            }

            function o(e, t) {
                e.dispatch("AddFavouriteRoute", t)
            }

            function s(e, t) {
                e.dispatch("AddFavouriteStop", t)
            }

            function l(e, t) {
                e.dispatch("ToggleFavouriteCityBikeStation", t)
            }
            a.d(t, "a", (function() {
                return n
            })), a.d(t, "d", (function() {
                return i
            })), a.d(t, "e", (function() {
                return r
            })), a.d(t, "b", (function() {
                return o
            })), a.d(t, "c", (function() {
                return s
            })), a.d(t, "f", (function() {
                return l
            }))
        },
        "./app/action/MapLayerActions.js": function(e, t, a) {
            "use strict";

            function n(e, t) {
                e.dispatch("UpdateMapLayers", t)
            }

            function i(e) {
                e.dispatch("ClearMapLayers")
            }

            function r(e, t) {
                e.dispatch("UpdateMapLayersMode", t)
            }

            function o(e, t) {
                e.dispatch("SetHighlightedStop", t)
            }

            function s(e) {
                e.dispatch("RemoveHighlightedStop")
            }

            function l(e, t) {
                e.dispatch("SetHighlightedFluency", t)
            }

            function c(e) {
                e.dispatch("RemoveHighlightedFluency")
            }
            a.d(t, "f", (function() {
                return n
            })), a.d(t, "a", (function() {
                return i
            })), a.d(t, "g", (function() {
                return r
            })), a.d(t, "e", (function() {
                return o
            })), a.d(t, "c", (function() {
                return s
            })), a.d(t, "d", (function() {
                return l
            })), a.d(t, "b", (function() {
                return c
            }))
        },
        "./app/action/PositionActions.js": function(e, t, a) {
            "use strict";
            a.d(t, "a", (function() {
                return N
            })), a.d(t, "c", (function() {
                return w
            })), a.d(t, "b", (function() {
                return C
            }));
            var n = a("./node_modules/lodash-es/debounce.js"),
                i = a("./node_modules/debug/src/browser.js"),
                r = a.n(i),
                o = a("./app/util/xhrPromise.js"),
                s = a("./app/store/localStorage.js"),
                l = a("./node_modules/@babel/runtime/helpers/esm/extends.js"),
                c = a("./app/translations.js"),
                u = c.a.en,
                d = {},
                p = ["heading", "text", "a"],
                m = {
                    timeout: {
                        type: "info",
                        persistence: "repeat",
                        priority: 2
                    },
                    denied: {
                        type: "info",
                        persistence: "repeat",
                        priority: 3
                    },
                    failed: {
                        type: "error",
                        persistence: "repeat",
                        priority: 4
                    },
                    prompt: {
                        type: "info",
                        persistence: "repeat",
                        priority: 2
                    }
                };
            Object.keys(m).forEach((function(e) {
                var t = Object(l.a)({}, m[e], {
                    id: "geolocation_" + e,
                    icon: "geonotifier",
                    content: {}
                });
                Object.keys(c.a).forEach((function(a) {
                    var n = c.a[a];
                    t.content[a] = [], p.forEach((function(i) {
                        var r = "geolocation-" + e + "-" + i,
                            o = n[r] || u[r];
                        o && t.content[a].push({
                            type: i,
                            content: o
                        })
                    }))
                })), d[e] = t
            }));
            var f, g = d,
                h = a("./app/util/authUtils.js"),
                b = r()("PositionActions.js");

            function y(e, t) {
                var a = e.getStore("PreferencesStore").getLanguage(),
                    n = Object(h.a)(e.config, e.config.URL.PELIAS_REVERSE_GEOCODER);
                return Object(o.a)(n, {
                    "point.lat": t.lat,
                    "point.lon": t.lon,
                    lang: a,
                    size: 1,
                    layers: "address"
                }).then((function(t) {
                    if (null != t.features && t.features.length > 0) {
                        var a = t.features[0].properties;
                        e.dispatch("AddressFound", {
                            address: a.name,
                            city: a.localadmin || a.locality
                        })
                    } else e.dispatch("AddressFound", {})
                }))
            }
            var v = function(e, t, a) {
                    return e.executeAction(y, {
                        lat: t,
                        lon: a
                    })
                },
                k = Object(n.a)(v, 1e4, {
                    leading: !0
                }),
                j = function(e, t) {
                    return e.dispatch("GeolocationFound", t)
                };

            function S(e, t) {
                Object.keys(g).forEach((function(a) {
                    a !== t && e.dispatch("MarkMessageAsRead", g[a].id)
                })), t && e.dispatch("AddMessage", g[t])
            }

            function E(e) {
                b("watchPosition");
                var t = setTimeout((function() {
                    e.dispatch("GeolocationWatchTimeout"), S(e, "timeout")
                }), 2e4);
                try {
                    f = navigator.geoapi.watchPosition((function(a, n) {
                        S(e), null !== t && (clearTimeout(t), t = null),
                            function(e, t) {
                                var a = t.pos,
                                    n = t.disableDebounce;
                                j(e, {
                                    lat: a.coords.latitude,
                                    lon: a.coords.longitude,
                                    heading: a.coords.heading,
                                    disableFiltering: n
                                }), n ? v(e, a.coords.latitude, a.coords.longitude) : k(e, a.coords.latitude, a.coords.longitude)
                            }(e, {
                                pos: a,
                                disableDebounce: n
                            })
                    }), (function(a) {
                        null !== t && (clearTimeout(t), t = null), navigator.geolocation.clearWatch(f), f = void 0,
                            function(e, t) {
                                if (!e.getStore("PositionStore").getLocationState().hasLocation) switch (t.code) {
                                    case 1:
                                        e.dispatch("GeolocationDenied"), S(e, "denied");
                                        break;
                                    case 2:
                                        e.dispatch("GeolocationNotSupported"), S(e, "failed");
                                        break;
                                    case 3:
                                        e.dispatch("GeolocationTimeout"), S(e, "timeout")
                                }
                            }(e, a)
                    }), {
                        enableHighAccuracy: !0,
                        timeout: 6e4,
                        maximumAge: 6e4
                    })
                } catch (a) {
                    null !== t && (clearTimeout(t), t = null, navigator.geolocation.clearWatch(f), f = void 0), e.dispatch("GeolocationNotSupported"), S(e, "failed"), console.error(a)
                }
            }

            function N() {
                return new Promise((function(e) {
                    if (void 0 !== window.mock) return b("mock permission"), void e({
                        state: window.mock.permission
                    });
                    navigator.permissions ? navigator.permissions.query({
                        name: "geolocation"
                    }).then((function(t) {
                        e(t)
                    })) : e({
                        state: null
                    })
                }))
            }

            function R(e) {
                N().then((function(t) {
                    switch (b("Examining permission", t), t.state) {
                        case "granted":
                            e.dispatch("GeolocationSearch"), S(e), E(e);
                            break;
                        case "denied":
                            e.dispatch("GeolocationDenied"), S(e, "denied");
                            break;
                        case "prompt":
                            S(e, "prompt"), e.dispatch("GeolocationSearch"), E(e);
                            break;
                        default:
                            e.dispatch("GeolocationSearch"), E(e)
                    }
                }))
            }

            function w(e) {
                void 0 === f ? (b("starting..."), R(e)) : b("already started...")
            }
            var T = !1;

            function C(e) {
                if (!0 !== T) {
                    T = !0;
                    var t = !1;
                    b("Initializing"), void 0 !== window.mock && (b("Geolocation mock is enabled", window.mock), t = !0), navigator.geoapi ? N().then((function(a) {
                        switch (b("examining status", a), a.state) {
                            case "granted":
                                b("Permission granted."), t = !0, S(e);
                                break;
                            case "denied":
                                b("Permission denied."), e.dispatch("GeolocationDenied"), S(e, "denied");
                                break;
                            case null:
                                t = Object(s.k)(!0);
                                break;
                            default:
                                t = !0, b("Unprocessed result:", a.state)
                        }!0 === t ? (b("Starting positioning"), R(e)) : b("Not starting positioning")
                    })) : (b("Geolocation is not supported"), e.dispatch("GeolocationNotSupported"), S(e, "failed"))
                } else b("Already initialized, bailing out")
            }
        },
        "./app/action/RealtimeDeparturesActions.js": function(e, t, a) {
            "use strict";

            function n(e, t, a) {
                e.dispatch("UpdateDepartures", t), a()
            }

            function i(e, t, a) {
                e.dispatch("ClearDepartures"), a()
            }
            a.d(t, "b", (function() {
                return n
            })), a.d(t, "a", (function() {
                return i
            }))
        },
        "./app/action/altRealTimeClientAction.js": function(e, t, a) {
            "use strict";
            a.d(t, "a", (function() {
                return d
            })), a.d(t, "c", (function() {
                return p
            })), a.d(t, "b", (function() {
                return m
            }));
            var n = a("./node_modules/lodash-es/ceil.js"),
                i = a("./node_modules/lodash-es/chunk.js"),
                r = a("./node_modules/moment/moment.js"),
                o = a.n(r),
                s = a("./node_modules/aws-sdk/lib/browser.js"),
                l = a("./node_modules/aws-iot-device-sdk/index.js"),
                c = {
                    train: "rail"
                };

            function u(e) {
                return "/hfp/v1/journey/+/+/+/" + (e.route ? e.route : "+")
            }

            function d(e, t, a) {
                var r = (Array.isArray(t) ? t : [t]).map((function(e) {
                    return u(e)
                }));
                s.config.region = e.config.AWS.region, s.config.credentials = new s.CognitoIdentityCredentials({
                    IdentityPoolId: e.config.AWS.iot.identityPoolId
                }), s.config.credentials.clearCachedId(), s.config.credentials.refresh((function(t) {
                    if (!t) {
                        var u = Math.floor(1e5 * Math.random() + 1),
                            d = l.device({
                                protocol: "wss",
                                accessKeyId: s.config.credentials.accessKeyId,
                                secretKey: s.config.credentials.secretAccessKey,
                                sessionToken: s.config.credentials.sessionToken,
                                clientId: "mqtt-" + u,
                                host: e.config.URL.MQTT
                            });
                        d.on("connect", (function() {
                            Object(i.a)(r, 8).forEach((function(e) {
                                return d.subscribe(e)
                            }))
                        })), d.on("message", (function(t, a) {
                            return function(e, t, a) {
                                var i, r = e.split("/"),
                                    s = r[5],
                                    l = r[6],
                                    u = r[7];
                                i = t instanceof Uint8Array ? JSON.parse(t).VP : t.VP;
                                var d = {
                                    id: l,
                                    route: a.config.routePrefix + ":" + u,
                                    tripId: a.config.routePrefix + ":" + i.line,
                                    tripStartTime: "",
                                    operatingDay: i.oday && "XXX" !== i.oday ? i.oday : o()().format("YYYY-MM-DD"),
                                    mode: c[s] ? c[s] : s,
                                    next_stop: i.nxt,
                                    stop_index: i.stop_index,
                                    timestamp: i.tsi,
                                    lat: i.lat && Object(n.a)(i.lat, 5),
                                    long: i.long && Object(n.a)(i.long, 5),
                                    heading: i.hdg
                                };
                                a.dispatch("RealTimeClientMessage", {
                                    id: l,
                                    message: d
                                })
                            }(t, a, e)
                        })), e.dispatch("RealTimeClientStarted", {
                            client: d,
                            topics: r
                        })
                    }
                    a()
                }))
            }

            function p(e, t, a) {
                t.client.unsubscribe(t.oldTopics);
                var n = Array.isArray(t.newTopic) ? t.newTopic.map((function(e) {
                    return u(e)
                })) : [u(t.newTopic)];
                t.client.subscribe(n), e.dispatch("RealTimeClientTopicChanged", n), a()
            }

            function m(e, t, a) {
                t.end(), e.dispatch("RealTimeClientStopped"), a()
            }
        },
        "./app/action/originActions.js": function(e, t, a) {
            "use strict";

            function n(e, t) {
                e.dispatch("SetOrigin", t)
            }
            a.d(t, "a", (function() {
                return n
            }))
        },
        "./app/action/realTimeClientAction.js": function(e, t, a) {
            "use strict";
            a.d(t, "a", (function() {
                return l
            })), a.d(t, "c", (function() {
                return c
            })), a.d(t, "b", (function() {
                return u
            }));
            var n = a("./node_modules/lodash-es/ceil.js"),
                i = a("./node_modules/moment/moment.js"),
                r = a.n(i),
                o = {
                    train: "rail"
                };

            function s(e) {
                return "/hfp/v1/journey/ongoing/+/+/+/" + (e.route ? e.route : "+") + "/" + (e.direction ? parseInt(e.direction, 10) + 1 : "+") + "/+/" + (e.tripStartTime ? e.tripStartTime : "+") + "/#"
            }

            function l(e, t, i) {
                var l = (Array.isArray(t) ? t : [t]).map((function(e) {
                    return s(e)
                }));
                Promise.all([a.e("vendors~mqtt"), a.e("mqtt")]).then(a.t.bind(null, "./node_modules/mqtt/lib/connect/index.js", 7)).then((function(t) {
                    var a = t.default.connect(e.config.URL.MQTT);
                    a.on("connect", (function() {
                        return a.subscribe(l)
                    })), a.on("message", (function(t, a) {
                        return function(e, t, a) {
                            var i, s = e.split("/"),
                                l = s[5],
                                c = s[6],
                                u = s[7],
                                d = s[8],
                                p = s[9],
                                m = (s[10], s[11]),
                                f = s[12],
                                g = (s.slice(13), c + "_" + u);
                            i = t instanceof Uint8Array ? JSON.parse(t).VP : t.VP;
                            var h = {
                                id: g,
                                route: a.config.routePrefix + ":" + d,
                                direction: parseInt(p, 10) - 1,
                                tripStartTime: m.replace(/:/g, ""),
                                operatingDay: i.oday && "XXX" !== i.oday ? i.oday : r()().format("YYYY-MM-DD"),
                                mode: o[l] ? o[l] : l,
                                next_stop: f,
                                timestamp: i.tsi,
                                lat: i.lat && Object(n.a)(i.lat, 5),
                                long: i.long && Object(n.a)(i.long, 5),
                                heading: i.hdg
                            };
                            a.dispatch("RealTimeClientMessage", {
                                id: u,
                                message: h
                            })
                        }(t, a, e)
                    })), e.dispatch("RealTimeClientStarted", {
                        client: a,
                        topics: l
                    }), i()
                }))
            }

            function c(e, t, a) {
                t.client.unsubscribe(t.oldTopics);
                var n = Array.isArray(t.newTopic) ? t.newTopic.map((function(e) {
                    return s(e)
                })) : [s(t.newTopic)];
                t.client.subscribe(n), e.dispatch("RealTimeClientTopicChanged", n), a()
            }

            function u(e, t, a) {
                t.end(), e.dispatch("RealTimeClientStopped"), a()
            }
        },
        "./app/client.js": function(e, t, a) {
            "use strict";
            a.r(t);
            var n = a("./node_modules/@babel/runtime/helpers/esm/extends.js"),
                i = a("./node_modules/prop-types/index.js"),
                r = a.n(i),
                o = a("./node_modules/react/index.js"),
                s = a.n(o),
                l = a("./node_modules/react-dom/index.js"),
                c = a.n(l),
                u = a("./node_modules/react-relay/classic.js"),
                d = a.n(u),
                p = a("./node_modules/react-router/es/index.js"),
                m = a("./node_modules/isomorphic-relay/lib/index.js"),
                f = a.n(m),
                g = a("./node_modules/isomorphic-relay-router/lib/index.js"),
                h = a.n(g),
                b = a("./node_modules/fluxible-addons-react/provideContext.js"),
                y = a.n(b),
                v = a("./node_modules/material-ui/styles/getMuiTheme.js"),
                k = a.n(v),
                j = a("./node_modules/material-ui/styles/MuiThemeProvider.js"),
                S = a.n(j),
                E = a("./node_modules/debug/src/browser.js"),
                N = a.n(E),
                R = a("./node_modules/react-relay-network-layer/lib/index.js"),
                w = (a("./node_modules/offline-plugin/runtime.js"), a("./node_modules/react-helmet/es/Helmet.js")),
                T = "unset",
                C = "unset";
            var x = a("./node_modules/moment-timezone/moment-timezone.js"),
                L = a.n(x);
            var O = a("./node_modules/react-intl/lib/index.es.js"),
                M = a("./node_modules/fluxible-addons-react/connectToStores.js"),
                _ = a.n(M),
                P = _()(O.b, ["PreferencesStore"], (function(e, t) {
                    var n = e.getStore("PreferencesStore").getLanguage();
                    return Object(O.c)(a("./node_modules/react-intl/locale-data sync recursive ^.\\/(fi|sv|en|fr|nb|de)$")("./" + n)), {
                        locale: n,
                        messages: t.translations[n]
                    }
                })),
                A = function(e) {
                    return {
                        fontFamily: 'Gotham Rounded SSm A","Gotham Rounded SSm B", Arial, Georgia, Serif',
                        palette: {
                            textColor: "#fff",
                            primary1Color: e.colors.primary
                        },
                        tabs: {
                            textColor: "#333",
                            selectedTextColor: "#333",
                            backgroundColor: "#eef1f3"
                        },
                        inkBar: {
                            backgroundColor: "#fff"
                        },
                        timePicker: {
                            headerColor: e.colors.primary,
                            selectTextColor: "#fff",
                            clockCircleColor: "#eef1f3"
                        },
                        dialog: {
                            bodyColor: "#888"
                        }
                    }
                },
                I = (a("./node_modules/react-dates/initialize.js"), a("./node_modules/fluxible/index.js")),
                D = a.n(I),
                F = a("./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js"),
                q = a("./node_modules/classnames/index.js"),
                B = a.n(q),
                V = a("./node_modules/recompose/shouldUpdate.js"),
                U = a.n(V),
                H = a("./node_modules/lodash-es/isEqual.js"),
                W = a("./app/action/PositionActions.js"),
                K = a("./app/action/originActions.js"),
                G = a("./app/component/FrontPagePanelLarge.js"),
                z = a("./app/component/FrontPagePanelSmall.js"),
                Y = a("./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"),
                Q = a("./node_modules/recompose/onlyUpdateForKeys.js"),
                J = a.n(Q),
                Z = a("./node_modules/recompose/getContext.js"),
                $ = a.n(Z),
                X = a("./app/component/LazilyLoad.js"),
                ee = a("./app/component/ComponentUsageExample.js"),
                te = a("./app/component/map/MapContainer.js"),
                ae = a("./app/component/Icon.js");

            function ne(e) {
                return s.a.createElement("div", {
                    className: "toggle-positioning-container",
                    onClick: e.handleClick,
                    role: "button",
                    tabIndex: 0
                }, s.a.createElement(ae.a, {
                    img: "icon-icon_position",
                    className: e.className
                }))
            }
            ne.propTypes = {
                handleClick: r.a.func.isRequired,
                className: r.a.string.isRequired
            };
            var ie = ne,
                re = a("./app/util/shapes.js"),
                oe = a("./app/util/withBreakpoint.js"),
                se = a("./app/component/map/VehicleMarkerContainer.js"),
                le = a("./app/component/IconWithTail.js"),
                ce = a("./app/component/map/IconMarker.js"),
                ue = a("./node_modules/moment/moment.js"),
                de = a.n(ue),
                pe = a("./app/component/Card.js"),
                me = a("./app/component/CardHeader.js"),
                fe = a("./app/util/maintenanceUtils.js"),
                ge = function(e, t) {
                    var a = e.maintenanceVehicle,
                        n = t.intl;
                    return s.a.createElement("div", {
                        className: "card"
                    }, s.a.createElement(pe.a, {
                        className: "padding-small"
                    }, s.a.createElement(me.a, {
                        icon: "icon-icon_maintenance-vehicle",
                        name: n.formatMessage({
                            id: "maintenance",
                            defaultMessage: "Maintenance"
                        }),
                        description: n.formatMessage({
                            id: "maintenance-vehicle-name"
                        }, {
                            vehicleNumber: a.id
                        }),
                        unlinked: !0
                    }), s.a.createElement(O.a, {
                        id: "maintenance-job",
                        defaultMessage: "Maintenance job"
                    }, (function() {
                        for (var e = arguments.length, t = new Array(e), a = 0; a < e; a++) t[a] = arguments[a];
                        return t + ":"
                    })), s.a.createElement("ul", {
                        className: "maintenance-vehicle-job-list"
                    }, Object(fe.c)(a.jobIds).map((function(e) {
                        return s.a.createElement("li", {
                            key: e
                        }, s.a.createElement(O.a, {
                            id: "maintenance-job-" + e
                        }))
                    }))), s.a.createElement(O.a, {
                        id: "last-updated",
                        defaultMessage: "Last updated"
                    }, (function() {
                        for (var e = arguments.length, t = new Array(e), a = 0; a < e; a++) t[a] = arguments[a];
                        return t + " "
                    })), de.a.unix(a.timestamp).format("HH:mm:ss") || ""))
                };
            ge.displayName = "MaintenanceVehiclePopup", ge.description = s.a.createElement("div", null, s.a.createElement("p", null, "Renders a maintenance vehicle popup."), s.a.createElement(ee.a, {
                description: ""
            }, s.a.createElement(ge, {
                context: "context object here"
            }))), ge.propTypes = {
                maintenanceVehicle: r.a.shape({
                    id: r.a.number,
                    jobIds: r.a.arrayOf(r.a.number),
                    timestamp: r.a.number,
                    lat: r.a.number,
                    long: r.a.number,
                    dir: r.a.number
                })
            }, ge.contextTypes = {
                intl: O.d.isRequired
            };
            var he, be = ge,
                ye = a("./app/util/browser.js"),
                ve = a("./app/util/mapLayerUtils.js"),
                ke = a("./app/constants.js");

            function je(e) {
                return ye.c ? {
                    element: s.a.createElement(le.a, {
                        img: "icon-icon_maintenance-vehicle"
                    }),
                    className: "" + (e || "vehicle-icon"),
                    iconSize: [20, 20],
                    iconAnchor: [10, 10]
                } : null
            }

            function Se(e) {
                var t = e.className,
                    a = e.maintenanceVehicles,
                    n = e.mapLayers,
                    i = Object(ve.b)("roadInspectionVehicles", n);
                return Object.entries(a).filter((function(e) {
                    var t = e[1];
                    return !i || t.jobIds.includes(ke.p)
                })).filter((function(e) {
                    var t = e[1];
                    return t.lat && t.long
                })).map((function(e) {
                    var a = e[0],
                        n = e[1];
                    return s.a.createElement(ce.default, {
                        icon: je(t),
                        key: a,
                        position: {
                            lat: n.lat,
                            lon: n.long
                        }
                    }, s.a.createElement(he, {
                        offset: [106, 16],
                        maxWidth: 250,
                        minWidth: 250,
                        className: "popup"
                    }, s.a.createElement(be, {
                        maintenanceVehicle: n
                    })))
                }))
            }
            ye.c && (he = a("./node_modules/react-leaflet/es/Popup.js").default), Se.contextTypes = {
                config: r.a.object.isRequired
            }, Se.propTypes = {
                maintenanceVehicles: r.a.objectOf(r.a.shape({
                    id: r.a.number,
                    lat: r.a.number,
                    long: r.a.number,
                    jobIds: r.a.arrayOf(r.a.number)
                }).isRequired).isRequired,
                className: r.a.string
            }, Se.defaultProps = {
                className: void 0
            };
            var Ee = _()(Se, ["MaintenanceVehicleRealTimeInformationStore", "MapLayerStore"], (function(e, t) {
                    return Object(n.a)({}, t, {
                        maintenanceVehicles: e.getStore("MaintenanceVehicleRealTimeInformationStore").maintenanceVehicles,
                        mapLayers: e.getStore("MapLayerStore").mapLayers
                    })
                }), {
                    executeAction: r.a.func
                }),
                Ne = a("./app/action/realTimeClientAction.js"),
                Re = a("./app/action/altRealTimeClientAction.js"),
                we = a("./node_modules/lodash-es/ceil.js"),
                Te = a("./node_modules/lodash-es/chunk.js"),
                Ce = a("./node_modules/aws-sdk/lib/browser.js"),
                xe = a("./node_modules/aws-iot-device-sdk/index.js");

            function Le(e) {
                return "/hfp/v1/harja/" + (e || "+") + "/+"
            }
            var Oe = {
                id: ""
            };

            function Me(e, t, a) {
                var n = (Array.isArray(t) ? t : [t]).map((function(e) {
                    return Le(e)
                }));
                Ce.config.region = e.config.AWS.region, Ce.config.credentials = new Ce.CognitoIdentityCredentials({
                    IdentityPoolId: e.config.AWS.iot.identityPoolId
                }), Ce.config.credentials.clearCachedId(), Ce.config.credentials.refresh((function(t) {
                    if (!t) {
                        var i = Math.floor(1e5 * Math.random() + 1),
                            r = xe.device({
                                protocol: "wss",
                                accessKeyId: Ce.config.credentials.accessKeyId,
                                secretKey: Ce.config.credentials.secretAccessKey,
                                sessionToken: Ce.config.credentials.sessionToken,
                                clientId: "mqtt-" + i,
                                host: e.config.URL.MQTT
                            });
                        r.on("connect", (function() {
                            Object(Te.a)(n, 8).forEach((function(e) {
                                return r.subscribe(e)
                            })), ye.c && function(e) {
                                clearInterval(Oe.id);
                                var t = setInterval((function() {
                                    e.dispatch("MaintenanceVehicleRealTimeClientInactive")
                                }), 1e3 * ke.k);
                                Oe.id = t
                            }(e)
                        })), r.on("message", (function(t, a) {
                            return function(e, t, a) {
                                var n, i = {
                                    id: (n = t instanceof Uint8Array ? JSON.parse(t) : t).vid,
                                    jobIds: n.jid,
                                    timestamp: n.tsi,
                                    lat: n.lat && Object(we.a)(n.lat, 5),
                                    long: n.lon && Object(we.a)(n.lon, 5),
                                    dir: n.dir
                                };
                                a.dispatch("MaintenanceVehicleRealTimeClientMessage", {
                                    id: i.id,
                                    message: i
                                }), a.dispatch("MaintenanceVehicleTailAdd", i)
                            }(0, a, e)
                        })), e.dispatch("MaintenanceVehicleRealTimeClientStarted", {
                            client: r,
                            topics: n
                        })
                    }
                    a()
                }))
            }

            function _e(e, t, a) {
                t.client.unsubscribe(t.oldTopics);
                var n = [Le(t.newTopic)];
                t.client.subscribe(n), e.dispatch("MaintenanceVehicleRealTimeClientTopicChanged", n), a()
            }

            function Pe(e, t, a) {
                clearInterval(Oe.id), t.end(), e.dispatch("MaintenanceVehicleRealTimeClientStopped"), a()
            }
            var Ae = a("./app/action/RealtimeDeparturesActions.js"),
                Ie = a("./app/util/modeUtils.js"),
                De = ["position", "origin", "config", "children", "renderCustomButtons", "breakpoint", "realtimeDepartures", "mapLayers"],
                Fe = J()(["lat", "lon", "zoom", "mapTracking", "showStops", "showScaleBar", "origin", "children"]),
                qe = {
                    PlaceMarker: function() {
                        return Object(X.b)(Promise.all([a.e("vendors~map"), a.e("itinerary~map~route~styleguide"), a.e("map~styleguide"), a.e("map")]).then(a.bind(null, "./app/component/map/PlaceMarker.js")))
                    }
                },
                Be = Fe(te.a),
                Ve = function(e) {
                    function t(t) {
                        var a;
                        (a = e.call(this, t) || this).setRealtimeClient = function(e) {
                            var t = a.props.getStore("RealTimeInformationStore"),
                                n = t.client,
                                i = t.subscriptions;
                            Array.isArray(e) && e.length ? n ? a.props.executeAction(a.props.config.useAltRealtimeClient ? Re.c : Ne.c, {
                                client: n,
                                oldTopics: i,
                                newTopic: e.map((function(e) {
                                    return {
                                        route: e.pattern.route.gtfsId.split(":")[1]
                                    }
                                }))
                            }) : a.props.executeAction(a.props.config.useAltRealtimeClient ? Re.a : Ne.a, e.map((function(e) {
                                return {
                                    route: e.pattern.route.gtfsId.split(":")[1]
                                }
                            }))) : n && a.props.executeAction(a.props.config.useAltRealtimeClient ? Ne.b : Re.b, n)
                        }, a.setMaintenanceRealtimeClient = function(e, t) {
                            var n = a.props.getStore("MaintenanceVehicleRealTimeInformationStore"),
                                i = n.client,
                                r = n.subscriptions,
                                o = t === ke.q.Car ? "motorised-traffic" : "non-motorised-traffic";
                            e ? i ? a.props.executeAction(_e, {
                                client: i,
                                oldTopics: r,
                                newTopic: o
                            }) : a.props.executeAction(Me, o) : i && a.props.executeAction(Pe, i)
                        }, a.enableMapTracking = function() {
                            a.setState({
                                mapTracking: !0,
                                focusOnOrigin: !1
                            })
                        }, a.disableMapTracking = function() {
                            a.setState({
                                mapTracking: !1,
                                focusOnOrigin: !1
                            })
                        };
                        var n = t.origin.ready || t.position.hasLocation;
                        return a.state = {
                            defaultZoom: t.config.defaultMapZoom || 12,
                            initialZoom: n ? 16 : t.config.defaultMapZoom || 12,
                            mapTracking: t.origin.gps && t.position.hasLocation,
                            focusOnOrigin: t.origin.ready,
                            origin: t.origin,
                            shouldShowDefaultLocation: !n
                        }, a
                    }
                    Object(F.a)(t, e);
                    var a = t.prototype;
                    return a.componentDidMount = function() {
                        var e = this.props,
                            t = e.mapLayers,
                            a = e.location,
                            n = e.config;
                        if ((t.maintenanceVehicles || t.roadInspectionVehicles) && t.realtimeMaintenanceVehicles) {
                            var i = Object(Ie.h)(a, n);
                            this.setMaintenanceRealtimeClient(!0, i)
                        }
                    }, a.componentWillReceiveProps = function(e) {
                        null == e.origin.lat || null == e.origin.lon || !0 !== e.origin.gps || (!1 !== this.state.origin.ready || !0 !== e.origin.ready) && this.state.origin.gps ? e.origin.gps || e.origin.lat === this.state.origin.lat && e.origin.lon === this.state.origin.lon || null == e.origin.lat || null == e.origin.lon || this.useOrigin(e.origin) : this.usePosition(e.origin), e.realtimeDepartures !== this.props.realtimeDepartures && this.setRealtimeClient(e.realtimeDepartures);
                        var t = Object(Ie.h)(this.props.location, this.props.config),
                            a = Object(Ie.h)(e.location, e.config);
                        e.mapLayers.maintenanceVehicles === this.props.mapLayers.maintenanceVehicles && e.mapLayers.roadInspectionVehicles === this.props.mapLayers.roadInspectionVehicles && e.mapLayers.realtimeMaintenanceVehicles === this.props.mapLayers.realtimeMaintenanceVehicles && a === t || this.setMaintenanceRealtimeClient((e.mapLayers.maintenanceVehicles || e.mapLayers.roadInspectionVehicles) && e.mapLayers.realtimeMaintenanceVehicles, a)
                    }, a.componentWillUnmount = function() {
                        this.props.executeAction(Ae.a);
                        var e = this.props.getStore("RealTimeInformationStore").client;
                        e && this.props.executeAction(this.props.config.useAltRealtimeClient ? Ne.b : Re.b, e), this.setMaintenanceRealtimeClient(!1)
                    }, a.usePosition = function(e) {
                        this.setState({
                            origin: e,
                            mapTracking: !0,
                            focusOnOrigin: !1,
                            initialZoom: this.state.initialZoom === this.state.defaultZoom ? 16 : void 0,
                            shouldShowDefaultLocation: !1
                        })
                    }, a.useOrigin = function(e) {
                        this.setState({
                            origin: e,
                            mapTracking: !1,
                            focusOnOrigin: !0,
                            initialZoom: this.state.initialZoom === this.state.defaultZoom ? 16 : void 0,
                            shouldShowDefaultLocation: !1
                        })
                    }, a.render = function() {
                        var e, t = this,
                            a = this.props,
                            n = a.position,
                            i = a.origin,
                            r = a.config,
                            o = a.children,
                            l = a.renderCustomButtons,
                            c = a.breakpoint,
                            u = a.realtimeDepartures,
                            d = a.mapLayers,
                            p = Object(Y.a)(a, De);
                        this.state.focusOnOrigin && !this.state.origin.gps && null != this.state.origin.lat && null != this.state.origin.lon ? e = this.state.origin : this.state.mapTracking && n.hasLocation ? e = n : this.state.shouldShowDefaultLocation && (e = r.defaultMapCenter || r.defaultEndpoint);
                        var m = [];
                        return i && !0 === i.ready && !0 !== i.gps && m.push(s.a.createElement(X.a, {
                            modules: qe,
                            key: "from"
                        }, (function(e) {
                            var a = e.PlaceMarker;
                            return s.a.createElement(a, {
                                position: t.props.origin
                            })
                        }))), u && m.push(s.a.createElement(se.a, {
                            key: "vehicleMarkers",
                            departures: u.map((function(e) {
                                return {
                                    pattern: e.pattern,
                                    shortName: e.pattern.route.shortName
                                }
                            })),
                            className: "vehicle-realtime-icon"
                        })), (d.maintenanceVehicles || d.roadInspectionVehicles) && d.realtimeMaintenanceVehicles && m.push(s.a.createElement(Ee, {
                            key: "maintenanceVehicleMarkers",
                            className: "maintenance-vehicle-realtime-icon"
                        })), s.a.createElement(Be, Object.assign({
                            lat: e ? e.lat : null,
                            lon: e ? e.lon : null,
                            zoom: this.state.initialZoom,
                            mapTracking: this.state.mapTracking,
                            className: "flex-grow",
                            origin: this.props.origin,
                            leafletEvents: {
                                onDragstart: this.disableMapTracking,
                                onZoomend: null
                            },
                            disableMapTracking: this.disableMapTracking
                        }, p, {
                            leafletObjs: m
                        }), o, (!r.mapTrackingButtons || "large" !== c && !r.mapTrackingButtons.altPositionMobile || !r.mapTrackingButtons.altPosition) && s.a.createElement("div", {
                            className: "map-with-tracking-buttons"
                        }, l && l(), this.props.position.hasLocation && s.a.createElement(ie, {
                            key: "toggleMapTracking",
                            handleClick: this.state.mapTracking ? this.disableMapTracking : this.enableMapTracking,
                            className: "icon-mapMarker-toggle-positioning-" + (this.state.mapTracking ? "online" : "offline")
                        })))
                    }, t
                }(s.a.Component);
            Ve.propTypes = {
                origin: re.a.isRequired,
                position: r.a.shape({
                    hasLocation: r.a.bool.isRequired,
                    isLocationingInProgress: r.a.bool.isRequired,
                    lat: r.a.number.isRequired,
                    lon: r.a.number.isRequired
                }).isRequired,
                config: r.a.shape({
                    defaultMapZoom: r.a.number,
                    defaultMapCenter: re.a,
                    defaultEndpoint: re.a.isRequired
                }).isRequired,
                children: r.a.array,
                renderCustomButtons: r.a.func,
                breakpoint: r.a.string.isRequired,
                mapLayers: r.a.object
            }, Ve.defaultProps = {
                renderCustomButtons: void 0
            };
            var Ue = _()($()({
                config: r.a.shape({
                    defaultMapCenter: re.a
                }),
                executeAction: r.a.func.isRequired,
                getStore: r.a.func.isRequired
            })(Ve), ["PositionStore", "RealtimeDeparturesStore", "MapLayerStore"], (function(e) {
                var t = e.getStore;
                return {
                    location: e.location,
                    position: t("PositionStore").getLocationState(),
                    realtimeDepartures: t("RealtimeDeparturesStore").getDepartures(),
                    mapLayers: t("MapLayerStore").getMapLayers()
                }
            }), {
                location: p.locationShape
            });
            Ue.description = s.a.createElement("div", null, s.a.createElement("p", null, "Renders a map with map-tracking functionality"), s.a.createElement(ee.a, {
                description: ""
            }, s.a.createElement(Ue, null)));
            var He = Object(oe.d)(Ue),
                We = a("./app/component/PageFooter.js"),
                Ke = a("./app/component/DTAutosuggestPanel.js"),
                Ge = a("./app/util/path.js"),
                ze = a("./app/component/Loading.js"),
                Ye = function() {
                    return s.a.createElement("div", {
                        className: "overlay-with-spinner"
                    }, s.a.createElement("div", null, s.a.createElement(ze.a, null)), s.a.createElement(O.a, {
                        id: "searching-position",
                        defaultMessage: "Detecting location..."
                    }))
                },
                Qe = a("./node_modules/lodash-es/sortBy.js");

            function Je(e) {
                var t = e.headers,
                    a = e.content,
                    n = e.breakpoint;
                return s.a.createElement("div", {
                    className: B()("nearby-table-container", {
                        mobile: "large" !== n
                    })
                }, s.a.createElement("table", {
                    className: "nearby-departures-table"
                }, s.a.createElement("thead", null, s.a.createElement("tr", {
                    className: "header-tr"
                }, t.map((function(e) {
                    return s.a.createElement("th", {
                        key: e.id + "-" + e.defaultMessage,
                        className: "th-" + e.id
                    }, s.a.createElement(O.a, {
                        id: e.id,
                        defaultMessage: e.defaultMessage
                    }))
                })))), s.a.createElement("tbody", null, a)))
            }
            Je.propTypes = {
                headers: r.a.arrayOf(r.a.shape({
                    id: r.a.string.isRequired,
                    defaultMessage: r.a.string.isRequired
                })).isRequired,
                content: r.a.arrayOf(r.a.element).isRequired,
                breakpoint: r.a.string.isRequired
            };
            var Ze = Object(oe.d)(Je),
                $e = a("./app/component/DepartureRowContainer.js"),
                Xe = a("./app/component/BicycleRentalStationRowContainer.js"),
                et = a("./app/component/Distance.js"),
                tt = function(e) {
                    return e && e.length > 0
                },
                at = function(e) {
                    var t, a = e.nearest.places,
                        n = e.currentTime,
                        i = e.timeRange;
                    return a && a.edges ? s.a.createElement(Ze, {
                        headers: [{
                            id: "to-stop",
                            defaultMessage: "To Stop"
                        }, {
                            id: "route",
                            defaultMessage: "Route"
                        }, {
                            id: "destination",
                            defaultMessage: "Destination"
                        }, {
                            id: "leaves",
                            defaultMessage: "Leaves"
                        }, {
                            id: "next",
                            defaultMessage: "Next"
                        }],
                        content: (t = {
                            places: a,
                            currentTime: n,
                            timeRange: i
                        }, Object(Qe.a)(t.places.edges.filter((function(e) {
                            var t = e.node;
                            return "DepartureRow" !== t.place.__typename || tt(t.place.stoptimes)
                        })), [function(e) {
                            var t = e.node;
                            return Object(et.b)(t.distance)
                        }, function(e) {
                            var t = e.node;
                            return tt(t.place.stoptimes) && t.place.stoptimes[0].serviceDay + t.place.stoptimes[0].realtimeDeparture
                        }]).map((function(e) {
                            var a;
                            return "DepartureRow" === e.node.place.__typename ? a = s.a.createElement($e.b, {
                                key: e.node.place.id,
                                distance: e.node.distance,
                                departure: e.node.place,
                                currentTime: t.currentTime,
                                timeRange: t.timeRange
                            }) : "BikeRentalStation" === e.node.place.__typename && (a = s.a.createElement(Xe.b, {
                                key: e.node.place.id,
                                distance: e.node.distance,
                                station: e.node.place,
                                currentTime: t.currentTime
                            })), a
                        })))
                    }) : null
                };
            at.propTypes = {
                nearest: r.a.shape({
                    places: r.a.shape({
                        edges: r.a.array.isRequired
                    }).isRequired
                }).isRequired,
                currentTime: r.a.number.isRequired,
                timeRange: r.a.number.isRequired
            };
            var nt = d.a.createContainer(at, {
                    fragments: {
                        nearest: function(e) {
                            return t = $e.b.getFragment("departure", {
                                currentTime: e.currentTime,
                                timeRange: e.timeRange
                            }), a = Xe.b.getFragment("station", {
                                currentTime: e.currentTime
                            }), {
                                children: [{
                                    alias: "places",
                                    calls: [{
                                        kind: "Call",
                                        metadata: {
                                            type: "Float!"
                                        },
                                        name: "lat",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "lat"
                                        }
                                    }, {
                                        kind: "Call",
                                        metadata: {
                                            type: "Float!"
                                        },
                                        name: "lon",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "lon"
                                        }
                                    }, {
                                        kind: "Call",
                                        metadata: {
                                            type: "Int"
                                        },
                                        name: "maxDistance",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "maxDistance"
                                        }
                                    }, {
                                        kind: "Call",
                                        metadata: {
                                            type: "Int"
                                        },
                                        name: "maxResults",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "maxResults"
                                        }
                                    }, {
                                        kind: "Call",
                                        metadata: {
                                            type: "Int"
                                        },
                                        name: "first",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "maxResults"
                                        }
                                    }, {
                                        kind: "Call",
                                        metadata: {
                                            type: "[Mode]"
                                        },
                                        name: "filterByModes",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "modes"
                                        }
                                    }, {
                                        kind: "Call",
                                        metadata: {
                                            type: "[FilterPlaceType]"
                                        },
                                        name: "filterByPlaceTypes",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "placeTypes"
                                        }
                                    }],
                                    children: [{
                                        children: [{
                                            children: [{
                                                fieldName: "distance",
                                                kind: "Field",
                                                metadata: {},
                                                type: "Int"
                                            }, {
                                                children: [].concat.apply([], [{
                                                    fieldName: "id",
                                                    kind: "Field",
                                                    metadata: {
                                                        isRequisite: !0
                                                    },
                                                    type: "ID"
                                                }, {
                                                    fieldName: "__typename",
                                                    kind: "Field",
                                                    metadata: {
                                                        isRequisite: !0
                                                    },
                                                    type: "String"
                                                }, {
                                                    children: [{
                                                        calls: [{
                                                            kind: "Call",
                                                            metadata: {
                                                                type: "Long"
                                                            },
                                                            name: "startTime",
                                                            value: {
                                                                kind: "CallVariable",
                                                                callVariableName: "currentTime"
                                                            }
                                                        }, {
                                                            kind: "Call",
                                                            metadata: {
                                                                type: "Int"
                                                            },
                                                            name: "timeRange",
                                                            value: {
                                                                kind: "CallVariable",
                                                                callVariableName: "timeRange"
                                                            }
                                                        }, {
                                                            kind: "Call",
                                                            metadata: {
                                                                type: "Int"
                                                            },
                                                            name: "numberOfDepartures",
                                                            value: {
                                                                kind: "CallValue",
                                                                callValue: 2
                                                            }
                                                        }],
                                                        children: [{
                                                            fieldName: "pickupType",
                                                            kind: "Field",
                                                            metadata: {},
                                                            type: "PickupDropoffType"
                                                        }, {
                                                            fieldName: "serviceDay",
                                                            kind: "Field",
                                                            metadata: {},
                                                            type: "Long"
                                                        }, {
                                                            fieldName: "realtimeDeparture",
                                                            kind: "Field",
                                                            metadata: {},
                                                            type: "Int"
                                                        }],
                                                        fieldName: "stoptimes",
                                                        kind: "Field",
                                                        metadata: {
                                                            canHaveSubselections: !0,
                                                            isPlural: !0
                                                        },
                                                        type: "Stoptime"
                                                    }, {
                                                        fieldName: "id",
                                                        kind: "Field",
                                                        metadata: {
                                                            isGenerated: !0,
                                                            isRequisite: !0
                                                        },
                                                        type: "ID"
                                                    }],
                                                    id: d.a.QL.__id(),
                                                    kind: "Fragment",
                                                    metadata: {},
                                                    name: "DepartureRow",
                                                    type: "DepartureRow"
                                                }, d.a.QL.__frag(t), d.a.QL.__frag(a)]),
                                                fieldName: "place",
                                                kind: "Field",
                                                metadata: {
                                                    canHaveSubselections: !0,
                                                    inferredRootCallName: "node",
                                                    inferredPrimaryKey: "id",
                                                    isAbstract: !0
                                                },
                                                type: "PlaceInterface"
                                            }, {
                                                fieldName: "distance",
                                                kind: "Field",
                                                metadata: {},
                                                type: "Int"
                                            }, {
                                                fieldName: "id",
                                                kind: "Field",
                                                metadata: {
                                                    isGenerated: !0,
                                                    isRequisite: !0
                                                },
                                                type: "ID"
                                            }],
                                            fieldName: "node",
                                            kind: "Field",
                                            metadata: {
                                                canHaveSubselections: !0,
                                                inferredRootCallName: "node",
                                                inferredPrimaryKey: "id",
                                                isRequisite: !0
                                            },
                                            type: "placeAtDistance"
                                        }, {
                                            fieldName: "cursor",
                                            kind: "Field",
                                            metadata: {
                                                isGenerated: !0,
                                                isRequisite: !0
                                            },
                                            type: "String"
                                        }],
                                        fieldName: "edges",
                                        kind: "Field",
                                        metadata: {
                                            canHaveSubselections: !0,
                                            isPlural: !0
                                        },
                                        type: "placeAtDistanceEdge"
                                    }, {
                                        children: [{
                                            fieldName: "hasNextPage",
                                            kind: "Field",
                                            metadata: {
                                                isGenerated: !0,
                                                isRequisite: !0
                                            },
                                            type: "Boolean"
                                        }, {
                                            fieldName: "hasPreviousPage",
                                            kind: "Field",
                                            metadata: {
                                                isGenerated: !0,
                                                isRequisite: !0
                                            },
                                            type: "Boolean"
                                        }],
                                        fieldName: "pageInfo",
                                        kind: "Field",
                                        metadata: {
                                            canHaveSubselections: !0,
                                            isGenerated: !0,
                                            isRequisite: !0
                                        },
                                        type: "PageInfo"
                                    }],
                                    fieldName: "nearest",
                                    kind: "Field",
                                    metadata: {
                                        canHaveSubselections: !0,
                                        isConnection: !0
                                    },
                                    type: "placeAtDistanceConnection"
                                }],
                                id: d.a.QL.__id(),
                                kind: "Fragment",
                                metadata: {},
                                name: "NearbyDeparturesList_NearestRelayQL",
                                type: "Query"
                            };
                            var t, a
                        }
                    },
                    initialVariables: {
                        lat: null,
                        lon: null,
                        maxDistance: 0,
                        maxResults: 50,
                        modes: [],
                        placeTypes: [],
                        currentTime: 0,
                        timeRange: 0
                    }
                }),
                it = a("./app/component/NetworkError.js"),
                rt = function(e) {
                    function t() {
                        return e.apply(this, arguments) || this
                    }
                    return Object(F.a)(t, e), t
                }(u.Route);
            rt.queries = {
                nearest: function(e, t) {
                    return a = e.getFragment("nearest", t), {
                        children: [].concat.apply([], [d.a.QL.__frag(a)]),
                        fieldName: "viewer",
                        kind: "Query",
                        metadata: {},
                        name: "NearestRoutesContainer",
                        type: "Query"
                    };
                    var a
                }
            }, rt.paramDefinitions = {
                lat: {
                    required: !0
                },
                lon: {
                    required: !0
                },
                currentTime: {
                    required: !0
                },
                modes: {
                    required: !0
                },
                placeTypes: {
                    required: !0
                },
                maxDistance: {
                    required: !0
                },
                maxResults: {
                    required: !0
                },
                timeRange: {
                    required: !0
                }
            }, rt.routeName = "NearbyDeparturesListRoute";
            var ot = function(e) {
                function t() {
                    var t;
                    return (t = e.call(this) || this).useSpinner = !0, t
                }
                Object(F.a)(t, e);
                var a = t.prototype;
                return a.shouldComponentUpdate = function(e) {
                    return e.lat !== this.props.lat || e.lon !== this.props.lon || e.currentTime !== this.props.currentTime || e.modes !== this.props.modes || e.placeTypes !== this.props.placeTypes || e.maxDistance !== this.props.maxDistance || e.maxResults !== this.props.maxResults || e.timeRange !== this.props.timeRange
                }, a.render = function() {
                    var e = this;
                    return s.a.createElement(d.a.Renderer, {
                        Container: nt,
                        queryConfig: new rt({
                            lat: this.props.lat,
                            lon: this.props.lon,
                            currentTime: this.props.currentTime,
                            modes: this.props.modes,
                            placeTypes: this.props.placeTypes,
                            maxDistance: this.props.maxDistance,
                            maxResults: this.props.maxResults,
                            timeRange: this.props.timeRange
                        }),
                        environment: d.a.Store,
                        render: function(t) {
                            var a = t.error,
                                n = t.props,
                                i = t.retry;
                            return a ? (e.useSpinner = !0, s.a.createElement(it.a, {
                                retry: i
                            })) : n ? (e.useSpinner = !1, s.a.createElement(nt, n)) : !0 === e.useSpinner ? s.a.createElement(ze.a, null) : void 0
                        }
                    })
                }, t
            }(o.Component);
            ot.propTypes = {
                lat: r.a.number.isRequired,
                lon: r.a.number.isRequired,
                currentTime: r.a.number.isRequired,
                modes: r.a.arrayOf(r.a.string.isRequired).isRequired,
                placeTypes: r.a.arrayOf(r.a.string.isRequired).isRequired,
                maxDistance: r.a.number.isRequired,
                maxResults: r.a.number.isRequired,
                timeRange: r.a.number.isRequired
            };
            var st = function(e) {
                var t = e.icon,
                    a = e.label,
                    n = e.onClick;
                return s.a.createElement("li", null, s.a.createElement("button", {
                    className: "noborder",
                    style: {
                        display: "block"
                    },
                    onClick: n
                }, s.a.createElement(ae.a, {
                    className: "splash-icon " + t,
                    img: t
                }), a))
            };
            st.propTypes = {
                icon: r.a.string.isRequired,
                label: r.a.string.isRequired,
                onClick: r.a.func.isRequired
            };
            var lt = st,
                ct = a("./app/util/suggestionUtils.js"),
                ut = a("./app/store/PositionStore.js"),
                dt = function(e) {
                    function t(t, a) {
                        var i;
                        return (i = e.call(this, t, a) || this).onPositioningStarted = function() {
                            if (!0 === i.state.initiatedGPS) {
                                var e = Object(n.a)({}, i.props.destination);
                                !0 === e.gps && (e = {
                                    ready: !1,
                                    set: !1
                                }), Object(Ge.j)({
                                    origin: {
                                        gps: !0,
                                        ready: !1
                                    },
                                    destination: e,
                                    context: "/",
                                    router: i.context.router,
                                    tab: i.props.tab
                                })
                            }
                        }, i.state = {
                            initiatedGPS: !1
                        }, i
                    }
                    Object(F.a)(t, e);
                    var a = t.prototype;
                    return a.componentWillReceiveProps = function(e) {
                        e.locationState.status === ut.a.STATUS_FOUND_LOCATION && this.onPositioningStarted()
                    }, a.render = function() {
                        var e = this;
                        return this.props.locationState.status === ut.a.STATUS_GEOLOCATION_NOT_SUPPORTED ? null : s.a.createElement(lt, {
                            key: "panel-locationing-button",
                            icon: "icon-icon_position",
                            onClick: function() {
                                e.setState({
                                    initiatedGPS: !0
                                }), e.context.executeAction(W.c)
                            },
                            label: this.context.intl.formatMessage({
                                id: "use-own-position",
                                defaultMessage: "Use current location"
                            })
                        })
                    }, t
                }(s.a.Component);
            dt.propTypes = {
                destination: re.a,
                tab: r.a.string.isRequired,
                locationState: r.a.shape({
                    status: r.a.string.isRequired
                }).isRequired
            }, dt.contextTypes = {
                executeAction: r.a.func.isRequired,
                router: p.routerShape.isRequired,
                location: p.locationShape.isRequired,
                intl: O.d.isRequired
            };
            var pt = _()(dt, ["PositionStore"], (function(e) {
                    return {
                        locationState: e.getStore("PositionStore").getLocationState()
                    }
                })),
                mt = function(e, t) {
                    var a = e.favouriteLocations,
                        i = e.favouriteStops,
                        r = e.oldSearches,
                        o = e.destination,
                        l = e.origin,
                        c = e.tab,
                        u = t.config,
                        d = t.router,
                        p = function(e) {
                            Object(Ge.j)({
                                origin: Object(n.a)({}, e, {
                                    ready: !0
                                }),
                                destination: o,
                                context: "/",
                                router: d,
                                base: {},
                                tab: c
                            })
                        },
                        m = ye.c ? a.map((function(e) {
                            return s.a.createElement(lt, {
                                key: "fl-" + e.locationName,
                                icon: Object(ct.b)("favourite"),
                                onClick: function() {
                                    p(Object(n.a)({}, e, {
                                        address: e.locationName
                                    }))
                                },
                                label: e.locationName
                            })
                        })).concat(i.map((function(e) {
                            return s.a.createElement(lt, {
                                key: "fs-" + e.locationName,
                                icon: Object(ct.b)("favourite"),
                                onClick: function() {
                                    p(Object(n.a)({}, e, {
                                        address: e.locationName
                                    }))
                                },
                                label: e.locationName
                            })
                        }))).concat(r.filter((function(e) {
                            return e.geometry && e.properties
                        })).filter((function(e) {
                            return 0 === a.filter((function(t) {
                                return e.geometry && e.geometry.coordinates && Math.abs(t.lat - e.geometry.coordinates[1]) < 1e-4 && Math.abs(t.lon - e.geometry.coordinates[0]) < 1e-4
                            })).length
                        })).filter((function(e) {
                            return 0 === i.filter((function(t) {
                                return e.geometry && e.geometry.coordinates && Math.abs(t.lat - e.geometry.coordinates[1]) < 1e-4 && Math.abs(t.lon - e.geometry.coordinates[0]) < 1e-4
                            })).length
                        })).filter((function(e) {
                            return e.properties.label || e.properties.name
                        })).map((function(e) {
                            return s.a.createElement(lt, {
                                key: "o-" + (e.properties.label || e.properties.name),
                                icon: Object(ct.b)(e.properties.layer),
                                label: e.properties.label || e.properties.name,
                                onClick: function() {
                                    p(Object(ct.g)(e))
                                }
                            })
                        }))).concat(u.defaultOrigins.map((function(e) {
                            return s.a.createElement(lt, {
                                key: "o-" + e.label,
                                icon: e.icon,
                                label: e.label,
                                onClick: function() {
                                    p(Object(n.a)({}, e, {
                                        address: e.label
                                    }))
                                }
                            })
                        }))) : [];
                    return s.a.createElement("ul", null, s.a.createElement(pt, {
                        destination: o,
                        origin: l,
                        tab: c
                    }), m.slice(0, 3))
                };
            mt.propTypes = {
                favouriteLocations: r.a.array.isRequired,
                favouriteStops: r.a.array.isRequired,
                oldSearches: r.a.array.isRequired,
                destination: re.a.isRequired,
                origin: re.a.isRequired,
                tab: r.a.string
            }, mt.defaultProps = {
                tab: Ge.f
            }, mt.contextTypes = {
                config: r.a.object.isRequired,
                router: p.routerShape.isRequired
            };
            var ft = _()(mt, ["FavouriteLocationStore", "FavouriteStopsStore", "OldSearchesStore"], (function(e) {
                    return {
                        favouriteLocations: e.getStore("FavouriteLocationStore").getLocations(),
                        favouriteStops: e.getStore("FavouriteStopsStore").getStops(),
                        oldSearches: e.getStore("OldSearchesStore").getOldSearches("endpoint")
                    }
                })),
                gt = function(e) {
                    var t = e.panel,
                        a = e.panelctx;
                    return a.origin.ready ? s.a.createElement(t, a) : s.a.createElement("div", {
                        className: "frontpage-panel"
                    }, s.a.createElement("div", {
                        id: "nolocation-panel",
                        key: "contents",
                        className: "flex-vertical"
                    }, s.a.createElement("p", null, s.a.createElement(O.a, {
                        id: "splash-choose",
                        defaultMessage: "Select your origin"
                    })), s.a.createElement(ft, {
                        origin: a.origin,
                        destination: a.destination,
                        tab: a.tab
                    })))
                };
            gt.propTypes = {
                panel: r.a.func.isRequired,
                panelctx: r.a.shape({
                    tab: r.a.string.isRequired,
                    origin: re.a,
                    destination: re.a
                }).isRequired
            };
            var ht = gt;

            function bt(e, t) {
                var a = e.origin,
                    n = e.currentTime,
                    i = ["DEPARTURE_ROW"];
                t.config.transportModes.citybike.availableForSelection && i.push("BICYCLE_RENT");
                var r = Object.keys(t.config.transportModes).filter((function(e) {
                    return t.config.transportModes[e].availableForSelection
                })).map((function(e) {
                    return e.toUpperCase()
                }));
                return s.a.createElement("div", {
                    className: "frontpage-panel nearby-routes fullscreen"
                }, s.a.createElement(ot, {
                    lat: a.lat,
                    lon: a.lon,
                    currentTime: n,
                    modes: r,
                    placeTypes: i,
                    maxDistance: t.config.nearbyRoutes.radius,
                    maxResults: t.config.nearbyRoutes.results || 50,
                    timeRange: t.config.nearbyRoutes.timeRange || 7200
                }))
            }
            bt.propTypes = {
                origin: re.a.isRequired,
                currentTime: r.a.number.isRequired
            }, bt.contextTypes = {
                config: r.a.object
            };
            var yt = U()((function(e, t) {
                    return t.currentTime !== e.currentTime || t.origin.gps !== e.origin.gps || !t.origin.gps && (t.origin.lat !== e.origin.lat || t.origin.lon !== e.origin.lon)
                }))(bt),
                vt = _()((function(e) {
                    return s.a.createElement(ht, {
                        panel: yt,
                        panelctx: Object(n.a)({}, e, {
                            tab: Ge.f
                        })
                    })
                }), ["TimeStore"], (function(e) {
                    return {
                        currentTime: e.getStore("TimeStore").getCurrentTime().unix()
                    }
                })),
                kt = a("./app/component/RouteNumber.js"),
                jt = a("./app/component/RouteDestination.js"),
                St = a("./app/component/DepartureTime.js");

            function Et(e, t) {
                var a = e.departures.map((function(e) {
                        var t = e.distance,
                            a = t < 1e3 ? (t - t % 10) / 1e3 : (t - t % 100) / 1e3,
                            n = Object.assign({}, e, {
                                roundedDistance: a
                            });
                        if (null == n.stoptime || 0 === n.stoptime.stoptimes.length) return n;
                        var i = n.stoptime.stoptimes[0];
                        return n.sorttime = i.serviceDay + (i.realtime ? i.realtimeDeparture : i.scheduledDeparture), n
                    })),
                    n = Object(Qe.a)(a, ["roundedDistance", "sorttime"]).map((function(a) {
                        var n = a.stoptime,
                            i = n.stoptimes.map((function(t) {
                                var a = "CANCELED" === t.realtimeState,
                                    i = n.pattern.route.gtfsId + ":" + n.pattern.headsign + ":\n        " + t.realtimeDeparture;
                                return s.a.createElement("td", {
                                    key: i + "-td",
                                    className: "td-departure-times"
                                }, s.a.createElement(St.a, {
                                    key: i,
                                    departureTime: t.serviceDay + t.realtimeDeparture,
                                    realtime: t.realtime,
                                    currentTime: e.currentTime,
                                    canceled: a
                                }))
                            })),
                            r = "/" + Ge.b + "/" + n.pattern.route.gtfsId + "/pysakit/" + n.pattern.code,
                            o = i.length < 2 ? [i[0], s.a.createElement("td", {
                                key: i[0].key + "-empty",
                                className: "td-departure-times"
                            })] : i;
                        return s.a.createElement("tr", {
                            className: "next-departure-row-tr",
                            onClick: function() {
                                return e = r, void t.router.push(e);
                                var e
                            },
                            style: {
                                cursor: "pointer"
                            },
                            key: n.pattern.code
                        }, s.a.createElement("td", {
                            className: "td-distance"
                        }, s.a.createElement(et.a, {
                            distance: a.distance
                        })), s.a.createElement("td", {
                            className: "td-route-number"
                        }, s.a.createElement(kt.a, {
                            mode: n.pattern.route.mode,
                            text: n.pattern.route.shortName,
                            hasDisruption: a.hasDisruption
                        })), s.a.createElement("td", {
                            className: "td-destination"
                        }, s.a.createElement(jt.a, {
                            mode: n.pattern.route.mode,
                            destination: n.pattern.headsign || n.pattern.route.longName
                        })), o)
                    }));
                return s.a.createElement(s.a.Fragment, null, n)
            }
            Et.propTypes = {
                departures: r.a.array.isRequired,
                currentTime: r.a.number.isRequired
            }, Et.contextTypes = {
                router: p.routerShape.isRequired
            };
            var Nt = Et,
                Rt = a("./app/util/geo-utils.js"),
                wt = function(e, t, a) {
                    var n = [],
                        i = {};
                    return e.forEach((function(e) {
                        if (e) {
                            var r = e.alerts.length > 0;
                            e.patterns.forEach((function(o) {
                                var s = Object(Rt.f)(t, a, o.stops);
                                s.stop.stoptimes.filter((function(t) {
                                    var a = t.pattern.route.gtfsId + ":" + t.pattern.headsign,
                                        n = i[a],
                                        r = t.pattern.route.gtfsId === e.gtfsId && t.pattern.headsign === o.headsign;
                                    return !(n || !r) && (i[a] = !0, !0)
                                })).forEach((function(e) {
                                    n.push({
                                        distance: s.distance,
                                        stoptime: e,
                                        hasDisruption: r
                                    })
                                }))
                            }))
                        }
                    })), n
                },
                Tt = _()(Nt, ["TimeStore"], (function(e, t) {
                    var a = t.routes,
                        n = t.origin;
                    return {
                        currentTime: e.getStore("TimeStore").getCurrentTime().unix(),
                        departures: wt(a, n.lat, n.lon)
                    }
                })),
                Ct = d.a.createContainer(Tt, {
                    fragments: {
                        routes: function() {
                            return {
                                children: [{
                                    children: [{
                                        fieldName: "id",
                                        kind: "Field",
                                        metadata: {
                                            isRequisite: !0
                                        },
                                        type: "ID"
                                    }],
                                    fieldName: "alerts",
                                    kind: "Field",
                                    metadata: {
                                        canHaveSubselections: !0,
                                        inferredRootCallName: "node",
                                        inferredPrimaryKey: "id",
                                        isPlural: !0
                                    },
                                    type: "Alert"
                                }, {
                                    children: [{
                                        fieldName: "headsign",
                                        kind: "Field",
                                        metadata: {},
                                        type: "String"
                                    }, {
                                        children: [{
                                            fieldName: "lat",
                                            kind: "Field",
                                            metadata: {},
                                            type: "Float"
                                        }, {
                                            fieldName: "lon",
                                            kind: "Field",
                                            metadata: {},
                                            type: "Float"
                                        }, {
                                            alias: "stoptimes",
                                            calls: [{
                                                kind: "Call",
                                                metadata: {
                                                    type: "Int"
                                                },
                                                name: "numberOfDepartures",
                                                value: {
                                                    kind: "CallValue",
                                                    callValue: 2
                                                }
                                            }, {
                                                kind: "Call",
                                                metadata: {
                                                    type: "Long"
                                                },
                                                name: "startTime",
                                                value: {
                                                    kind: "CallVariable",
                                                    callVariableName: "currentTime"
                                                }
                                            }, {
                                                kind: "Call",
                                                metadata: {
                                                    type: "Int"
                                                },
                                                name: "timeRange",
                                                value: {
                                                    kind: "CallValue",
                                                    callValue: 7200
                                                }
                                            }],
                                            children: [{
                                                children: [{
                                                    fieldName: "code",
                                                    kind: "Field",
                                                    metadata: {},
                                                    type: "String"
                                                }, {
                                                    fieldName: "headsign",
                                                    kind: "Field",
                                                    metadata: {},
                                                    type: "String"
                                                }, {
                                                    children: [{
                                                        fieldName: "gtfsId",
                                                        kind: "Field",
                                                        metadata: {},
                                                        type: "String"
                                                    }, {
                                                        fieldName: "shortName",
                                                        kind: "Field",
                                                        metadata: {},
                                                        type: "String"
                                                    }, {
                                                        fieldName: "longName",
                                                        kind: "Field",
                                                        metadata: {},
                                                        type: "String"
                                                    }, {
                                                        fieldName: "mode",
                                                        kind: "Field",
                                                        metadata: {},
                                                        type: "TransitMode"
                                                    }, {
                                                        fieldName: "id",
                                                        kind: "Field",
                                                        metadata: {
                                                            isGenerated: !0,
                                                            isRequisite: !0
                                                        },
                                                        type: "ID"
                                                    }],
                                                    fieldName: "route",
                                                    kind: "Field",
                                                    metadata: {
                                                        canHaveSubselections: !0,
                                                        inferredRootCallName: "node",
                                                        inferredPrimaryKey: "id"
                                                    },
                                                    type: "Route"
                                                }, {
                                                    fieldName: "id",
                                                    kind: "Field",
                                                    metadata: {
                                                        isGenerated: !0,
                                                        isRequisite: !0
                                                    },
                                                    type: "ID"
                                                }],
                                                fieldName: "pattern",
                                                kind: "Field",
                                                metadata: {
                                                    canHaveSubselections: !0,
                                                    inferredRootCallName: "node",
                                                    inferredPrimaryKey: "id"
                                                },
                                                type: "Pattern"
                                            }, {
                                                children: [{
                                                    fieldName: "realtimeState",
                                                    kind: "Field",
                                                    metadata: {},
                                                    type: "RealtimeState"
                                                }, {
                                                    fieldName: "realtimeDeparture",
                                                    kind: "Field",
                                                    metadata: {},
                                                    type: "Int"
                                                }, {
                                                    fieldName: "scheduledDeparture",
                                                    kind: "Field",
                                                    metadata: {},
                                                    type: "Int"
                                                }, {
                                                    fieldName: "realtime",
                                                    kind: "Field",
                                                    metadata: {},
                                                    type: "Boolean"
                                                }, {
                                                    fieldName: "serviceDay",
                                                    kind: "Field",
                                                    metadata: {},
                                                    type: "Long"
                                                }],
                                                fieldName: "stoptimes",
                                                kind: "Field",
                                                metadata: {
                                                    canHaveSubselections: !0,
                                                    isPlural: !0
                                                },
                                                type: "Stoptime"
                                            }, {
                                                children: [{
                                                    fieldName: "headsign",
                                                    kind: "Field",
                                                    metadata: {},
                                                    type: "String"
                                                }, {
                                                    children: [{
                                                        fieldName: "gtfsId",
                                                        kind: "Field",
                                                        metadata: {},
                                                        type: "String"
                                                    }, {
                                                        fieldName: "id",
                                                        kind: "Field",
                                                        metadata: {
                                                            isGenerated: !0,
                                                            isRequisite: !0
                                                        },
                                                        type: "ID"
                                                    }],
                                                    fieldName: "route",
                                                    kind: "Field",
                                                    metadata: {
                                                        canHaveSubselections: !0,
                                                        inferredRootCallName: "node",
                                                        inferredPrimaryKey: "id"
                                                    },
                                                    type: "Route"
                                                }, {
                                                    fieldName: "id",
                                                    kind: "Field",
                                                    metadata: {
                                                        isGenerated: !0,
                                                        isRequisite: !0
                                                    },
                                                    type: "ID"
                                                }],
                                                fieldName: "pattern",
                                                kind: "Field",
                                                metadata: {
                                                    canHaveSubselections: !0,
                                                    inferredRootCallName: "node",
                                                    inferredPrimaryKey: "id"
                                                },
                                                type: "Pattern"
                                            }],
                                            fieldName: "stoptimesForPatterns",
                                            kind: "Field",
                                            metadata: {
                                                canHaveSubselections: !0,
                                                isPlural: !0
                                            },
                                            type: "StoptimesInPattern"
                                        }, {
                                            fieldName: "id",
                                            kind: "Field",
                                            metadata: {
                                                isGenerated: !0,
                                                isRequisite: !0
                                            },
                                            type: "ID"
                                        }],
                                        fieldName: "stops",
                                        kind: "Field",
                                        metadata: {
                                            canHaveSubselections: !0,
                                            inferredRootCallName: "node",
                                            inferredPrimaryKey: "id",
                                            isPlural: !0
                                        },
                                        type: "Stop"
                                    }, {
                                        fieldName: "id",
                                        kind: "Field",
                                        metadata: {
                                            isGenerated: !0,
                                            isRequisite: !0
                                        },
                                        type: "ID"
                                    }],
                                    fieldName: "patterns",
                                    kind: "Field",
                                    metadata: {
                                        canHaveSubselections: !0,
                                        inferredRootCallName: "node",
                                        inferredPrimaryKey: "id",
                                        isPlural: !0
                                    },
                                    type: "Pattern"
                                }, {
                                    fieldName: "gtfsId",
                                    kind: "Field",
                                    metadata: {},
                                    type: "String"
                                }, {
                                    fieldName: "id",
                                    kind: "Field",
                                    metadata: {
                                        isGenerated: !0,
                                        isRequisite: !0
                                    },
                                    type: "ID"
                                }],
                                id: d.a.QL.__id(),
                                kind: "Fragment",
                                metadata: {
                                    plural: !0
                                },
                                name: "FavouriteRouteListContainer_RoutesRelayQL",
                                type: "Route"
                            }
                        }
                    },
                    initialVariables: {
                        currentTime: "0"
                    }
                }),
                xt = a("./node_modules/react-swipeable-views/lib/index.js"),
                Lt = a.n(xt),
                Ot = a("./node_modules/react-swipeable-views-utils/lib/index.js"),
                Mt = a("./node_modules/lodash-es/range.js"),
                _t = a("./node_modules/lodash-es/find.js"),
                Pt = a("./app/component/FavouriteLocation.js"),
                At = function(e) {
                    var t, a = e.currentTime,
                        n = e.onClickFavourite,
                        i = e.plan,
                        r = e.favourite,
                        o = i && i.plan.itineraries[0] || {},
                        l = Object(_t.a)(o.legs, (function(e) {
                            return e.transitLeg
                        }));
                    return l && (t = l.startTime / 1e3), s.a.createElement(Pt.a, {
                        favourite: r,
                        clickFavourite: n,
                        departureTime: t,
                        currentTime: a,
                        firstTransitLeg: l
                    })
                };
            At.propTypes = {
                plan: r.a.object.isRequired,
                favourite: r.a.object.isRequired,
                currentTime: r.a.number.isRequired,
                onClickFavourite: r.a.func.isRequired
            };
            var It, Dt = d.a.createContainer(At, {
                    fragments: {
                        plan: function() {
                            return {
                                children: [{
                                    calls: [{
                                        kind: "Call",
                                        metadata: {
                                            type: "InputCoordinates"
                                        },
                                        name: "from",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "from"
                                        }
                                    }, {
                                        kind: "Call",
                                        metadata: {
                                            type: "InputCoordinates"
                                        },
                                        name: "to",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "to"
                                        }
                                    }, {
                                        kind: "Call",
                                        metadata: {
                                            type: "Int"
                                        },
                                        name: "numItineraries",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "numItineraries"
                                        }
                                    }, {
                                        kind: "Call",
                                        metadata: {
                                            type: "Float"
                                        },
                                        name: "walkReluctance",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "walkReluctance"
                                        }
                                    }, {
                                        kind: "Call",
                                        metadata: {
                                            type: "Int"
                                        },
                                        name: "walkBoardCost",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "walkBoardCost"
                                        }
                                    }, {
                                        kind: "Call",
                                        metadata: {
                                            type: "Int"
                                        },
                                        name: "minTransferTime",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "minTransferTime"
                                        }
                                    }, {
                                        kind: "Call",
                                        metadata: {
                                            type: "Float"
                                        },
                                        name: "walkSpeed",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "walkSpeed"
                                        }
                                    }, {
                                        kind: "Call",
                                        metadata: {},
                                        name: "wheelchair",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "wheelchair"
                                        }
                                    }, {
                                        kind: "Call",
                                        metadata: {},
                                        name: "arriveBy",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "arriveBy"
                                        }
                                    }],
                                    children: [{
                                        children: [{
                                            fieldName: "startTime",
                                            kind: "Field",
                                            metadata: {},
                                            type: "Long"
                                        }, {
                                            fieldName: "endTime",
                                            kind: "Field",
                                            metadata: {},
                                            type: "Long"
                                        }, {
                                            children: [{
                                                fieldName: "realTime",
                                                kind: "Field",
                                                metadata: {},
                                                type: "Boolean"
                                            }, {
                                                fieldName: "transitLeg",
                                                kind: "Field",
                                                metadata: {},
                                                type: "Boolean"
                                            }, {
                                                fieldName: "mode",
                                                kind: "Field",
                                                metadata: {},
                                                type: "Mode"
                                            }, {
                                                fieldName: "startTime",
                                                kind: "Field",
                                                metadata: {},
                                                type: "Long"
                                            }, {
                                                children: [{
                                                    fieldName: "shortName",
                                                    kind: "Field",
                                                    metadata: {},
                                                    type: "String"
                                                }, {
                                                    fieldName: "id",
                                                    kind: "Field",
                                                    metadata: {
                                                        isGenerated: !0,
                                                        isRequisite: !0
                                                    },
                                                    type: "ID"
                                                }],
                                                fieldName: "route",
                                                kind: "Field",
                                                metadata: {
                                                    canHaveSubselections: !0,
                                                    inferredRootCallName: "node",
                                                    inferredPrimaryKey: "id"
                                                },
                                                type: "Route"
                                            }, {
                                                fieldName: "id",
                                                kind: "Field",
                                                metadata: {
                                                    isGenerated: !0,
                                                    isRequisite: !0
                                                },
                                                type: "String"
                                            }],
                                            fieldName: "legs",
                                            kind: "Field",
                                            metadata: {
                                                canHaveSubselections: !0,
                                                isPlural: !0
                                            },
                                            type: "Leg"
                                        }],
                                        fieldName: "itineraries",
                                        kind: "Field",
                                        metadata: {
                                            canHaveSubselections: !0,
                                            isPlural: !0
                                        },
                                        type: "Itinerary"
                                    }],
                                    fieldName: "plan",
                                    kind: "Field",
                                    metadata: {
                                        canHaveSubselections: !0
                                    },
                                    type: "Plan"
                                }],
                                id: d.a.QL.__id(),
                                kind: "Fragment",
                                metadata: {},
                                name: "FavouriteLocationContainer_PlanRelayQL",
                                type: "Query"
                            }
                        }
                    },
                    initialVariables: {
                        from: null,
                        to: null,
                        numItineraries: 1,
                        walkReluctance: 2.0001,
                        walkBoardCost: 600,
                        minTransferTime: 120,
                        walkSpeed: 1.2,
                        wheelchair: !1,
                        maxWalkDistance: 0,
                        arriveBy: !1,
                        disableRemainingWeightHeuristic: !1
                    }
                }),
                Ft = a("./app/component/EmptyFavouriteLocationSlot.js"),
                qt = a("./app/component/NoFavouriteLocations.js"),
                Bt = function(e) {
                    function t() {
                        return e.apply(this, arguments) || this
                    }
                    return Object(F.a)(t, e), t
                }(d.a.Route);
            Bt.queries = {
                plan: function(e, t) {
                    return a = e.getFragment("plan", {
                        from: t.from,
                        to: t.to,
                        maxWalkDistance: t.maxWalkDistance,
                        wheelchair: t.wheelchair,
                        arriveBy: t.arriveBy,
                        disableRemainingWeightHeuristic: t.disableRemainingWeightHeuristic
                    }), {
                        children: [].concat.apply([], [d.a.QL.__frag(a)]),
                        fieldName: "viewer",
                        kind: "Query",
                        metadata: {},
                        name: "FavouriteLocationsContainer",
                        type: "Query"
                    };
                    var a
                }
            }, Bt.paramDefinitions = {
                from: {
                    required: !0
                },
                to: {
                    required: !0
                }
            }, Bt.routeName = "FavouriteLocationsContainerRoute";
            var Vt = Object(Ot.bindKeyboard)(Lt.a),
                Ut = function(e) {
                    function t() {
                        var a;
                        return (a = e.call(this) || this).onChangeIndex = function(e) {
                            e > a.props.favourites.length - 2 ? a.setState({
                                slideIndex: e
                            }, (function() {
                                var e = Math.max(0, a.props.favourites.length - 2);
                                a.setState({
                                    slideIndex: e
                                })
                            })) : a.setState({
                                slideIndex: e
                            })
                        }, a.onPrev = function() {
                            var e = Math.max(0, a.state.slideIndex - t.SLOTS_PER_CLICK);
                            a.setState({
                                slideIndex: e
                            })
                        }, a.onNext = function() {
                            var e = Math.min(a.state.slideIndex + t.SLOTS_PER_CLICK, a.props.favourites.length - 2);
                            a.setState({
                                slideIndex: e
                            })
                        }, a.setDestination = function(e, t, n) {
                            var i = {
                                lat: t,
                                lon: n,
                                address: e,
                                ready: !0
                            };
                            Object(Ge.j)({
                                origin: a.props.origin,
                                destination: i,
                                context: "/",
                                router: a.context.router
                            })
                        }, a.slideRenderer = function(e) {
                            var t = e.key,
                                n = e.index;
                            if (n === a.props.favourites.length) return s.a.createElement(Ft.a, {
                                key: t,
                                index: n
                            });
                            var i = a.props.favourites[n],
                                r = s.a.createElement(Pt.a, {
                                    key: t,
                                    favourite: i,
                                    clickFavourite: a.setDestination
                                });
                            if (a.props.origin.ready) {
                                var o = a.context.config;
                                return s.a.createElement(d.a.RootContainer, {
                                    Component: Dt,
                                    forceFetch: !0,
                                    key: "relay_" + t,
                                    route: new Bt({
                                        from: {
                                            lat: a.props.origin.lat,
                                            lon: a.props.origin.lon
                                        },
                                        to: {
                                            lat: i.lat,
                                            lon: i.lon
                                        },
                                        maxWalkDistance: o.maxWalkDistance + .1,
                                        wheelchair: !1,
                                        arriveBy: !1,
                                        disableRemainingWeightHeuristic: !1
                                    }),
                                    renderLoading: function() {
                                        return r
                                    },
                                    renderFetched: function(e) {
                                        return s.a.createElement(Dt, Object.assign({
                                            favourite: i,
                                            onClickFavourite: a.setDestination,
                                            currentTime: a.props.currentTime
                                        }, e))
                                    }
                                })
                            }
                            return r
                        }, a.state = {
                            slideIndex: 0
                        }, a
                    }
                    return Object(F.a)(t, e), t.prototype.render = function() {
                        var e = this;
                        if (0 === this.props.favourites.length) return s.a.createElement(qt.a, null);
                        var a = {
                                root: {
                                    padding: "0px 0.1em",
                                    overflowX: "visible",
                                    width: "100%",
                                    marginLeft: "10%"
                                },
                                slideContainer: {
                                    padding: "0px",
                                    margin: "0px",
                                    width: "100%"
                                }
                            },
                            n = this.state.slideIndex > 0,
                            i = this.state.slideIndex < this.props.favourites.length - t.SLOTS_PER_CLICK + 1,
                            r = (n && i ? "double-overflow-fade" : n && "overflow-fade-left") || i && "overflow-fade" || "";
                        return n = !ye.j && n, i = !ye.j && i, s.a.createElement("div", {
                            style: {
                                position: "relative"
                            }
                        }, s.a.createElement("div", {
                            className: "favourite-locations-container " + r + " border-bottom"
                        }, s.a.createElement("div", {
                            key: "fav-locations-" + this.props.favourites.length,
                            style: {
                                padding: "1em 0px",
                                width: "32%"
                            }
                        }, s.a.createElement(Vt, {
                            style: a.root,
                            slideStyle: a.slideContainer,
                            index: this.state.slideIndex,
                            onChangeIndex: this.onChangeIndex
                        }, Object(Mt.a)(this.props.favourites.length + 1).map((function(t) {
                            return e.slideRenderer({
                                key: t,
                                index: t
                            })
                        }))))), n && s.a.createElement(p.Link, {
                            className: "fav-location-nav-button-container-left",
                            onClick: this.onPrev
                        }, s.a.createElement("span", {
                            className: "fav-location-nav-button"
                        }, s.a.createElement(ae.a, {
                            img: "icon-icon_arrow-collapse--left"
                        }))), i && s.a.createElement(p.Link, {
                            className: "fav-location-nav-button-container-right",
                            onClick: this.onNext
                        }, s.a.createElement("span", {
                            className: "fav-location-nav-button"
                        }, s.a.createElement(ae.a, {
                            img: "icon-icon_arrow-collapse--right"
                        }))))
                    }, t
                }(s.a.Component);
            It = Ut, Ut.contextTypes = {
                router: p.routerShape.isRequired,
                config: r.a.object.isRequired
            }, Ut.description = s.a.createElement("div", null, s.a.createElement("p", null, "Renders a container with favourite locations"), s.a.createElement(ee.a, {
                description: ""
            }, s.a.createElement(It, null))), Ut.propTypes = {
                favourites: r.a.array.isRequired,
                currentTime: r.a.number.isRequired,
                origin: re.a.isRequired
            }, Ut.SLOTS_PER_CLICK = 3;
            var Ht = a("./app/component/NextDeparturesListHeader.js"),
                Wt = function() {
                    return s.a.createElement("div", {
                        className: "nofavs row"
                    }, s.a.createElement("div", {
                        className: "small-12 columns"
                    }, s.a.createElement("div", {
                        className: "nofavs-p black text-center"
                    }, s.a.createElement("div", {
                        className: "nofavs-img"
                    }, ye.c && s.a.createElement("img", {
                        src: a("./app/configurations/images/default/favourites_empty_tip.png"),
                        alt: "No favourites tip icon"
                    })), s.a.createElement(O.a, {
                        id: "no-favourites",
                        defaultMessage: "Use the star buttons to add routes or stops to your favorites. Your favorites are shown on this page."
                    }))))
                },
                Kt = function(e) {
                    function t() {
                        return e.apply(this, arguments) || this
                    }
                    return Object(F.a)(t, e), t
                }(d.a.Route);
            Kt.queries = {
                routes: function(e, t) {
                    return a = e.getFragment("routes", {
                        feeds: t.feeds
                    }), {
                        calls: [{
                            kind: "Call",
                            metadata: {
                                type: "[String]"
                            },
                            name: "feeds",
                            value: {
                                kind: "CallVariable",
                                callVariableName: "feeds"
                            }
                        }],
                        children: [].concat.apply([], [{
                            fieldName: "id",
                            kind: "Field",
                            metadata: {
                                isGenerated: !0,
                                isRequisite: !0
                            },
                            type: "ID"
                        }, d.a.QL.__frag(a)]),
                        fieldName: "routes",
                        kind: "Query",
                        metadata: {
                            isPlural: !0,
                            identifyingArgName: "feeds",
                            identifyingArgType: "[String]"
                        },
                        name: "FavouritesPanel",
                        type: "Route"
                    };
                    var a
                }
            }, Kt.paramDefinitions = {
                feeds: {
                    required: !0
                }
            }, Kt.routeName = "FavouriteRouteRowRoute";
            var Gt = function(e) {
                var t = e.routes,
                    a = e.origin;
                return s.a.createElement(d.a.RootContainer, {
                    Component: Ct,
                    forceFetch: !0,
                    route: new Kt({
                        ids: t,
                        origin: a
                    }),
                    renderLoading: ze.a
                })
            };
            Gt.propTypes = {
                routes: r.a.array.isRequired,
                origin: re.a.isRequired
            };
            var zt = function(e) {
                var t = e.origin,
                    a = e.routes,
                    n = e.currentTime,
                    i = e.favouriteLocations,
                    r = e.favouriteStops,
                    o = e.breakpoint;
                return ye.c && s.a.createElement("div", {
                    className: "frontpage-panel"
                }, s.a.createElement(Ut, {
                    origin: t,
                    currentTime: n,
                    favourites: [].concat(i, r)
                }), s.a.createElement("div", {
                    className: "nearby-table-container " + ("large" !== o && "mobile")
                }, a.length > 0 ? s.a.createElement("table", {
                    className: "nearby-departures-table"
                }, s.a.createElement("thead", null, s.a.createElement(Ht.a, null)), s.a.createElement("tbody", null, s.a.createElement(Gt, {
                    routes: a,
                    origin: t
                }))) : s.a.createElement(Wt, null)))
            };
            zt.propTypes = {
                routes: r.a.array.isRequired,
                origin: re.a.isRequired,
                currentTime: r.a.number.isRequired,
                favouriteLocations: r.a.array,
                favouriteStops: r.a.array,
                breakpoint: r.a.string.isRequired
            };
            var Yt = U()((function(e, t) {
                    return t.currentTime !== e.currentTime || t.routes !== e.routes || t.favouriteLocations !== e.favouriteLocations || t.favouriteStops !== e.favouriteStops || t.origin.gps !== e.origin.gps || !t.origin.gps && (t.origin.lat !== e.origin.lat || t.origin.lon !== e.origin.lon)
                }))(Object(oe.d)(zt)),
                Qt = _()((function(e) {
                    return s.a.createElement(ht, {
                        panel: Yt,
                        panelctx: Object(n.a)({}, e, {
                            tab: Ge.e
                        })
                    })
                }), ["FavouriteRoutesStore", "TimeStore", "FavouriteLocationStore", "FavouriteStopsStore"], (function(e) {
                    return {
                        routes: e.getStore("FavouriteRoutesStore").getRoutes(),
                        currentTime: e.getStore("TimeStore").getCurrentTime().unix(),
                        favouriteLocations: e.getStore("FavouriteLocationStore").getLocations(),
                        favouriteStops: e.getStore("FavouriteStopsStore").getStops()
                    }
                })),
                Jt = a("./app/component/SelectMapLayersDialog.js"),
                Zt = a("./app/component/SelectStreetModeDialog.js"),
                $t = a("./app/util/events.js"),
                Xt = function(e) {
                    function t(t) {
                        var a;
                        return (a = e.call(this, t) || this).componentDidMount = function() {
                            a.setState({
                                loaded: !0
                            })
                        }, a.setContentRef = function(e) {
                            a.contentRef = e
                        }, a.toggleClickListener = function() {
                            a.state.show ? document.removeEventListener("click", a.checkClickLocation, !1) : document.addEventListener("click", a.checkClickLocation, !1)
                        }, a.toggle = function() {
                            a.props.onToggle && a.props.onToggle(!a.state.show), a.toggleClickListener(), a.setState({
                                show: !a.state.show
                            })
                        }, a.checkClickLocation = function(e) {
                            a.checkClickInsideOfContent(e.target) || a.toggle()
                        }, a.checkClickInsideOfContent = function(e) {
                            return a.contentRef && a.contentRef.contains(e)
                        }, a.state = {
                            loaded: !1,
                            show: !1
                        }, a
                    }
                    return Object(F.a)(t, e), t.prototype.render = function() {
                        var e = this,
                            t = this.state,
                            a = t.show,
                            i = t.loaded,
                            r = this.props,
                            o = r.icon,
                            l = r.iconClass,
                            c = r.toggleDisabled,
                            u = r.active,
                            d = r.children,
                            p = r.breakpoint,
                            m = r.ariaLabel,
                            f = r.title;
                        return c ? s.a.createElement(s.a.Fragment, null, d) : [s.a.createElement(s.a.Fragment, {
                            key: "toggleItem1"
                        }, s.a.Children.map(d, (function(t) {
                            var r = B()(t.props.className, {
                                    hidden: !a && !u,
                                    "is-mobile": "large" !== p,
                                    loaded: i
                                }),
                                o = Object(n.a)({}, t.props, {
                                    className: r,
                                    ref: e.setContentRef
                                });
                            return s.a.cloneElement(t, o)
                        }))), !a && !u && s.a.createElement("button", {
                            key: "toggleItem2",
                            onClick: this.toggle,
                            className: B()(l, {
                                "is-mobile": "large" !== p
                            }),
                            "aria-label": m,
                            title: f
                        }, o && s.a.createElement(ae.a, {
                            img: "icon-" + o
                        }))]
                    }, t
                }(s.a.Component);
            Xt.propTypes = {
                breakpoint: r.a.string.isRequired,
                children: r.a.node.isRequired,
                icon: r.a.string,
                iconClass: r.a.string,
                toggleDisabled: r.a.bool,
                active: r.a.bool,
                onToggle: r.a.func,
                ariaLabel: r.a.string,
                title: r.a.string
            }, Xt.defaultProps = {
                icon: void 0,
                iconClass: void 0,
                toggleDisabled: !1,
                active: !1,
                onToggle: void 0,
                ariaLabel: "",
                title: ""
            };
            var ea = Object(oe.d)(Xt),
                ta = a("./app/action/MapLayerActions.js"),
                aa = a("./app/store/localStorage.js"),
                na = a("./app/component/Modal.js"),
                ia = function(e) {
                    function t(t) {
                        var a;
                        return (a = e.call(this, t) || this).toggleVisibility = function() {
                            Object(aa.E)(), a.setState({
                                showPopup: !1
                            })
                        }, a.state = {
                            showPopup: !1
                        }, a
                    }
                    Object(F.a)(t, e);
                    var a = t.prototype;
                    return a.componentWillReceiveProps = function() {
                        this.setState({
                            showPopup: Object(aa.n)()
                        })
                    }, a.render = function() {
                        var e = this.props.currentLanguage,
                            t = this.context.config,
                            a = t.introPopup,
                            n = t.defaultLanguage;
                        if (!this.state.showPopup || !a) return null;
                        var i = a[e] || a[n];
                        return s.a.createElement(na.a, {
                            open: !0,
                            title: i.header || "",
                            toggleVisibility: this.toggleVisibility
                        }, (i.paragraphs || []).map((function(e, t) {
                            return s.a.createElement("p", {
                                key: t
                            }, e)
                        })))
                    }, t
                }(s.a.Component);
            ia.propTypes = {
                currentLanguage: r.a.string
            }, ia.defaultProps = {
                currentLanguage: ""
            }, ia.contextTypes = {
                config: r.a.shape({
                    introPopup: r.a.object,
                    defaultLanguage: r.a.string
                }).isRequired
            };
            var ra = _()(ia, ["PreferencesStore"], (function(e) {
                    return {
                        currentLanguage: e.getStore("PreferencesStore").getLanguage()
                    }
                })),
                oa = function(e) {
                    var t = e.mapLayers;
                    return t && t.maintenanceVehicles ? o.createElement("div", {
                        className: "maintenance-vehicle-legend"
                    }, o.createElement("ul", null, ke.i.map((function(e) {
                        return o.createElement("li", {
                            key: e
                        }, o.createElement("div", {
                            className: "maintenance-vehicle-legend__color",
                            style: {
                                backgroundColor: ke.h[e]
                            }
                        }), o.createElement(O.a, {
                            id: "maintenance-job-legend-" + e
                        }))
                    })))) : null
                };
            oa.propTypes = {
                mapLayers: r.a.object
            };
            var sa = _()($()({
                    getStore: r.a.func.isRequired
                })(oa), ["MapLayerStore"], (function(e) {
                    return {
                        mapLayers: (0, e.getStore)("MapLayerStore").getMapLayers()
                    }
                })),
                la = a("./app/util/bicycleRouteUtils.js"),
                ca = function(e) {
                    var t = e.mapLayers;
                    if (!(t && t.bicycleRoutes && (t.bicycleRouteTypes || t.bicycleRoutesBaana || t.bicycleRoutesBrand || t.bicycleRoutesMainRegional))) return null;
                    var a, i;
                    return o.createElement("div", {
                        className: "bicycle-routes-legend"
                    }, o.createElement("ul", null, (i = {}, t.bicycleRoutesBaana && (i = Object(n.a)({}, i, ke.a)), t.bicycleRoutesBrand && (i = Object(n.a)({}, i, ke.b)), t.bicycleRoutesMainRegional && (i = Object(n.a)({}, i, ke.e)), a = i, Object(la.b)(a).map((function(e) {
                        return o.createElement("li", {
                            key: e.type
                        }, o.createElement("div", {
                            className: "bicycle-routes-legend__color",
                            style: {
                                borderColor: e.color,
                                borderStyle: e.dashed ? "dashed" : "solid"
                            }
                        }), o.createElement(O.a, {
                            id: "bicycle-routes-" + e.type
                        }))
                    })))))
                };
            ca.propTypes = {
                mapLayers: r.a.object
            };
            var ua = _()($()({
                    getStore: r.a.func.isRequired
                })(ca), ["MapLayerStore"], (function(e) {
                    return {
                        mapLayers: (0, e.getStore)("MapLayerStore").getMapLayers()
                    }
                })),
                da = function(e) {
                    var t = e.mapLayers;
                    return t && t.roadInspectionVehicles ? o.createElement("div", {
                        className: "maintenance-vehicle-legend"
                    }, o.createElement("ul", null, o.createElement("li", null, o.createElement("div", {
                        className: "maintenance-vehicle-legend__color",
                        style: {
                            backgroundColor: ke.h["99902-car"]
                        }
                    }), o.createElement(O.a, {
                        id: "maintenance-job-legend-99902-car"
                    })), o.createElement("li", null, o.createElement("div", {
                        className: "maintenance-vehicle-legend__color",
                        style: {
                            backgroundColor: ke.h["99902-bicycle"]
                        }
                    }), o.createElement(O.a, {
                        id: "maintenance-job-legend-99902-bicycle"
                    })))) : null
                };
            da.propTypes = {
                mapLayers: r.a.object
            };
            var pa = _()($()({
                    getStore: r.a.func.isRequired
                })(da), ["MapLayerStore"], (function(e) {
                    return {
                        mapLayers: (0, e.getStore)("MapLayerStore").getMapLayers()
                    }
                })),
                ma = N()("IndexPage.js"),
                fa = function(e) {
                    function t(t, a) {
                        var n;
                        return (n = e.call(this, t) || this).componentWillReceiveProps = function(e) {
                            n.handleLocationProps(e)
                        }, n.onPopupOpen = function() {
                            n.setState({
                                mapExpanded: !0
                            })
                        }, n.getSelectedTab = function() {
                            switch (n.props.tab) {
                                case Ge.e:
                                    return 2;
                                case Ge.f:
                                    return 1;
                                default:
                                    return
                            }
                        }, n.handleLocationProps = function(e) {
                            Object(H.a)(e.origin, n.props.origin) || n.context.executeAction(K.a, e.origin), Object(Ge.i)(e.origin, e.destination) && (ma("Redirecting to itinerary summary page"), Object(Ge.j)({
                                origin: e.origin,
                                destination: e.destination,
                                context: "/",
                                router: n.context.router,
                                base: {}
                            }))
                        }, n.trackEvent = function() {
                            var e;
                            "object" == typeof n.context.piwik && (e = n.context.piwik).trackEvent.apply(e, arguments)
                        }, n.clickNearby = function() {
                            n.openTab(Ge.f), n.trackEvent("Front page tabs", "Nearby", "open")
                        }, n.clickFavourites = function() {
                            n.openTab(Ge.e), n.trackEvent("Front page tabs", "Favourites", "open")
                        }, n.openTab = function(e) {
                            Object(Ge.j)({
                                origin: n.props.origin,
                                destination: n.props.destination,
                                context: "/",
                                router: n.context.router,
                                base: {},
                                tab: e
                            })
                        }, n.togglePanelExpanded = function() {
                            n.setState((function(e) {
                                return {
                                    mapExpanded: !e.mapExpanded
                                }
                            }))
                        }, n.deactivateRealtimeVehicles = function() {
                            (0, n.context.executeAction)(Ae.a)
                        }, n.renderTab = function() {
                            var e;
                            switch (n.props.tab) {
                                case Ge.f:
                                    e = vt;
                                    break;
                                case Ge.e:
                                    e = Qt;
                                    break;
                                default:
                                    e = vt
                            }
                            return s.a.createElement(e, {
                                origin: n.props.origin,
                                destination: n.props.destination
                            })
                        }, n.renderStreetModeSelector = function(e, t, a) {
                            return s.a.createElement(Zt.a, {
                                selectedStreetMode: Ie.h(t.location, e),
                                selectStreetMode: function(i, r) {
                                    Ie.k(i, e, t, r), a(ta.g, i), n.deactivateRealtimeVehicles()
                                },
                                streetModeConfigs: Ie.c(e)
                            })
                        }, n.renderMapLayerSelector = function() {
                            return s.a.createElement(Jt.a, null)
                        }, n.state = {
                            mapExpanded: a.config.map.mobileDefaultExpanded
                        }, a.executeAction(K.a, t.origin), n
                    }
                    Object(F.a)(t, e);
                    var a = t.prototype;
                    return a.componentDidMount = function() {
                        void 0 === this.props.tab && (Ie.a(this.context.router.location, this.context.config), this.clickNearby()), $t.a.on("popupOpened", this.onPopupOpen)
                    }, a.componentWillUnmount = function() {
                        $t.a.removeListener("popupOpened", this.onPopupOpen)
                    }, a.render = function() {
                        var e = this,
                            t = this.context,
                            a = t.config,
                            n = t.router,
                            i = t.executeAction,
                            r = t.intl,
                            o = this.props,
                            l = o.breakpoint,
                            c = o.destination,
                            u = o.origin,
                            d = o.routes,
                            p = o.tab,
                            m = o.realtimeDepartures,
                            f = this.state.mapExpanded,
                            g = Object.assign.apply(Object, [{}].concat(d.map((function(e) {
                                return e.footerOptions
                            })))),
                            h = this.getSelectedTab(),
                            b = r.formatMessage({
                                id: "search",
                                defaultMessage: "Search"
                            }),
                            y = r.formatMessage({
                                id: "your-favourites",
                                defaultMessage: "Favorites"
                            });
                        return "large" === l ? s.a.createElement("div", {
                            className: "front-page flex-vertical " + (u && !0 === u.gps && !1 === u.ready && !1 === u.gpsError && "blurred") + " fullscreen bp-" + l
                        }, 
                        // s.a.createElement(ea, {
                        //     icon: "icon_search",
                        //     iconClass: "search-toggle",
                        //     title: b,
                        //     ariaLabel: b,
                        //     toggleDisabled: !a.toggleableSearch,
                        //     active: u.set || c.set
                        // }, s.a.createElement("div", {
                        //     className: "search-container"
                        // }, s.a.createElement(Ke.a, {
                        //     origin: u,
                        //     destination: c,
                        //     tab: p,
                        //     searchType: "all",
                        //     originPlaceHolder: "search-origin",
                        //     destinationPlaceHolder: "search-destination"
                        // }))), 
                        m && m.length > 0 && s.a.createElement("button", {
                            className: "realtime-toggle",
                            onClick: this.deactivateRealtimeVehicles,
                            title: r.formatMessage({
                                id: "hide-realtime-on-map",
                                defaultMessage: "Hide vehicles on map"
                            }),
                            "aria-label": r.formatMessage({
                                id: "hide-realtime-on-map",
                                defaultMessage: "Hide vehicles on map"
                            })
                        }, s.a.createElement(ae.a, {
                            img: "icon-icon_realtime_off"
                        })), s.a.createElement(ea, {
                            icon: "icon_star",
                            iconClass: "favourites-toggle",
                            ariaLabel: y,
                            title: y,
                            toggleDisabled: !a.toggleableFavourites
                        }, s.a.createElement("div", {
                            key: "foo",
                            className: "fpccontainer"
                        }, s.a.createElement(G.a, {
                            selectedPanel: h,
                            nearbyClicked: this.clickNearby,
                            favouritesClicked: this.clickFavourites
                        }, this.renderTab()))), s.a.createElement(He, {
                            breakpoint: l,
                            showStops: !0,
                            showScaleBar: !0,
                            origin: u,
                            renderCustomButtons: function() {
                                return s.a.createElement(s.a.Fragment, null, e.renderStreetModeSelector(a, n, i), e.renderMapLayerSelector())
                            }
                        }), s.a.createElement("div", {
                            className: "map-legend-container"
                        }, s.a.createElement(sa, null), s.a.createElement(ua, null), s.a.createElement(pa, null)), this.props.showSpinner && s.a.createElement(Ye, null) || null, !g.hidden && s.a.createElement("footer", {
                            id: "page-footer-container"
                        }, s.a.createElement(We.a, {
                            content: a.footer && a.footer.content || [],
                            ariaLabel: r.formatMessage({
                                id: "footer-links",
                                defaultMessage: "Footer links"
                            })
                        })), a.showIntroPopup && s.a.createElement(ra, null)) : s.a.createElement("div", {
                            className: "front-page flex-vertical " + (u && !0 === u.gps && !1 === u.ready && !1 === u.gpsError && "blurred") + " fullscreen bp-" + l
                        }, s.a.createElement("div", {
                            className: B()("flex-grow", "map-container", {
                                expanded: f
                            })
                        }, s.a.createElement(He, {
                            breakpoint: l,
                            showStops: !0,
                            origin: u,
                            renderCustomButtons: function() {
                                return s.a.createElement(s.a.Fragment, null, e.renderStreetModeSelector(a, n, i), e.renderMapLayerSelector())
                            }
                        }, 
                        // this.props.showSpinner && s.a.createElement(Ye, null) || null, s.a.createElement(ea, {
                        //     icon: "icon_search",
                        //     iconClass: "search-toggle",
                        //     title: b,
                        //     ariaLabel: b,
                        //     toggleDisabled: !a.toggleableSearch,
                        //     active: u.set || c.set
                        // }, s.a.createElement("div", {
                        //     className: "search-container"
                        // }, s.a.createElement(Ke.a, {
                        //     origin: u,
                        //     destination: c,
                        //     tab: p,
                        //     searchType: "all",
                        //     originPlaceHolder: "search-origin",
                        //     destinationPlaceHolder: "search-destination"
                        // }))), 
                        m && m.length > 0 && s.a.createElement("button", {
                            className: "realtime-toggle",
                            onClick: this.deactivateRealtimeVehicles,
                            title: r.formatMessage({
                                id: "hide-realtime-on-map",
                                defaultMessage: "Hide vehicles on map"
                            }),
                            "aria-label": r.formatMessage({
                                id: "hide-realtime-on-map",
                                defaultMessage: "Hide vehicles on map"
                            })
                        }, s.a.createElement(ae.a, {
                            img: "icon-icon_realtime_off"
                        })))), s.a.createElement("div", {
                            style: {
                                position: "relative"
                            }
                        }, s.a.createElement("div", {
                            className: B()("fullscreen-toggle", {
                                expanded: f
                            }),
                            onClick: this.togglePanelExpanded
                        }, f ? s.a.createElement(ae.a, {
                            img: "icon-icon_minimize",
                            className: "cursor-pointer"
                        }) : s.a.createElement(ae.a, {
                            img: "icon-icon_maximize",
                            className: "cursor-pointer"
                        })), s.a.createElement(z.a, {
                            selectedPanel: h,
                            nearbyClicked: this.clickNearby,
                            favouritesClicked: this.clickFavourites,
                            mapExpanded: f,
                            location: u
                        }, this.renderTab())), a.showIntroPopup && s.a.createElement(ra, null))
                    }, t
                }(s.a.Component);
            fa.contextTypes = {
                location: p.locationShape.isRequired,
                router: p.routerShape.isRequired,
                piwik: r.a.object,
                config: r.a.object.isRequired,
                executeAction: r.a.func.isRequired,
                intl: O.d.isRequired
            }, fa.propTypes = {
                breakpoint: r.a.string.isRequired,
                origin: re.a.isRequired,
                destination: re.a.isRequired,
                tab: r.a.string,
                showSpinner: r.a.bool.isRequired,
                routes: r.a.arrayOf(r.a.shape({
                    footerOptions: r.a.shape({
                        hidden: r.a.bool
                    })
                }).isRequired).isRequired,
                realtimeDepartures: r.a.array
            }, fa.defaultProps = {
                realtimeDepartures: void 0
            };
            var ga = U()((function(e, t) {
                    return !(Object(H.a)(t.origin, e.origin) && Object(H.a)(t.destination, e.destination) && Object(H.a)(t.tab, e.tab) && Object(H.a)(t.breakpoint, e.breakpoint) && Object(H.a)(t.lang, e.lang) && Object(H.a)(t.locationState, e.locationState) && Object(H.a)(t.showSpinner, e.showSpinner) && Object(H.a)(t.realtimeDepartures, e.realtimeDepartures))
                }))(fa),
                ha = Object(oe.d)(ga),
                ba = function(e, t, a) {
                    var n;
                    if (e) {
                        if (!0 === (n = Object(Ge.k)(e)).gps) {
                            t.lat && t.lon && void 0 !== t.address && (n.ready = !0, n.lat = t.lat, n.lon = t.lon, n.address = t.address || a.formatMessage({
                                id: "own-position",
                                defaultMessage: "Own Location"
                            }));
                            var i = !0 === t.locationingFailed;
                            n.gpsError = i
                        }
                    } else n = {
                        set: !1
                    };
                    return n
                },
                ya = [Ge.e, Ge.f],
                va = _()(ha, ["PositionStore", "RealtimeDeparturesStore", "MapLayerStore"], (function(e, t) {
                    var a = e.getStore("RealtimeDeparturesStore").getDepartures(),
                        n = e.getStore("PositionStore").getLocationState(),
                        i = t.params,
                        r = i.from,
                        o = i.to,
                        s = i.tab,
                        l = !1; - 1 !== ya.indexOf(r) ? (s = r, r = "-", o = "-", l = !0) : -1 !== ya.indexOf(o) && (s = o, o = "-", l = !0);
                    var c = {};
                    return s && (c.tab = s), c.realtimeDepartures = a, c.locationState = n, c.origin = ba(r, n, e.intl), c.destination = ba(o, n, e.intl), l && Object(Ge.j)({
                        origin: c.origin,
                        destination: c.destination,
                        context: "/",
                        router: e.router,
                        base: {},
                        tab: c.tab
                    }), c.showSpinner = !0 === n.isLocationingInProgress, !ye.c || !0 === n.isLocationingInProgress || !1 !== n.hasLocation || !0 !== c.origin.gps && !0 !== c.destination.gps || Object(W.a)().then((function(t) {
                        "granted" === t.state && "no-location" === n.status ? (ma("Auto Initialising geolocation"), e.executeAction(W.b)) : (!0 === c.origin.gps && (c.origin.gps = !1, c.origin.set = !1), !0 === c.destination.gps && (c.destination.gps = !1, c.destination.set = !1), ma("Redirecting away from POS"), Object(Ge.j)({
                            origin: c.origin,
                            destination: c.destination,
                            context: "/",
                            router: e.router,
                            base: {},
                            tab: c.tab
                        }))
                    })), c.lang = e.getStore("PreferencesStore").getLanguage(), c
                }));
            va.contextTypes = Object(n.a)({}, va.contextTypes, {
                location: p.locationShape.isRequired,
                router: p.routerShape.isRequired,
                executeAction: r.a.func.isRequired,
                intl: O.d
            });
            var ka = va,
                ja = a("./app/component/404.js"),
                Sa = a("./app/component/LoadingPage.js"),
                Ea = a("./node_modules/lodash-es/some.js"),
                Na = a("./node_modules/lodash-es/get.js"),
                Ra = a("./node_modules/react-toastify/lib/index.js"),
                wa = a("./app/component/AppBarSmall.js"),
                Ta = a("./app/component/AppBarLarge.js"),
                Ca = ["router", "location", "homeUrl", "logo"],
                xa = function(e) {
                    var t = e.router,
                        a = e.location,
                        n = e.homeUrl,
                        i = e.logo,
                        r = Object(Y.a)(e, Ca);
                    return s.a.createElement(oe.c, {
                        mobile: function() {
                            return s.a.createElement(wa.a, Object.assign({}, r, {
                                showLogo: 0 === a.pathname.indexOf(n),
                                logo: i,
                                homeUrl: n
                            }))
                        },
                        desktop: function() {
                            return s.a.createElement(Ta.a, Object.assign({}, r, {
                                logo: i,
                                titleClicked: function() {
                                    return t.push(n)
                                }
                            }))
                        }
                    })
                };
            xa.propTypes = {
                location: p.locationShape.isRequired,
                router: p.routerShape.isRequired,
                homeUrl: r.a.string.isRequired,
                logo: r.a.string
            };
            var La = $()({
                location: p.locationShape.isRequired,
                router: p.routerShape.isRequired
            })(xa);
            La.propTypes = {
                disableBackButton: r.a.bool,
                title: r.a.node
            };
            var Oa = La,
                Ma = a("./app/component/MobileView.js"),
                _a = a("./app/component/DesktopView.js"),
                Pa = function() {
                    return s.a.createElement("div", {
                        style: {
                            width: 0,
                            height: 0,
                            display: "none"
                        }
                    }, s.a.createElement("img", {
                        id: "",
                        src: "https://track.adform.net/Serving/TrackPoint/?pm=785700&ADFPageName=K%C3%A4yneet%20sivustolla&ADFdivider=|",
                        width: "1",
                        height: "1",
                        alt: ""
                    }))
                };
            Pa.displayName = "HSLAdformTrackingPixel";
            var Aa = Pa,
                Ia = a("./app/component/ErrorBoundary.js"),
                Da = a("./app/component/map/popups/EcoCounterPopup.js"),
                Fa = function(e, t) {
                    var a = t.router,
                        n = t.location,
                        i = t.intl,
                        r = !!n.state && n.state.ecoCounterComparisonOpen;
                    return s.a.createElement(na.a, {
                        className: "EcoCounterModal",
                        open: r,
                        title: i.formatMessage({
                            id: "compare"
                        }),
                        toggleVisibility: function() {
                            a.goBack()
                        }
                    }, r && s.a.createElement(Da.a, Object.assign({
                        isComparison: !0
                    }, n.state.ecoCounterProps)))
                };
            Fa.contextTypes = {
                router: p.routerShape.isRequired,
                location: p.locationShape.isRequired,
                intl: O.d.isRequired
            };
            var qa = Fa,
                Ba = function(e) {
                    function t(t, a) {
                        var n, i = a.headers,
                            r = a.config;
                        n = e.call(this, t) || this;
                        var o = i && (i["x-forwarded-host"] || i.host),
                            l = Object(Na.a)(r, "showHSLTracking", !1);
                        return n.trackingPixel = o && -1 === o.indexOf("127.0.0.1") && -1 === o.indexOf("localhost") && l ? s.a.createElement(Aa, {
                            key: "trackingpixel"
                        }) : void 0, n
                    }
                    Object(F.a)(t, e);
                    var n = t.prototype;
                    return n.getChildContext = function() {
                        return {
                            location: this.props.location
                        }
                    }, n.componentDidMount = function() {
                        var e = this;
                        a("./app/configurations/images lazy recursive ^\\.\\/.*$")("./" + this.context.config.logo).then((function(t) {
                            e.setState({
                                logo: t.default
                            })
                        }))
                    }, n.render = function() {
                        var e, t = this;
                        this.topBarOptions = Object.assign.apply(Object, [{}].concat(this.props.routes.map((function(e) {
                            return e.topBarOptions
                        })))), this.disableMapOnMobile = Object(Ea.a)(this.props.routes, (function(e) {
                            return e.disableMapOnMobile
                        }));
                        var a = Object(Na.a)(this.context, "config.homeUrl") || Object(Ge.g)(this.props.origin, Object(Ge.k)(this.props.params.to));
                        return e = this.props.children || !this.props.map && !this.props.header ? this.props.children || this.props.content : s.a.createElement(oe.c, {
                            mobile: function() {
                                return s.a.createElement(Ma.a, {
                                    map: t.disableMapOnMobile || t.props.map,
                                    content: t.props.content,
                                    header: t.props.header
                                })
                            },
                            desktop: function() {
                                return s.a.createElement(_a.a, {
                                    title: t.props.title,
                                    map: t.props.map,
                                    content: t.props.content,
                                    header: t.props.header,
                                    homeUrl: a,
                                    altView: !!t.props.params.stopId
                                })
                            }
                        }), s.a.createElement(o.Fragment, null, !this.topBarOptions.hidden && s.a.createElement(Oa, Object.assign({
                            title: this.props.title
                        }, this.topBarOptions, this.state, {
                            homeUrl: a
                        })), s.a.createElement("section", {
                            id: "mainContent",
                            className: "content"
                        }, this.props.meta, s.a.createElement("noscript", null, "This page requires JavaScript to run."), s.a.createElement(Ia.a, null, e)), s.a.createElement(Ra.ToastContainer, {
                            autoClose: Object(Na.a)(this, "context.config.tosterMessage.autoClose", 5e3)
                        }), s.a.createElement(qa, null), this.trackingPixel)
                    }, t
                }(s.a.Component);
            Ba.propTypes = {
                location: r.a.object.isRequired,
                children: r.a.node,
                header: r.a.node,
                map: r.a.node,
                content: r.a.node,
                title: r.a.node,
                meta: r.a.node,
                routes: r.a.arrayOf(r.a.shape({
                    topBarOptions: r.a.object,
                    disableMapOnMobile: r.a.bool
                }).isRequired).isRequired,
                params: r.a.shape({
                    from: r.a.string,
                    to: r.a.string
                }).isRequired,
                origin: re.a
            }, Ba.contextTypes = {
                headers: r.a.object.isRequired,
                config: r.a.object.isRequired
            }, Ba.defaultProps = {
                origin: {
                    set: !1,
                    ready: !1
                }
            }, Ba.childContextTypes = {
                location: r.a.object
            };
            var Va = _()(Ba, ["OriginStore"], (function(e) {
                    return {
                        origin: (0, e.getStore)("OriginStore").getOrigin()
                    }
                })),
                Ua = function(e, t) {
                    var a = t.config.title;
                    return s.a.createElement("span", null, a)
                };
            Ua.contextTypes = {
                config: r.a.object.isRequired
            };
            var Ha = Ua;

            function Wa() {
                ye.c && window.scrollTo(0, 0)
            }
            var Ka = a("./app/util/planParamUtil.js"),
                Ga = a("./app/util/timeUtils.js"),
                za = a("./node_modules/universal-cookie/esm/index.mjs"),
                Ya = function(e) {
                    var t, a = new za.a;
                    return Object(n.a)({}, e, {
                        language: null != (t = a.get("lang")) ? t : "fi"
                    })
                },
                Qa = {
                    header: function(e) {
                        var t = e.error,
                            a = e.props,
                            n = e.element,
                            i = e.retry;
                        return t ? "Failed to fetch" === t.message || "Network request failed" === t.message ? s.a.createElement(it.a, {
                            retry: i
                        }) : s.a.createElement(ja.a, null) : a ? s.a.cloneElement(n, a) : s.a.createElement(Sa.a, null)
                    },
                    map: function(e) {
                        var t = e.error,
                            a = e.props,
                            n = e.element;
                        return t ? null : a ? s.a.cloneElement(n, a) : void 0
                    },
                    title: function(e) {
                        var t = e.props,
                            a = e.element;
                        return s.a.cloneElement(a, Object(n.a)({
                            route: null
                        }, t))
                    },
                    content: function(e) {
                        var t = e.props,
                            a = e.element;
                        return t ? s.a.cloneElement(a, t) : s.a.createElement("div", {
                            className: "flex-grow"
                        })
                    }
                },
                Ja = {
                    stop: function() {
                        return {
                            calls: [{
                                kind: "Call",
                                metadata: {
                                    type: "String!"
                                },
                                name: "id",
                                value: {
                                    kind: "CallVariable",
                                    callVariableName: "stopId"
                                }
                            }],
                            children: [{
                                fieldName: "id",
                                kind: "Field",
                                metadata: {
                                    isGenerated: !0,
                                    isRequisite: !0
                                },
                                type: "ID"
                            }],
                            fieldName: "stop",
                            kind: "Query",
                            metadata: {
                                identifyingArgName: "id",
                                identifyingArgType: "String!"
                            },
                            name: "Routes",
                            type: "Stop"
                        }
                    }
                },
                Za = {
                    route: function() {
                        return {
                            calls: [{
                                kind: "Call",
                                metadata: {
                                    type: "String!"
                                },
                                name: "id",
                                value: {
                                    kind: "CallVariable",
                                    callVariableName: "routeId"
                                }
                            }],
                            children: [{
                                fieldName: "id",
                                kind: "Field",
                                metadata: {
                                    isGenerated: !0,
                                    isRequisite: !0
                                },
                                type: "ID"
                            }],
                            fieldName: "route",
                            kind: "Query",
                            metadata: {
                                identifyingArgName: "id",
                                identifyingArgType: "String!"
                            },
                            name: "Routes",
                            type: "Route"
                        }
                    }
                },
                $a = {
                    pattern: function() {
                        return {
                            calls: [{
                                kind: "Call",
                                metadata: {
                                    type: "String!"
                                },
                                name: "id",
                                value: {
                                    kind: "CallVariable",
                                    callVariableName: "patternId"
                                }
                            }],
                            children: [{
                                fieldName: "id",
                                kind: "Field",
                                metadata: {
                                    isGenerated: !0,
                                    isRequisite: !0
                                },
                                type: "ID"
                            }],
                            fieldName: "pattern",
                            kind: "Query",
                            metadata: {
                                identifyingArgName: "id",
                                identifyingArgType: "String!"
                            },
                            name: "Routes",
                            type: "Pattern"
                        }
                    }
                },
                Xa = {
                    trip: function() {
                        return {
                            calls: [{
                                kind: "Call",
                                metadata: {
                                    type: "String!"
                                },
                                name: "id",
                                value: {
                                    kind: "CallVariable",
                                    callVariableName: "tripId"
                                }
                            }],
                            children: [{
                                fieldName: "id",
                                kind: "Field",
                                metadata: {
                                    isGenerated: !0,
                                    isRequisite: !0
                                },
                                type: "ID"
                            }],
                            fieldName: "trip",
                            kind: "Query",
                            metadata: {
                                identifyingArgName: "id",
                                identifyingArgType: "String!"
                            },
                            name: "Routes",
                            type: "Trip"
                        }
                    },
                    pattern: function() {
                        return {
                            calls: [{
                                kind: "Call",
                                metadata: {
                                    type: "String!"
                                },
                                name: "id",
                                value: {
                                    kind: "CallVariable",
                                    callVariableName: "patternId"
                                }
                            }],
                            children: [{
                                fieldName: "id",
                                kind: "Field",
                                metadata: {
                                    isGenerated: !0,
                                    isRequisite: !0
                                },
                                type: "ID"
                            }],
                            fieldName: "pattern",
                            kind: "Query",
                            metadata: {
                                identifyingArgName: "id",
                                identifyingArgType: "String!"
                            },
                            name: "Routes",
                            type: "Pattern"
                        }
                    }
                },
                en = {
                    stop: function() {
                        return {
                            calls: [{
                                kind: "Call",
                                metadata: {
                                    type: "String!"
                                },
                                name: "id",
                                value: {
                                    kind: "CallVariable",
                                    callVariableName: "terminalId"
                                }
                            }],
                            children: [{
                                fieldName: "id",
                                kind: "Field",
                                metadata: {
                                    isGenerated: !0,
                                    isRequisite: !0
                                },
                                type: "ID"
                            }],
                            fieldName: "station",
                            kind: "Query",
                            metadata: {
                                identifyingArgName: "id",
                                identifyingArgType: "String!"
                            },
                            name: "Routes",
                            type: "Stop"
                        }
                    }
                },
                tn = {
                    plan: function(e, t) {
                        return a = e.getFragment("plan", t), {
                            children: [].concat.apply([], [d.a.QL.__frag(a)]),
                            fieldName: "viewer",
                            kind: "Query",
                            metadata: {},
                            name: "Routes",
                            type: "Query"
                        };
                        var a
                    },
                    serviceTimeRange: function() {
                        return {
                            fieldName: "serviceTimeRange",
                            kind: "Query",
                            metadata: {},
                            name: "Routes",
                            type: "serviceTimeRange"
                        }
                    }
                };

            function an(e) {
                console.error("Dynamic page loading failed", e)
            }

            function nn(e) {
                return function(t) {
                    return e(null, t.default)
                }
            }

            function rn(e) {
                return e.default
            }
            var on = function(e) {
                    var t = function(t) {
                        var a = t.props,
                            i = t.routerProps,
                            r = t.element;
                        return a ? s.a.cloneElement(r, a) : s.a.cloneElement(r, Object(n.a)({}, i, Object(Ka.d)(e)(i.params, i), {
                            plan: {
                                plan: {}
                            },
                            serviceTimeRange: Object(Ga.g)(),
                            loading: !0
                        }))
                    };
                    return t.propTypes = {
                        props: r.a.object.isRequired,
                        routerProps: r.a.object.isRequired
                    }, s.a.createElement(p.Route, {
                        component: Va
                    }, s.a.createElement(p.Route, {
                        path: "/styleguide",
                        getComponent: function(e, t) {
                            Promise.all([a.e("itinerary~map~route~styleguide"), a.e("itinerary~styleguide"), a.e("map~styleguide"), a.e("stop~styleguide"), a.e("styleguide")]).then(a.bind(null, "./app/component/StyleGuidePage.js")).then(nn(t)).catch(an)
                        }
                    }), s.a.createElement(p.Route, {
                        path: "/styleguide/component/:componentName",
                        topBarOptions: {
                            hidden: !0
                        },
                        getComponent: function(e, t) {
                            Promise.all([a.e("itinerary~map~route~styleguide"), a.e("itinerary~styleguide"), a.e("map~styleguide"), a.e("stop~styleguide"), a.e("styleguide")]).then(a.bind(null, "./app/component/StyleGuidePage.js")).then(nn(t)).catch(an)
                        }
                    }), s.a.createElement(p.Route, {
                        path: "/suosikki/uusi",
                        getComponent: function(e, t) {
                            a.e("add-favourite").then(a.bind(null, "./app/component/AddFavouritePage.js")).then(nn(t)).catch(an)
                        }
                    }), s.a.createElement(p.Route, {
                        path: "/" + Ge.c
                    }, s.a.createElement(p.IndexRoute, {
                        component: ja.a
                    }), " ", s.a.createElement(p.Route, {
                        path: ":stopId",
                        getComponents: function(e, t) {
                            Promise.all([Promise.all([a.e("stop~styleguide"), a.e("stop")]).then(a.bind(null, "./app/component/StopTitle.js")).then(rn), Promise.all([a.e("stop~styleguide"), a.e("stop")]).then(a.bind(null, "./app/component/StopPageHeaderContainer.js")).then(rn), Promise.all([a.e("stop~styleguide"), a.e("stop")]).then(a.bind(null, "./app/component/StopPage.js")).then(rn), Promise.all([a.e("stop~styleguide"), a.e("stop")]).then(a.bind(null, "./app/component/StopPageMap.js")).then(rn), Promise.all([a.e("stop~styleguide"), a.e("stop")]).then(a.bind(null, "./app/component/StopPageMeta.js")).then(rn)]).then((function(e) {
                                var a = e[0],
                                    n = e[1],
                                    i = e[2],
                                    r = e[3],
                                    o = e[4];
                                return t(null, {
                                    title: a,
                                    header: n,
                                    content: i,
                                    map: r,
                                    meta: o
                                })
                            }))
                        },
                        queries: {
                            header: Ja,
                            map: Ja,
                            meta: Ja
                        },
                        render: Qa
                    }, s.a.createElement(p.Route, {
                        path: "kartta",
                        fullscreenMap: !0
                    }))), s.a.createElement(p.Route, {
                        path: "/terminaalit"
                    }, s.a.createElement(p.IndexRoute, {
                        component: ja.a
                    }), " ", s.a.createElement(p.Route, {
                        path: ":terminalId",
                        getComponents: function(e, t) {
                            Promise.all([Promise.all([a.e("stop~styleguide"), a.e("stop")]).then(a.bind(null, "./app/component/TerminalTitle.js")).then(rn), Promise.all([a.e("stop~styleguide"), a.e("stop")]).then(a.bind(null, "./app/component/StopPageHeaderContainer.js")).then(rn), Promise.all([a.e("stop~styleguide"), a.e("stop")]).then(a.bind(null, "./app/component/TerminalPage.js")).then(rn), Promise.all([a.e("stop~styleguide"), a.e("stop")]).then(a.bind(null, "./app/component/StopPageMap.js")).then(rn), Promise.all([a.e("stop~styleguide"), a.e("stop")]).then(a.bind(null, "./app/component/StopPageMeta.js")).then(rn)]).then((function(e) {
                                var a = e[0],
                                    n = e[1],
                                    i = e[2],
                                    r = e[3],
                                    o = e[4];
                                return t(null, {
                                    title: a,
                                    header: n,
                                    content: i,
                                    map: r,
                                    meta: o
                                })
                            }))
                        },
                        queries: {
                            header: en,
                            map: en,
                            meta: en
                        },
                        render: Qa
                    }, s.a.createElement(p.Route, {
                        path: "kartta",
                        fullscreenMap: !0
                    }))), s.a.createElement(p.Route, {
                        path: "/" + Ge.b
                    }, s.a.createElement(p.IndexRoute, {
                        component: ja.a
                    }), " ", s.a.createElement(p.Route, {
                        path: ":routeId"
                    }, s.a.createElement(p.IndexRedirect, {
                        to: "pysakit"
                    }), s.a.createElement(p.Route, {
                        path: "pysakit"
                    }, s.a.createElement(p.IndexRedirect, {
                        to: ":routeId%3A0%3A01"
                    }), " ", s.a.createElement(p.Route, {
                        path: ":patternId"
                    }, s.a.createElement(p.IndexRoute, {
                        getComponents: function(e, t) {
                            Promise.all([Promise.all([a.e("itinerary~map~route~styleguide"), a.e("route")]).then(a.bind(null, "./app/component/RouteTitle.js")).then(rn), Promise.all([a.e("itinerary~map~route~styleguide"), a.e("route")]).then(a.bind(null, "./app/component/RoutePage.js")).then(rn), Promise.all([a.e("itinerary~map~route~styleguide"), a.e("route")]).then(a.bind(null, "./app/component/RouteMapContainer.js")).then(rn), Promise.all([a.e("itinerary~map~route~styleguide"), a.e("route")]).then(a.bind(null, "./app/component/PatternStopsContainer.js")).then(rn), Promise.all([a.e("itinerary~map~route~styleguide"), a.e("route")]).then(a.bind(null, "./app/component/RoutePageMeta.js")).then(rn)]).then((function(e) {
                                var a = e[0],
                                    n = e[1],
                                    i = e[2],
                                    r = e[3],
                                    o = e[4];
                                return t(null, {
                                    title: a,
                                    header: n,
                                    map: i,
                                    content: r,
                                    meta: o
                                })
                            }))
                        },
                        queries: {
                            title: Za,
                            header: Za,
                            map: $a,
                            content: $a,
                            meta: Za
                        },
                        render: Qa
                    }), s.a.createElement(p.Route, {
                        path: "kartta",
                        getComponents: function(e, t) {
                            Promise.all([Promise.all([a.e("itinerary~map~route~styleguide"), a.e("route")]).then(a.bind(null, "./app/component/RouteTitle.js")).then(rn), Promise.all([a.e("itinerary~map~route~styleguide"), a.e("route")]).then(a.bind(null, "./app/component/RoutePage.js")).then(rn), Promise.all([a.e("itinerary~map~route~styleguide"), a.e("route")]).then(a.bind(null, "./app/component/RouteMapContainer.js")).then(rn), Promise.all([a.e("itinerary~map~route~styleguide"), a.e("route")]).then(a.bind(null, "./app/component/PatternStopsContainer.js")).then(rn), Promise.all([a.e("itinerary~map~route~styleguide"), a.e("route")]).then(a.bind(null, "./app/component/RoutePageMeta.js")).then(rn)]).then((function(e) {
                                var a = e[0],
                                    n = e[1],
                                    i = e[2],
                                    r = e[3],
                                    o = e[4];
                                return t(null, {
                                    title: a,
                                    header: n,
                                    map: i,
                                    content: r,
                                    meta: o
                                })
                            }))
                        },
                        queries: {
                            title: Za,
                            header: Za,
                            map: $a,
                            content: $a,
                            meta: Za
                        },
                        render: Qa,
                        fullscreenMap: !0
                    }), s.a.createElement(p.Route, {
                        path: ":tripId",
                        getComponents: function(e, t) {
                            Promise.all([Promise.all([a.e("itinerary~map~route~styleguide"), a.e("route")]).then(a.bind(null, "./app/component/RouteTitle.js")).then(rn), Promise.all([a.e("itinerary~map~route~styleguide"), a.e("route")]).then(a.bind(null, "./app/component/RoutePage.js")).then(rn), Promise.all([a.e("itinerary~map~route~styleguide"), a.e("route")]).then(a.bind(null, "./app/component/RouteMapContainer.js")).then(rn), Promise.all([a.e("itinerary~map~route~styleguide"), a.e("route")]).then(a.bind(null, "./app/component/TripStopsContainer.js")).then(rn), Promise.all([a.e("itinerary~map~route~styleguide"), a.e("route")]).then(a.bind(null, "./app/component/RoutePageMeta.js")).then(rn)]).then((function(e) {
                                var a = e[0],
                                    n = e[1],
                                    i = e[2],
                                    r = e[3],
                                    o = e[4];
                                return t(null, {
                                    title: a,
                                    header: n,
                                    map: i,
                                    content: r,
                                    meta: o
                                })
                            }))
                        },
                        queries: {
                            title: Za,
                            header: Za,
                            map: Xa,
                            content: Xa,
                            meta: Za
                        },
                        render: Qa
                    }, s.a.createElement(p.Route, {
                        path: "kartta",
                        fullscreenMap: !0
                    })))), s.a.createElement(p.Route, {
                        path: "aikataulu"
                    }, s.a.createElement(p.IndexRedirect, {
                        to: ":routeId%3A0%3A01"
                    }), s.a.createElement(p.Route, {
                        path: ":patternId",
                        disableMapOnMobile: !0,
                        getComponents: function(e, t) {
                            Promise.all([Promise.all([a.e("itinerary~map~route~styleguide"), a.e("route")]).then(a.bind(null, "./app/component/RouteTitle.js")).then(rn), Promise.all([a.e("itinerary~map~route~styleguide"), a.e("route")]).then(a.bind(null, "./app/component/RoutePage.js")).then(rn), Promise.all([a.e("itinerary~map~route~styleguide"), a.e("route")]).then(a.bind(null, "./app/component/RouteMapContainer.js")).then(rn), Promise.all([a.e("itinerary~map~route~styleguide"), a.e("route")]).then(a.bind(null, "./app/component/RouteScheduleContainer.js")).then(rn), Promise.all([a.e("itinerary~map~route~styleguide"), a.e("route")]).then(a.bind(null, "./app/component/RoutePageMeta.js")).then(rn)]).then((function(e) {
                                var a = e[0],
                                    n = e[1],
                                    i = e[2],
                                    r = e[3],
                                    o = e[4];
                                return t(null, {
                                    title: a,
                                    header: n,
                                    map: i,
                                    content: r,
                                    meta: o
                                })
                            }))
                        },
                        queries: {
                            title: Za,
                            header: Za,
                            map: $a,
                            content: $a,
                            meta: Za
                        },
                        render: Qa
                    })), s.a.createElement(p.Route, {
                        path: "hairiot",
                        getComponents: function(e, t) {
                            Promise.all([Promise.all([a.e("itinerary~map~route~styleguide"), a.e("route")]).then(a.bind(null, "./app/component/RouteTitle.js")).then(rn), Promise.all([a.e("itinerary~map~route~styleguide"), a.e("route")]).then(a.bind(null, "./app/component/RoutePage.js")).then(rn), Promise.all([a.e("itinerary~map~route~styleguide"), a.e("route")]).then(a.bind(null, "./app/component/RouteAlertsContainer.js")).then(rn), Promise.all([a.e("itinerary~map~route~styleguide"), a.e("route")]).then(a.bind(null, "./app/component/RoutePageMeta.js")).then(rn)]).then((function(e) {
                                var a = e[0],
                                    n = e[1],
                                    i = e[2],
                                    r = e[3];
                                return t(null, {
                                    title: a,
                                    header: n,
                                    content: i,
                                    meta: r
                                })
                            }))
                        },
                        queries: {
                            title: Za,
                            header: Za,
                            content: Za,
                            meta: Za
                        },
                        prepareParams: Ya,
                        render: Qa
                    }))), s.a.createElement(p.Route, {
                        path: "/" + Ge.a + "/:from/:to",
                        getComponents: function(e, t) {
                            Promise.all([Promise.all([a.e("vendors~itinerary"), a.e("itinerary~map~route~styleguide"), a.e("itinerary~styleguide"), a.e("itinerary")]).then(a.bind(null, "./app/component/SummaryTitle.js")).then(rn), Promise.all([a.e("vendors~itinerary"), a.e("itinerary~map~route~styleguide"), a.e("itinerary~styleguide"), a.e("itinerary")]).then(a.bind(null, "./app/component/SummaryPage.js")).then(rn), Promise.all([a.e("vendors~itinerary"), a.e("itinerary~map~route~styleguide"), a.e("itinerary~styleguide"), a.e("itinerary")]).then(a.bind(null, "./app/component/SummaryPageMeta.js")).then(rn)]).then((function(e) {
                                var a = e[0],
                                    n = e[1],
                                    i = e[2];
                                return t(null, {
                                    title: a,
                                    content: n,
                                    meta: i
                                })
                            }))
                        },
                        queries: {
                            content: tn
                        },
                        prepareParams: Object(Ka.d)(e),
                        render: {
                            content: t
                        }
                    }, s.a.createElement(p.Route, {
                        path: ":hash/tulosta",
                        getComponents: function(e, t) {
                            Promise.all([a.e("vendors~itinerary"), a.e("itinerary~map~route~styleguide"), a.e("itinerary~styleguide"), a.e("itinerary")]).then(a.bind(null, "./app/component/PrintableItinerary.js")).then((function(e) {
                                return t(null, {
                                    content: e.default
                                })
                            })).catch(an)
                        },
                        printPage: !0
                    }, s.a.createElement(p.Route, {
                        path: "kartta",
                        fullscreenMap: !0
                    })), s.a.createElement(p.Route, {
                        path: ":hash",
                        getComponents: function(e, t) {
                            Promise.all([Promise.all([a.e("vendors~itinerary"), a.e("itinerary~map~route~styleguide"), a.e("itinerary~styleguide"), a.e("itinerary")]).then(a.bind(null, "./app/component/ItineraryTab.js")).then(rn), Promise.all([a.e("vendors~itinerary"), a.e("itinerary~map~route~styleguide"), a.e("itinerary~styleguide"), a.e("itinerary")]).then(a.bind(null, "./app/component/ItineraryPageMap.js")).then(rn)]).then((function(e) {
                                var a = e[0],
                                    n = e[1];
                                return t(null, {
                                    content: a,
                                    map: n
                                })
                            }))
                        }
                    }, s.a.createElement(p.Route, {
                        path: "kartta",
                        fullscreenMap: !0
                    }))), s.a.createElement(p.Route, {
                        path: "/suosikki/muokkaa/sijainti/:id",
                        getComponent: function(e, t) {
                            a.e("add-favourite").then(a.bind(null, "./app/component/AddFavouritePage.js")).then(nn(t)).catch(an)
                        }
                    }), s.a.createElement(p.Route, {
                        path: "/suosikki/muokkaa/pysakki/:id",
                        getComponent: function(e, t) {
                            a.e("add-favourite").then(a.bind(null, "./app/component/AddFavouritePage.js")).then(nn(t)).catch(an)
                        }
                    }), s.a.createElement(p.Route, {
                        path: "/tietoja-palvelusta",
                        getComponents: function(e, t) {
                            Promise.all([Promise.resolve(Ha), a.e("about").then(a.bind(null, "./app/component/AboutPage.js")).then(rn)]).then((function(e) {
                                var a = e[0],
                                    n = e[1];
                                return t(null, {
                                    title: a,
                                    content: n
                                })
                            }))
                        }
                    }), s.a.createElement(p.Route, {
                        path: "/saavutettavuusseloste",
                        getComponents: function(e, t) {
                            Promise.all([Promise.resolve(Ha), a.e("accessibility-report").then(a.bind(null, "./app/component/AccessibilityReport.js")).then(rn)]).then((function(e) {
                                var a = e[0],
                                    n = e[1];
                                return t(null, {
                                    title: a,
                                    content: n
                                })
                            }))
                        }
                    }), !e.URL.API_URL.includes("/api.") && s.a.createElement(p.Route, {
                        path: "/admin",
                        getComponent: function(e, t) {
                            Promise.all([a.e(1), a.e("admin")]).then(a.bind(null, "./app/component/AdminPage.js")).then(nn(t)).catch(an)
                        }
                    }), s.a.createElement(p.Route, {
                        path: "/js/:name",
                        component: ja.a
                    }), s.a.createElement(p.Route, {
                        path: "/css/:name",
                        component: ja.a
                    }), s.a.createElement(p.Route, {
                        path: "/(:from)(/:to)(/:tab)",
                        topBarOptions: {
                            disableBackButton: !0
                        },
                        components: {
                            title: Ha,
                            content: ka
                        },
                        onEnter: Wa
                    }), s.a.createElement(p.Route, {
                        path: "/?mock",
                        topBarOptions: {
                            disableBackButton: !0
                        },
                        components: {
                            title: Ha,
                            content: ka
                        }
                    }), s.a.createElement(p.Route, {
                        path: "*",
                        component: ja.a
                    }))
                },
                sn = a("./node_modules/fluxible/addons/BaseStore.js"),
                ln = a.n(sn),
                cn = a("./node_modules/lodash-es/maxBy.js"),
                un = function(e) {
                    function t(t) {
                        var a;
                        return (a = e.call(this, t) || this).getById = function(e) {
                            return Object(_t.a)(a.locations, (function(t) {
                                return e === t.id
                            }))
                        }, a.migrate = function() {
                            a.migrateAndSave(a.migrate01(a.locations))
                        }, a.migrateAndSave = function(e) {
                            null !== e && (a.locations = e, a.save())
                        }, a.getMaxId = function(e) {
                            return (Object(cn.a)(e, (function(e) {
                                return e.id
                            })) || {
                                id: 0
                            }).id
                        }, a.migrate01 = function(e) {
                            var t = function(e) {
                                return void 0 === e.version
                            };
                            if (0 === e.filter(t).length) return null;
                            var i = a.getMaxId(e);
                            return e.map((function(e) {
                                return i += 1, t(e) ? Object(n.a)({}, e, {
                                    version: 1,
                                    id: i
                                }) : {
                                    favourite: e
                                }
                            }))
                        }, a.save = function() {
                            Object(aa.t)(a.locations)
                        }, a.locations = a.getLocations(), a.migrate(), a
                    }
                    Object(F.a)(t, e);
                    var a = t.prototype;
                    return a.getLocations = function() {
                        return Object(aa.c)()
                    }, a.addFavouriteLocation = function(e) {
                        if ("object" != typeof e) throw new Error("location is not a object:" + JSON.stringify(e));
                        void 0 === e.id ? this.locations.push(Object(n.a)({}, e, {
                            id: 1 + this.getMaxId(this.locations)
                        })) : this.locations = this.locations.map((function(t) {
                            return t.id === e.id ? e : t
                        })), this.save(), this.emitChange()
                    }, a.deleteFavouriteLocation = function(e) {
                        this.locations = this.locations.filter((function(t) {
                            return t.id !== e.id
                        })), this.save(), this.emitChange()
                    }, t
                }(ln.a);
            un.storeName = "FavouriteLocationStore", un.handlers = {
                AddFavouriteLocation: "addFavouriteLocation",
                DeleteFavouriteLocation: "deleteFavouriteLocation"
            };
            var dn = un,
                pn = a("./node_modules/lodash-es/includes.js"),
                mn = function(e) {
                    function t() {
                        for (var t, a = arguments.length, n = new Array(a), i = 0; i < a; i++) n[i] = arguments[i];
                        return (t = e.call.apply(e, [this].concat(n)) || this).routes = Object(aa.d)(), t
                    }
                    Object(F.a)(t, e);
                    var a = t.prototype;
                    return a.isFavourite = function(e) {
                        return Object(pn.a)(this.routes, e)
                    }, a.storeRoutes = function() {
                        Object(aa.u)(this.routes)
                    }, a.getRoutes = function() {
                        return this.routes
                    }, a.addFavouriteRoute = function(e) {
                        if ("string" != typeof e) throw new Error("routeId is not a string:" + JSON.stringify(e));
                        var t = this.routes.filter((function(t) {
                            return t !== e
                        }));
                        t.length === this.routes.length && t.push(e), this.routes = t, this.storeRoutes(), this.emitChange(e)
                    }, t
                }(ln.a);
            mn.storeName = "FavouriteRoutesStore", mn.handlers = {
                AddFavouriteRoute: "addFavouriteRoute"
            };
            var fn = mn,
                gn = function(e) {
                    function t(t) {
                        var a;
                        return (a = e.call(this, t) || this).getById = function(e) {
                            return Object(_t.a)(a.stops, (function(t) {
                                return e === t.id
                            }))
                        }, a.getMaxId = function(e) {
                            return (Object(cn.a)(e, (function(e) {
                                return e.id
                            })) || {
                                id: 0
                            }).id
                        }, a.stops = a.getStops(), a
                    }
                    Object(F.a)(t, e);
                    var a = t.prototype;
                    return a.getStops = function() {
                        return Object(aa.e)()
                    }, a.isFavourite = function(e) {
                        return Object(_t.a)(this.stops, {
                            gtfsId: e
                        })
                    }, a.storeStops = function() {
                        Object(aa.v)(this.stops)
                    }, a.addFavouriteStop = function(e) {
                        if ("object" != typeof e) throw new Error("stop is not a object:" + JSON.stringify(e));
                        void 0 === e.id ? this.stops.push(Object(n.a)({}, e, {
                            id: 1 + this.getMaxId(this.stops)
                        })) : this.stops = this.stops.map((function(t) {
                            return t.id === e.id ? e : t
                        })), this.storeStops(), this.emitChange()
                    }, a.deleteFavouriteStop = function(e) {
                        this.stops = this.stops.filter((function(t) {
                            return t.id !== e.id
                        })), this.storeStops(), this.emitChange()
                    }, t
                }(ln.a);
            gn.storeName = "FavouriteStopsStore", gn.handlers = {
                AddFavouriteStop: "addFavouriteStop",
                DeleteFavouriteStop: "deleteFavouriteStop"
            };
            var hn = gn,
                bn = function(e) {
                    function t() {
                        for (var t, a = arguments.length, i = new Array(a), r = 0; r < a; r++) i[r] = arguments[r];
                        return (t = e.call.apply(e, [this].concat(i)) || this).addMessage = function(e) {
                            var a = Object(aa.l)(),
                                i = Object(n.a)({}, e);
                            i.id || (i.id = JSON.stringify(i)), t.messages.has(i.id) || "repeat" !== e.persistence && -1 !== a.indexOf(e.id) || (t.messages.set(i.id, i), t.emitChange())
                        }, t.addConfigMessages = function(e) {
                            var a = function(e) {
                                e.staticMessages && e.staticMessages.forEach(t.addMessage)
                            };
                            a(e), ye.c && void 0 !== e.staticMessagesUrl && fetch(e.staticMessagesUrl, {
                                mode: "cors",
                                cache: "reload"
                            }).then((function(e) {
                                return e.json().then((function(e) {
                                    a(e)
                                }))
                            }))
                        }, t.markMessageAsRead = function(e) {
                            var a, n;
                            a = Array.isArray(e) ? e : [e];
                            var i = Object(aa.l)();
                            a.forEach((function(e) {
                                -1 === i.indexOf(e) && (i.push(e), n = !0), t.messages.has(e) && (t.messages.delete(e), n = !0)
                            })), n && (Object(aa.C)(i), t.emitChange())
                        }, t.getReadMessageIds = function() {
                            return Object(aa.l)()
                        }, t.getMessages = function() {
                            var e = [];
                            return t.messages.forEach((function(t) {
                                e.push(t)
                            })), e.sort((function(e, t) {
                                var a = e.priority || 0,
                                    n = t.priority || 0;
                                return a > n ? -1 : a < n ? 1 : 0
                            })), e
                        }, t.messages = new Map, t
                    }
                    return Object(F.a)(t, e), t
                }(ln.a);
            bn.storeName = "MessageStore", bn.handlers = {
                AddMessage: "addMessage",
                MarkMessageAsRead: "markMessageAsRead"
            };
            var yn = bn,
                vn = a("./node_modules/lodash-es/cloneDeep.js"),
                kn = a("./node_modules/lodash-es/orderBy.js"),
                jn = function(e) {
                    function t() {
                        return e.apply(this, arguments) || this
                    }
                    Object(F.a)(t, e);
                    var a = t.prototype;
                    return a.getStorageObject = function() {
                        var e = Object(aa.j)();
                        return (!e || null == e.version || e.version < 3) && (e = {
                            version: 3,
                            items: []
                        }, Object(aa.A)(e)), e
                    }, a.saveSearch = function(e) {
                        var t = this.getStorageObject().items,
                            a = Object(_t.a)(t, (function(t) {
                                return Object(H.a)(Object(ct.d)(e.item.properties), Object(ct.d)(t.item.properties))
                            })),
                            i = de()().unix();
                        null != a ? (a.count += 1, a.lastUpdated = i, a.item = Object(vn.a)(e.item)) : t.push(Object(n.a)({
                            count: 1,
                            lastUpdated: i
                        }, e)), Object(aa.A)({
                            version: 3,
                            items: Object(kn.a)(t, "count", "desc")
                        }), this.emitChange(e)
                    }, a.getOldSearches = function(e) {
                        var t = this.getStorageObject().items,
                            a = de()().unix();
                        return t.filter((function(t) {
                            return (!e || t.type === e) && (!t.lastUpdated || a - t.lastUpdated < 5184e3)
                        })).map((function(e) {
                            return e.item
                        }))
                    }, t
                }(ln.a);
            jn.storeName = "OldSearchesStore", jn.handlers = {
                SaveSearch: "saveSearch"
            };
            var Sn = jn,
                En = function(e) {
                    function t() {
                        return e.apply(this, arguments) || this
                    }
                    Object(F.a)(t, e);
                    var a = t.prototype;
                    return a.getOrigin = function() {
                        return this.origin
                    }, a.setOrigin = function(e) {
                        this.origin = e, this.emitChange()
                    }, t
                }(ln.a);
            En.storeName = "OriginStore", En.handlers = {
                SetOrigin: "setOrigin"
            };
            var Nn = En,
                Rn = function(e) {
                    function t(t) {
                        var a;
                        a = e.call(this, t) || this;
                        var n = t.getContext().config;
                        a.availableLanguages = n.availableLanguages, a.defaultLanguage = n.defaultLanguage, ye.i && a.setLanguage("en"), a.cookies = new za.a;
                        var i = a.cookies.get("lang");
                        return -1 === a.availableLanguages.indexOf(i) ? a.language = a.defaultLanguage : a.language = i, a
                    }
                    Object(F.a)(t, e);
                    var a = t.prototype;
                    return a.getLanguage = function() {
                        return this.language
                    }, a.setLanguage = function(e) {
                        -1 !== this.availableLanguages.indexOf(e) && (L.a.locale(e), this.cookies.set("lang", e, {
                            maxAge: 31536e3,
                            path: "/"
                        }), this.language = e, document.documentElement.lang = e, this.emitChange())
                    }, t
                }(ln.a);
            Rn.storeName = "PreferencesStore", Rn.handlers = {
                SetLanguage: "setLanguage"
            };
            var wn = Rn,
                Tn = function(e) {
                    function t(t) {
                        var a;
                        return (a = e.call(this, t) || this).getVehicle = function(e) {
                            return a.vehicles[e]
                        }, a.getSubscriptions = function() {
                            return a.subscriptions
                        }, a.vehicles = {}, a.subscriptions = [], a
                    }
                    Object(F.a)(t, e);
                    var a = t.prototype;
                    return a.storeClient = function(e) {
                        this.client = e.client, this.subscriptions = e.topics
                    }, a.clearClient = function() {
                        this.client = void 0, this.vehicles = {}, this.subscriptions = []
                    }, a.updateSubscriptions = function(e) {
                        this.subscriptions = e, this.vehicles = {}
                    }, a.handleMessage = function(e) {
                        this.vehicles[e.id] = e.message, this.emitChange(e.id)
                    }, t
                }(ln.a);
            Tn.storeName = "RealTimeInformationStore", Tn.handlers = {
                RealTimeClientStarted: "storeClient",
                RealTimeClientStopped: "clearClient",
                RealTimeClientMessage: "handleMessage",
                RealTimeClientTopicChanged: "updateSubscriptions"
            };
            var Cn = Tn,
                xn = a("./app/store/MaintenanceVehicleRealTimeInformationStore.js"),
                Ln = a("./app/store/MaintenanceVehicleTailStore.js"),
                On = a("./app/store/TimeStore.js"),
                Mn = function(e) {
                    function t() {
                        return e.apply(this, arguments) || this
                    }
                    Object(F.a)(t, e);
                    var a = t.prototype;
                    return a.isFavourite = function(e) {
                        return Object(aa.b)().includes(e)
                    }, a.addFavouriteCityBikeStation = function(e) {
                        var t = Object(aa.b)();
                        t.includes(e) || (t.push(e), Object(aa.s)(t), this.emitChange())
                    }, a.removeFavouriteCityBikeStation = function(e) {
                        var t = Object(aa.b)(),
                            a = t.filter((function(t) {
                                return t !== e
                            }));
                        a.length !== t.length && (Object(aa.s)(a), this.emitChange())
                    }, a.toggleFavouriteCityBikeStation = function(e) {
                        this.isFavourite(e) ? this.removeFavouriteCityBikeStation(e) : this.addFavouriteCityBikeStation(e)
                    }, t
                }(ln.a);
            Mn.storeName = "FavouriteCityBikeStationStore", Mn.handlers = {
                ToggleFavouriteCityBikeStation: "toggleFavouriteCityBikeStation"
            };
            var _n = Mn,
                Pn = a("./app/store/MapLayerStore.js"),
                An = a("./app/store/MapLayerOptionsStore.js"),
                In = function(e) {
                    function t(t) {
                        var a;
                        return (a = e.call(this, t) || this).departures = null, a.updateDepartures = function(e) {
                            a.departures = Array.isArray(e) ? e.map((function(e) {
                                return Object(n.a)({}, e, {
                                    pattern: Object(n.a)({}, e.pattern, {
                                        stops: [].concat(e.trip.stops).reverse().reduce((function(t, a) {
                                            return t.length || a.code === e.stop.code ? [].concat(t, [a]) : t
                                        }), [])
                                    })
                                })
                            })) : null, a.emitChange()
                        }, a.clearDepartures = function() {
                            a.departures = null, a.emitChange()
                        }, a.updateDepartures(), a
                    }
                    return Object(F.a)(t, e), t.prototype.getDepartures = function() {
                        return this.departures
                    }, t
                }(ln.a);
            In.storeName = "RealtimeDeparturesStore", In.handlers = {
                UpdateDepartures: "updateDepartures",
                ClearDepartures: "clearDepartures"
            };
            var Dn, Fn = In,
                qn = a("./app/translations.js"),
                Bn = a("./node_modules/history/lib/index.js"),
                Vn = a("./app/localStorageHistory.js");
            Dn = ye.e ? Vn.a : ye.c ? Bn.createHistory : Bn.createMemoryHistory;
            var Un = function(e) {
                return Object(p.useRouterHistory)(Object(Bn.useQueries)(Dn))({
                    basename: e.APP_PATH
                })
            };
            window._paq = window._paq || [];
            var Hn = a("./app/util/searchUtils.js"),
                Wn = a("./app/util/otpStrings.js"),
                Kn = /^[^*]*\*([^*]*)\*([^*]*)\*([^*]*)/;

            function Gn(e) {
                return !Array.isArray(e) || e.length < 1 ? " " : Object(Wn.b)({
                    address: e[0].properties.label,
                    lon: e[0].geometry.coordinates[0],
                    lat: e[0].geometry.coordinates[1]
                })
            }

            function zn(e, t, a) {
                if (e) {
                    var n = Kn.exec(e);
                    if (n) {
                        var i = Object(Rt.i)([n[2], n[3]]);
                        return Promise.resolve(Object(Wn.b)({
                            address: n[1],
                            lon: i[0],
                            lat: i[1]
                        }))
                    }
                    return Object(Hn.c)(e, a.searchParams, null, null, null, a).then(Gn).catch((function() {
                        return " "
                    }))
                }
                if (t) {
                    var r = t.replace("+", " ");
                    return Object(Hn.c)(r, a.searchParams, null, null, null, a).then(Gn).catch((function() {
                        return " "
                    }))
                }
                return Promise.resolve(" ")
            }

            function Yn(e, t) {
                var a, n = L.a.tz(t.timezoneData.split("|")[0]),
                    i = "";
                if (e.daymonthyear) {
                    var r = e.daymonthyear.split(".");
                    3 === r.length && (n.date(r[0]), n.month(parseInt(r[1], 10) - 1), n.year(r[2]), a = !0)
                }(e.year && (n.year(e.year), a = !0), e.month && (n.month(e.month - 1), a = !0), e.day && (n.date(e.day), a = !0), e.hour && (n.hour(e.hour), a = !0), e.minute && (n.minute(e.minute), a = !0), a) && (t.queryMaxAgeDays && L.a.tz(t.timezoneData.split("|")[0]).diff(n, "days") < t.queryMaxAgeDays && (i = "time=" + n.unix()));
                return "arrival" === e.timetype && (i.length > 0 ? i += "&arriveBy=true" : i = "arriveBy=true"), Promise.resolve(i)
            }
            var Qn = function(e) {
                return function() {
                    return {
                        plugComponentContext: e,
                        plugActionContext: e,
                        plugStoreContext: e
                    }
                }
            };
            window.debug = N.a;
            var Jn, Zn, $n = window.state.context.plugins["extra-context-plugin"].config,
                Xn = (Jn = $n, (Zn = new D.a({
                    component: on(Jn)
                })).registerStore(dn), Zn.registerStore(fn), Zn.registerStore(hn), Zn.registerStore(yn), Zn.registerStore(Sn), Zn.registerStore(ut.a), Zn.registerStore(Nn), Zn.registerStore(wn), Zn.registerStore(Cn), Zn.registerStore(xn.a), Zn.registerStore(Ln.a), Zn.registerStore(On.a), Zn.registerStore(_n), Zn.registerStore(Pn.a), Zn.registerStore(An.a), Zn.registerStore(Fn), Zn.plug({
                    name: "extra-context-plugin",
                    plugContext: function(e) {
                        var t = e.headers;
                        return {
                            plugComponentContext: function(e) {
                                e.config = Jn, e.headers = t
                            },
                            plugActionContext: function(e) {
                                e.config = Jn
                            },
                            plugStoreContext: function(e) {
                                e.config = Jn
                            },
                            dehydrate: function() {
                                return {
                                    headers: t,
                                    config: Jn
                                }
                            },
                            rehydrate: function(e) {
                                Jn = e.config, t = e.headers
                            }
                        }
                    },
                    dehydrate: function() {
                        return {}
                    },
                    rehydrate: function() {}
                }), Zn),
                ei = function(e) {
                    if (e) {
                        var t = a("./node_modules/raven-js/src/singleton.js");
                        return t.addPlugin(a("./node_modules/raven-js/plugins/console.js")), t.config(e, {
                            release: T,
                            stacktrace: !0,
                            sampleRate: .1
                        }).install(), t
                    }
                }($n.SENTRY_DSN),
                ti = function(e, t) {
                    var a;
                    window._paq.push(["enableLinkTracking"]), window._paq.push(["setTrackerUrl", "https://" + e.PIWIK_ADDRESS + "/piwik.php"]), window._paq.push(["setSiteId", e.PIWIK_ID]), window._paq.push(["setCustomVariable", 4, "commit_id", T, "visit"]), window._paq.push(["setCustomVariable", 5, "build_time", C, "visit"]), window._paq.push([function() {
                        a = this.getVisitorId(), t && t.setUserContext({
                            piwik: a
                        })
                    }]);
                    var n = {};
                    if (["setCustomUrl", "setCustomVariable", "trackPageView"].forEach((function(e) {
                            n[e] = function() {
                                for (var t = arguments.length, a = new Array(t), n = 0; n < t; n++) a[n] = arguments[n];
                                return window._paq.push([e].concat(a))
                            }
                        })), n.trackEvent = function() {
                            return null
                        }, n.getVisitorId = function() {
                            return a
                        }, e.PIWIK_ADDRESS && null != e.PIWIK_ID) {
                        var i = function() {
                            return function(e) {
                                var t = document.createElement("script");
                                t.type = "text/javascript", t.async = !0, t.defer = !0, t.src = "//cdn.matomo.cloud/" + e.PIWIK_ADDRESS + "/piwik.js", document.getElementsByTagName("body")[0].appendChild(t)
                            }(e)
                        };
                        "requestIdleCallback" in window ? window.requestIdleCallback(i) : window.setTimeout(i, 1e3)
                    }
                    return n
                }($n, ei),
                ai = {
                    name: "PiwikPlugin",
                    plugContext: Qn((function(e) {
                        e.piwik = ti
                    }))
                },
                ni = {
                    name: "RavenPlugin",
                    plugContext: Qn((function(e) {
                        e.raven = ei
                    }))
                };
            Xn.plug(ni), Xn.plug(ai);
            var ii = function() {
                return Xn.rehydrate(window.state, (function(e, t) {
                    if (e) throw e;
                    window.context = t, d.a.injectNetworkLayer(new R.RelayNetworkLayer([Object(R.urlMiddleware)({
                            url: $n.URL.OTP + "/graphql"
                        }), Object(R.gqErrorsMiddleware)(), Object(R.retryMiddleware)({
                            fetchTimeout: $n.OTPTimeout + 1e3
                        }), function(e) {
                            return function(t) {
                                return t.headers.OTPTimeout = $n.OTPTimeout, t.headers.id = ti.getVisitorId(), e(t)
                            }
                        }])), f.a.injectPreparedData(d.a.Store, JSON.parse(document.getElementById("relayData").textContent)), t.getComponentContext().getStore("MessageStore").addConfigMessages($n),
                        function(e, t) {
                            L.a.locale(e), t.timezoneData && (L.a.tz.add(t.timezoneData), L.a.tz.setDefault(t.timezoneData.split("|")[0])), "en" !== e && a("./node_modules/moment/locale sync recursive ^.\\/(fi|sv|en|fr|nb|de)$")("./" + e), L.a.relativeTimeThreshold("s", t.moment.relativeTimeThreshold.seconds), L.a.relativeTimeThreshold("m", t.moment.relativeTimeThreshold.minutes), L.a.relativeTimeThreshold("h", t.moment.relativeTimeThreshold.hours), L.a.relativeTimeThreshold("d", t.moment.relativeTimeThreshold.days), L.a.relativeTimeThreshold("M", t.moment.relativeTimeThreshold.months), L.a
                        }(t.getComponentContext().getStore("PreferencesStore").getLanguage(), $n);
                    var i = Un($n);
                    if ($n.redirectReittiopasParams) {
                        var o = window.location.pathname,
                            l = function(e) {
                                return e ? e.substring(1).split("&").map((function(e) {
                                    return e.split("=")
                                })).reduce((function(e, t) {
                                    var a = t[0],
                                        i = t[1],
                                        r = {};
                                    return r[a] = decodeURIComponent(i), Object(n.a)({}, e, r)
                                }), {}) : {}
                            }(window.location.search);
                        l.from || l.to || l.from_in || l.to_in ? function(e, t) {
                            return Promise.all([zn(e.from, e.from_in, t), zn(e.to, e.to_in, t), Yn(e, t), (a = e.utm_campaign, n = e.utm_source, i = e.utm_medium, r = "", a && n && i && (r = "&utm_campaign=" + a + "&utm_source=" + n + "&utm_medium=" + i), Promise.resolve(r))]).then((function(e) {
                                var t = e[0],
                                    a = e[1],
                                    n = e[2],
                                    i = e[3];
                                return t && t.length > 1 && a && a.length > 1 ? n ? "/" + Ge.a + "/" + t + "/" + a + "/?" + n + i : i ? "/" + Ge.a + "/" + t + "/" + a + "/?" + i.substr(1) : "/" + Ge.a + "/" + t + "/" + a + "/" : i.length > 1 ? "/" + t + "/" + a + "/?" + i.substr(1) : "/" + t + "/" + a + "/"
                            })).catch((function() {
                                return "/"
                            }));
                            var a, n, i, r
                        }(l, $n).then((function(e) {
                            return window.location.replace(e)
                        })) : ["/fi/", "/en/", "/sv/", "/ru/", "/slangi/"].includes(o) && window.location.replace("/")
                    }

                    function u() {
                        this.href = this.props.router.createHref(this.state.location), ti.setCustomUrl(this.href), ti.trackPageView()
                    }
                    var m = y()(P, {
                        piwik: r.a.object,
                        raven: r.a.object,
                        config: r.a.object,
                        headers: r.a.object
                    });
                    Object(p.match)({
                        routes: Xn.getComponent(),
                        history: i
                    }, (function(e, a, n) {
                        a ? window.location.replace(a.pathname + a.search) : h.a.prepareInitialRender(d.a.Store, n).then((function(e) {
                            var a = document.getElementById("app"),
                                n = a.dataset.initialBreakpoint;
                            ye.e && (a.innerHTML = "");
                            var i = s.a.createElement(oe.b, {
                                serverGuessedBreakpoint: n
                            }, s.a.createElement(m, {
                                translations: qn.a,
                                context: t.getComponentContext()
                            }, s.a.createElement(Ia.a, null, s.a.createElement(S.a, {
                                muiTheme: k()(A($n), {
                                    userAgent: navigator.userAgent
                                })
                            }, s.a.createElement(s.a.Fragment, null, s.a.createElement(w.a, function(e, t, a, n) {
                                var i = (n.URL.ASSET_URL || n.APP_PATH) + "/" + (n.iconPath || "icons"),
                                    r = n.URL.ASSET_URL || "https://" + t,
                                    o = {
                                        title: n.title,
                                        meta: [{
                                            "http-equiv": "x-ua-compatible",
                                            content: "ie=edge"
                                        }, {
                                            "http-equiv": "Content-Language",
                                            content: e
                                        }, {
                                            name: "charset",
                                            content: "utf-8"
                                        }, {
                                            name: "description",
                                            content: n.meta.description
                                        }, {
                                            name: "keywords",
                                            content: n.meta.keywords
                                        }, {
                                            name: "viewport",
                                            content: "width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1 user-scalable=no, minimal-ui"
                                        }, {
                                            name: "referrer",
                                            content: "origin"
                                        }, {
                                            property: "og:url",
                                            content: a
                                        }, {
                                            property: "og:type",
                                            content: "website"
                                        }, {
                                            property: "og:title",
                                            content: n.socialMedia.title
                                        }, {
                                            property: "og:site_name",
                                            content: n.socialMedia.title
                                        }, {
                                            property: "og:description",
                                            content: n.socialMedia.description
                                        }, {
                                            property: "og:image",
                                            content: "" + r + n.socialMedia.image.url
                                        }, {
                                            property: "og:image:width",
                                            content: n.socialMedia.image.width
                                        }, {
                                            property: "og:image:height",
                                            content: n.socialMedia.image.height
                                        }, {
                                            property: "og:locale",
                                            content: n.socialMedia.locale
                                        }, {
                                            property: "twitter:card",
                                            content: n.socialMedia.twitter.card
                                        }, {
                                            property: "twitter:site",
                                            content: n.socialMedia.twitter.site
                                        }, {
                                            property: "twitter:creator",
                                            content: n.socialMedia.twitter.site
                                        }, {
                                            property: "twitter:title",
                                            content: n.socialMedia.title
                                        }, {
                                            property: "twitter:description",
                                            content: n.socialMedia.description
                                        }, {
                                            property: "twitter:image",
                                            content: "" + r + n.socialMedia.image.url
                                        }],
                                        link: [{
                                            rel: "manifest",
                                            href: i + "manifest.json"
                                        }, {
                                            rel: "yandex-tableaou-widget",
                                            href: i + "yandex-browser-manifest.json"
                                        }]
                                    };
                                return n.metaData ? {
                                    meta: o.meta.concat(n.metaData.meta),
                                    link: o.link.concat(n.metaData.link),
                                    title: n.title
                                } : o
                            }(t.getStore("PreferencesStore").getLanguage(), window.location.host, window.location.href, $n), !1, s.a.createElement("script", {
                                defer: !0,
                                src: "https://cloud.umami.is/script.js",
                                "data-website-id": "fa69e780-7c43-4cfb-8f63-2156145692a7"
                            })), s.a.createElement(p.Router, Object.assign({}, e, {
                                onUpdate: u
                            })))))));
                            c.a.hydrate(i, a, (function() {
                                0
                            }))
                        }))
                    })), window.addEventListener("beforeinstallprompt", (function(e) {
                        ti.trackEvent("installprompt", "fired"), e.userChoice && e.userChoice.then((function(e) {
                            return ti.trackEvent("installprompt", "result", e.outcome)
                        }))
                    }))
                }))
            };
            if (void 0 !== window.Intl) ii();
            else {
                var ri = [Promise.all([a.e("vendors~intl"), a.e("intl")]).then(a.t.bind(null, "./node_modules/intl/index.js", 7))];
                $n.availableLanguages.forEach((function(e) {
                    ri.push(a("./node_modules/intl/locale-data/jsonp lazy-once recursive ^.\\/(fi|sv|en|fr|nb|de)$")("./" + e))
                })), Promise.all(ri).then(ii)
            }
        },
        "./app/component/404.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/react/index.js"),
                i = a.n(n),
                r = a("./node_modules/react-intl/lib/index.es.js"),
                o = a("./node_modules/react-router/es/index.js"),
                s = a("./app/component/Icon.js"),
                l = a("./app/component/ComponentUsageExample.js"),
                c = function() {
                    return i.a.createElement("div", {
                        className: "page-not-found"
                    }, i.a.createElement(s.a, {
                        img: "icon-icon_error_page_not_found"
                    }), i.a.createElement("p", null, i.a.createElement(r.a, {
                        id: "page-not-found",
                        defaultMessage: "The page cannot be found."
                    })), i.a.createElement("p", null, i.a.createElement(o.Link, {
                        to: "/"
                    }, i.a.createElement(r.a, {
                        id: "back-to-front-page",
                        defaultMessage: "Back to front page ›"
                    }))))
                };
            c.displayName = "Error404", c.description = function() {
                return i.a.createElement(l.a, {
                    description: "Error page"
                }, i.a.createElement(c, null))
            }, t.a = c
        },
        "./app/component/AppBarLarge.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/@babel/runtime/helpers/esm/extends.js"),
                i = a("./node_modules/prop-types/index.js"),
                r = a.n(i),
                o = a("./node_modules/react/index.js"),
                s = a.n(o),
                l = a("./node_modules/react-intl/lib/index.es.js"),
                c = a("./node_modules/react-router/es/index.js"),
                u = a("./app/component/ExternalLink.js"),
                d = a("./app/component/DisruptionInfo.js"),
                p = a("./app/component/NavbarLinks.js"),
                m = a("./app/component/Modal.js"),
                f = a("./app/component/ComponentUsageExample.js"),
                g = a("./app/util/browser.js");

            function h(e, t) {
                var a = t.router,
                    i = t.location;
                if (!(e && e.isBrowser || g.c)) return null;
                var r = function() {
                    return !!i.state && i.state.moreInfoModalOpen
                };
                if (!r()) return null;
                return s.a.createElement(m.a, {
                    open: !0,
                    title: i.state.moreInfoModalTitle,
                    toggleVisibility: function() {
                        r() ? a.goBack() : a.push(Object(n.a)({}, i, {
                            state: Object(n.a)({}, i.state, {
                                moreInfoModalOpen: !0
                            })
                        }))
                    }
                }, s.a.createElement("div", {
                    className: "insident-modal"
                }, i.state.moreInfoModalContent))
            }
            h.contextTypes = {
                router: c.routerShape.isRequired,
                location: c.locationShape.isRequired
            }, h.propTypes = {
                isBrowser: r.a.bool
            }, h.defaultProps = {
                isBrowser: !1
            }, h.description = function() {
                return s.a.createElement("div", null, s.a.createElement("p", null, "Modal that shows more info about a specific roadwork."), s.a.createElement(f.a, null, s.a.createElement(h, null)))
            };
            var b = h,
                y = a("./app/component/Icon.js"),
                v = a("./app/component/LangSelect.js"),
                k = a("./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js"),
                j = a("./app/component/ToggleButton.js"),
                S = function(e) {
                    function t(t) {
                        var a;
                        return (a = e.call(this, t) || this).state = {
                            defaultSelectedStreetMode: a.props.streetModeConfigs.find((function(e) {
                                return e.defaultValue
                            })).name
                        }, a
                    }
                    Object(k.a)(t, e);
                    var a = t.prototype;
                    return a.getButtons = function() {
                        var e = this,
                            t = this.props.streetModeConfigs,
                            a = this.state.defaultSelectedStreetMode,
                            n = this.props.selectedStreetMode || a;
                        return t.length ? t.map((function(t) {
                            var a = t.exclusive,
                                i = t.icon,
                                r = t.name,
                                o = r === n,
                                l = "street-mode-" + r.toLowerCase();
                            return s.a.createElement(j.a, {
                                buttonRef: function(t) {
                                    t && o && (e.selectedStreetModeButton = t)
                                },
                                className: "mode",
                                checkedClass: "selected",
                                icon: i,
                                key: r,
                                label: l,
                                onBtnClick: function() {
                                    return e.selectMode(r, a)
                                },
                                onKeyDown: function(t) {
                                    return Object(g.h)(t) && e.selectMode(r, a, !0)
                                },
                                showButtonTitle: !1,
                                state: o
                            })
                        })) : null
                    }, a.selectMode = function(e, t, a) {
                        void 0 === a && (a = !1), this.props.selectStreetMode(e.toUpperCase(), t), a && this.dialogRef && this.dialogRef.closeDialog(a)
                    }, a.render = function() {
                        return g.c ? s.a.createElement("div", {
                            id: "mode-select"
                        }, this.getButtons()) : null
                    }, t
                }(s.a.Component);
            S.displayName = "ModeSelect", S.description = function() {
                return s.a.createElement("div", null, s.a.createElement("p", null, "Mode selection component, mode selection comes from config."), s.a.createElement(f.a, {
                    description: ""
                }, s.a.createElement("div", {
                    style: {
                        width: "200px",
                        background: "rgb(51, 51, 51)"
                    }
                }, s.a.createElement(S, {
                    selectStreetMode: function() {},
                    streetModeConfigs: [{
                        defaultValue: !0,
                        icon: "public_transport",
                        name: "PUBLIC_TRANSPORT"
                    }, {
                        defaultValue: !1,
                        icon: "walk",
                        name: "WALK"
                    }, {
                        defaultValue: !1,
                        icon: "biking",
                        name: "BICYCLE"
                    }, {
                        defaultValue: !1,
                        icon: "car-withoutBox",
                        name: "CAR_PARK"
                    }]
                }))))
            }, S.propTypes = {
                selectStreetMode: r.a.func.isRequired,
                selectedStreetMode: r.a.string,
                streetModeConfigs: r.a.arrayOf(r.a.shape({
                    defaultValue: r.a.bool.isRequired,
                    icon: r.a.string.isRequired,
                    name: r.a.string.isRequired
                }))
            }, S.defaultProps = {
                selectedStreetMode: void 0,
                streetModeConfigs: []
            };
            var E = S,
                N = a("./node_modules/react-relay/classic.js"),
                R = a.n(N),
                w = a("./app/component/ExternalModesContent.js"),
                T = a("./app/component/BubbleDialog.js"),
                C = function(e, t) {
                    var a = e.isOpen,
                        n = t.intl;
                    return s.a.createElement(T.a, {
                        containerClassName: "bubble-dialog-component-container-alt",
                        header: "external-modes",
                        id: "externalModes",
                        icon: "more",
                        isOpen: a,
                        isFullscreenOnMobile: !0,
                        toggleButtonTitle: n.formatMessage({
                            id: "external-modes",
                            defaultMessage: "Other transportation"
                        })
                    }, s.a.createElement(R.a.RootContainer, {
                        Component: w.a,
                        route: {
                            name: "ExternalModesRoute",
                            queries: {
                                root: function(e) {
                                    return t = e.getFragment("root"), {
                                        children: [].concat.apply([], [R.a.QL.__frag(t)]),
                                        fieldName: "viewer",
                                        kind: "Query",
                                        metadata: {},
                                        name: "ExternalModes",
                                        type: "Query"
                                    };
                                    var t
                                }
                            },
                            params: {}
                        }
                    }))
                };
            C.propTypes = {
                isOpen: r.a.bool
            }, C.defaultProps = {
                isOpen: !1
            }, C.contextTypes = {
                intl: l.d.isRequired
            }, C.description = s.a.createElement(f.a, {
                isFullscreen: !0
            }, s.a.createElement("div", {
                style: {
                    bottom: 0,
                    left: 0,
                    position: "absolute"
                }
            }, s.a.createElement(C, {
                isOpen: !0
            })));
            var x = C,
                L = a("./app/component/SelectMapLayersDialog.js"),
                O = a("./app/component/MessageBar.js"),
                M = a("./app/util/modeUtils.js"),
                _ = a("./app/action/MapLayerActions.js"),
                P = a("./app/action/RealtimeDeparturesActions.js"),
                A = function(e, t) {
                    var a, i = e.titleClicked,
                        r = e.logo,
                        o = t.router,
                        c = t.location,
                        m = t.config,
                        f = t.intl,
                        h = t.executeAction;
                    a = m.textLogo ? s.a.createElement("section", {
                        className: "title"
                    }, s.a.createElement("span", {
                        className: "title"
                    }, m.title)) : g.c && r ? s.a.createElement("div", {
                        className: "navi-logo",
                        style: {
                            backgroundImage: "url(" + r + ")"
                        }
                    }) : s.a.createElement("div", {
                        className: "navi-logo",
                        style: {
                            backgroundImage: "none"
                        }
                    });
                    var k = f.formatMessage({
                        id: "frontpage",
                        defaultMessage: "Front page"
                    });
                    return s.a.createElement("div", null, s.a.createElement("header", {
                        className: "top-bar bp-large flex-horizontal"
                    }, s.a.createElement("nav", {
                        className: "top-bar flex-grow flex-horizontal"
                    }, s.a.createElement("button", {
                        className: "noborder",
                        onClick: i,
                        "aria-label": k,
                        title: k
                    }, s.a.createElement("h1", {
                        className: "no-margin"
                    }, a)), m.availableModes && s.a.createElement("div", {
                        className: "navi-modes padding-left-large"
                    }, s.a.createElement(E, {
                        selectedStreetMode: Object(M.h)(o.location, m),
                        selectStreetMode: function(e, t) {
                            Object(M.k)(e, m, o, t), h(_.g, e), h(P.a)
                        },
                        streetModeConfigs: Object(M.c)(m)
                    })), m.appBarExternalModes && s.a.createElement("div", {
                        className: "navi-buttons-more"
                    }, s.a.createElement(x, null)), s.a.createElement("div", {
                        className: "empty-space flex-grow"
                    }), m.mapTrackingButtons && m.mapTrackingButtons.altPosition && s.a.createElement("div", {
                        className: "navi-buttons right-border navi-margin"
                    }, s.a.createElement(L.a, null)), s.a.createElement("div", {
                        className: "navi-languages right-border navi-margin"
                    }, s.a.createElement(v.b, null)), m.appBarDisruptionInfo && s.a.createElement("div", {
                        className: "navi-icons navi-margin"
                    }, s.a.createElement("a", {
                        className: "noborder",
                        onClick: function() {
                            o.push(Object(n.a)({}, c, {
                                state: Object(n.a)({}, c.state, {
                                    disruptionInfoOpen: !0
                                })
                            }))
                        },
                        "aria-label": f.formatMessage({
                            id: "disruptions",
                            defaultMessage: "Disruptions"
                        })
                    }, s.a.createElement(y.a, {
                        img: "icon-icon_caution",
                        pointerEvents: !0
                    }))), m.appBarLinks && s.a.createElement("div", {
                        className: "navi-buttons navi-margin"
                    }, s.a.createElement("button", {
                        className: "navi-button",
                        onClick: function() {
                            o.push(Object(n.a)({}, c, {
                                state: Object(n.a)({}, c.state, {
                                    navbarLinksOpen: !0
                                })
                            }))
                        },
                        "aria-label": f.formatMessage({
                            id: "links",
                            defaultMessage: "Links"
                        })
                    }, s.a.createElement(l.a, {
                        id: "links",
                        defaultMessage: "Links"
                    }))), m.appBarLink && s.a.createElement("div", {
                        className: "padding-left-large navi-margin"
                    }, s.a.createElement(u.a, Object.assign({
                        className: "external-top-bar"
                    }, m.appBarLink))))), s.a.createElement(O.a, null), s.a.createElement(d.a, null), s.a.createElement(p.a, null), s.a.createElement(b, null))
                };
            A.propTypes = {
                titleClicked: r.a.func.isRequired,
                logo: r.a.string
            }, A.defaultProps = {
                logo: void 0
            }, A.displayName = "AppBarLarge", A.contextTypes = {
                router: c.routerShape.isRequired,
                location: c.locationShape.isRequired,
                config: r.a.object.isRequired,
                intl: l.d.isRequired,
                executeAction: r.a.func.isRequired
            }, A.description = function() {
                return s.a.createElement("div", null, s.a.createElement("p", null, "AppBar of application for large display"), s.a.createElement(f.a, {
                    description: ""
                }, s.a.createElement(A, {
                    titleClicked: function() {}
                })))
            };
            t.a = A
        },
        "./app/component/AppBarSmall.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/prop-types/index.js"),
                i = a.n(n),
                r = a("./node_modules/react/index.js"),
                o = a.n(r),
                s = a("./app/component/BackButton.js"),
                l = a("./app/component/DisruptionInfo.js"),
                c = a("./app/component/NavbarLinks.js"),
                u = a("./node_modules/@babel/runtime/helpers/esm/extends.js"),
                d = a("./node_modules/react-relay/classic.js"),
                p = a.n(d),
                m = a("./node_modules/react-router/es/index.js"),
                f = a("./node_modules/react-intl/lib/index.es.js"),
                g = a("./app/component/ExternalModesContent.js"),
                h = a("./app/component/ComponentUsageExample.js"),
                b = a("./app/util/browser.js"),
                y = a("./app/component/Modal.js"),
                v = function(e, t) {
                    var a = t.router,
                        n = t.location,
                        i = t.intl;
                    if (!(e && e.isBrowser || b.c)) return null;
                    var r = function() {
                        return !!n.state && n.state.externalModesOpen
                    };
                    if (!r()) return null;
                    return o.a.createElement(y.a, {
                        open: !0,
                        title: i.formatMessage({
                            id: "external-modes",
                            defaultMessage: "Other transportation"
                        }),
                        toggleVisibility: function() {
                            r() ? a.goBack() : a.push(Object(u.a)({}, n, {
                                state: Object(u.a)({}, n.state, {
                                    externalModesOpen: !0
                                })
                            }))
                        }
                    }, o.a.createElement(p.a.RootContainer, {
                        Component: g.a,
                        route: {
                            name: "ExternalModesRoute",
                            queries: {
                                root: function(e) {
                                    return t = e.getFragment("root"), {
                                        children: [].concat.apply([], [p.a.QL.__frag(t)]),
                                        fieldName: "viewer",
                                        kind: "Query",
                                        metadata: {},
                                        name: "ExternalModesAlt",
                                        type: "Query"
                                    };
                                    var t
                                }
                            },
                            params: {}
                        }
                    }))
                };
            v.propTypes = {
                isBrowser: i.a.bool
            }, v.defaultProps = {
                isBrowser: !1
            }, v.contextTypes = {
                router: m.routerShape.isRequired,
                location: m.locationShape.isRequired,
                intl: f.d.isRequired
            }, v.description = o.a.createElement(h.a, {
                isFullscreen: !0
            }, o.a.createElement("div", {
                style: {
                    bottom: 0,
                    left: 0,
                    position: "absolute"
                }
            }, o.a.createElement(v, null)));
            var k = v,
                j = a("./app/component/MainMenuContainer.js"),
                S = a("./app/component/MessageBar.js"),
                E = function(e, t) {
                    var a = e.showLogo,
                        n = e.logo,
                        i = e.title;
                    return t.config.textLogo || !a ? o.a.createElement("span", {
                        className: "title"
                    }, i) : b.c && n ? o.a.createElement("div", {
                        className: "logo",
                        style: {
                            backgroundImage: "url(" + n + ")"
                        }
                    }) : o.a.createElement("div", {
                        className: "logo",
                        style: {
                            backgroundImage: "none"
                        }
                    })
                };
            E.propTypes = {
                showLogo: i.a.bool,
                logo: i.a.string,
                title: i.a.node
            }, E.defaultProps = {
                showLogo: !1,
                logo: void 0,
                title: void 0
            }, E.contextTypes = {
                config: i.a.shape({
                    textLogo: i.a.bool.isRequired
                }).isRequired
            };
            var N = E,
                R = function(e) {
                    var t = e.disableBackButton,
                        a = e.showLogo,
                        n = e.title,
                        i = e.homeUrl,
                        r = e.logo;
                    return o.a.createElement(o.a.Fragment, null, o.a.createElement(l.a, null), o.a.createElement(c.a, null), o.a.createElement(k, null), o.a.createElement("nav", {
                        className: "top-bar"
                    }, !t && o.a.createElement(s.a, null), o.a.createElement("section", {
                        className: "title"
                    }, o.a.createElement("h1", null, o.a.createElement(N, {
                        showLogo: a,
                        logo: r,
                        title: n
                    }))), o.a.createElement(j.a, {
                        homeUrl: i
                    })), o.a.createElement(S.a, null))
                };
            R.displayName = "AppBarSmall", R.description = function() {
                return o.a.createElement("div", null, o.a.createElement("p", null, "AppBar of application for small display"), o.a.createElement(h.a, {
                    description: ""
                }, o.a.createElement(R, {
                    title: "Reittiopas.hsl.fi",
                    className: "fullscreen"
                })), o.a.createElement(h.a, {
                    description: "no back button"
                }, o.a.createElement(R, {
                    disableBackButton: !0,
                    title: "Reittiopas.hsl.fi",
                    className: "fullscreen"
                })))
            }, R.propTypes = {
                disableBackButton: i.a.bool,
                showLogo: i.a.bool,
                title: i.a.node,
                homeUrl: i.a.string,
                logo: i.a.string
            };
            t.a = R
        },
        "./app/component/BackButton.js": function(e, t, a) {
            "use strict";
            a.d(t, "a", (function() {
                return m
            }));
            var n = a("./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js"),
                i = a("./node_modules/react/index.js"),
                r = a.n(i),
                o = a("./node_modules/prop-types/index.js"),
                s = a.n(o),
                l = a("./node_modules/react-router/es/index.js"),
                c = a("./node_modules/react-intl/lib/index.es.js"),
                u = a("./app/component/Icon.js"),
                d = a("./app/util/browser.js"),
                p = a("./app/localStorageHistory.js"),
                m = function(e) {
                    function t() {
                        for (var t, a = arguments.length, n = new Array(a), i = 0; i < a; i++) n[i] = arguments[i];
                        return (t = e.call.apply(e, [this].concat(n)) || this).goBack = function() {
                            d.e && Object(p.b)() > 0 || d.c && window.history.length ? t.context.router.goBack() : t.context.router.push("/")
                        }, t
                    }
                    return Object(n.a)(t, e), t.prototype.render = function() {
                        return r.a.createElement("button", {
                            className: "icon-holder noborder cursor-pointer",
                            style: {
                                paddingTop: "7px"
                            },
                            onClick: this.goBack,
                            "aria-label": this.context.intl.formatMessage({
                                id: "back-button-title",
                                defaultMessage: "Go back to previous page"
                            })
                        }, r.a.createElement(u.a, {
                            img: this.props.icon,
                            color: this.props.color,
                            className: this.props.className + " cursor-pointer"
                        }))
                    }, t
                }(r.a.Component);
            m.contextTypes = {
                intl: c.d.isRequired,
                router: l.routerShape
            }, m.propTypes = {
                icon: s.a.string,
                className: s.a.string,
                color: s.a.string
            }, m.defaultProps = {
                icon: "icon-icon_arrow-left",
                className: "back",
                color: "white"
            }
        },
        "./app/component/BicycleRentalStationRowContainer.js": function(e, t, a) {
            "use strict";
            a.d(t, "a", (function() {
                return g
            }));
            var n = a("./node_modules/prop-types/index.js"),
                i = a.n(n),
                r = a("./node_modules/react/index.js"),
                o = a.n(r),
                s = a("./node_modules/react-relay/classic.js"),
                l = a.n(s),
                c = a("./node_modules/react-intl/lib/index.es.js"),
                u = a("./app/component/Distance.js"),
                d = a("./app/component/RouteNumber.js"),
                p = a("./app/component/Icon.js"),
                m = a("./app/component/ComponentUsageExample.js"),
                f = a("./app/util/citybikes.js"),
                g = function(e, t) {
                    var a = null;
                    a = e.station.state !== f.c ? o.a.createElement(p.a, {
                        img: "icon-icon_not-in-use"
                    }) : e.station.bikesAvailable > t.config.cityBike.fewAvailableCount ? o.a.createElement(p.a, {
                        img: "icon-icon_good-availability"
                    }) : e.station.bikesAvailable > 0 ? o.a.createElement(p.a, {
                        img: "icon-icon_poor-availability"
                    }) : o.a.createElement(p.a, {
                        img: "icon-icon_no-availability"
                    });
                    var n = e.station.state === f.c ? "citybike" : "citybike_off";
                    return o.a.createElement("tr", {
                        className: "next-departure-row-tr"
                    }, o.a.createElement("td", {
                        className: "td-distance"
                    }, o.a.createElement(u.a, {
                        distance: e.distance
                    })), o.a.createElement("td", {
                        className: "td-route-number"
                    }, o.a.createElement(d.a, {
                        mode: n,
                        text: e.station.stationId,
                        hasDisruption: !1
                    })), o.a.createElement("td", {
                        className: "td-bikestation",
                        colSpan: "1"
                    }, o.a.createElement("span", {
                        className: "city-bike-station-name overflow-fade"
                    }, e.station.name)), o.a.createElement("td", {
                        className: "td-available-bikes",
                        colSpan: "2"
                    }, o.a.createElement("span", {
                        className: "city-bike-station-availability"
                    }, o.a.createElement("span", {
                        className: "bikes-label"
                    }, t.intl.formatMessage({
                        id: "bike-availability-short",
                        defaultMessage: "Bikes"
                    }))), o.a.createElement("span", {
                        className: "bikes-available"
                    }, e.station.bikesAvailable), "/", o.a.createElement("span", {
                        className: "bikes-total"
                    }, e.station.bikesAvailable + e.station.spacesAvailable), a))
                };
            g.propTypes = {
                station: i.a.object.isRequired,
                distance: i.a.number.isRequired
            }, g.contextTypes = {
                intl: c.d.isRequired,
                config: i.a.object.isRequired
            }, g.displayName = "BicycleRentalStationRow";
            var h = {
                    stationId: "A27",
                    name: "Mannerheimintie",
                    bikesAvailable: 12,
                    spacesAvailable: 16,
                    state: f.c
                },
                b = {
                    stationId: "A27",
                    name: "Mannerheimintie",
                    bikesAvailable: 2,
                    spacesAvailable: 16,
                    state: f.c
                },
                y = {
                    stationId: "A27",
                    name: "Mannerheimintie",
                    bikesAvailable: 0,
                    spacesAvailable: 16,
                    state: f.c
                },
                v = {
                    stationId: "A27",
                    name: "Mannerheimintie",
                    bikesAvailable: 5,
                    spacesAvailable: 16,
                    state: f.b
                },
                k = {
                    stationId: "A27",
                    name: "Mannerheimintie",
                    bikesAvailable: 5,
                    spacesAvailable: 16,
                    state: f.a
                };
            g.description = function() {
                return o.a.createElement("div", null, o.a.createElement(m.a, {
                    description: "plenty of bikes available"
                }, o.a.createElement(g, {
                    station: h,
                    distance: 256,
                    currentTime: 1473676196
                })), o.a.createElement(m.a, {
                    description: "few bikes available"
                }, o.a.createElement(g, {
                    station: b,
                    distance: 256,
                    currentTime: 1473676196
                })), o.a.createElement(m.a, {
                    description: "no bikes available"
                }, o.a.createElement(g, {
                    station: y,
                    distance: 256,
                    currentTime: 1473676196
                })), o.a.createElement(m.a, {
                    description: "station off"
                }, o.a.createElement(g, {
                    station: v,
                    distance: 256,
                    currentTime: 1473676196
                })), o.a.createElement(m.a, {
                    description: "station closed"
                }, o.a.createElement(g, {
                    station: k,
                    distance: 256,
                    currentTime: 1473676196
                })))
            }, t.b = l.a.createContainer(g, {
                fragments: {
                    station: function() {
                        return {
                            children: [{
                                fieldName: "name",
                                kind: "Field",
                                metadata: {},
                                type: "String"
                            }, {
                                fieldName: "stationId",
                                kind: "Field",
                                metadata: {},
                                type: "String"
                            }, {
                                fieldName: "bikesAvailable",
                                kind: "Field",
                                metadata: {},
                                type: "Int"
                            }, {
                                fieldName: "spacesAvailable",
                                kind: "Field",
                                metadata: {},
                                type: "Int"
                            }, {
                                fieldName: "state",
                                kind: "Field",
                                metadata: {},
                                type: "String"
                            }, {
                                fieldName: "id",
                                kind: "Field",
                                metadata: {
                                    isGenerated: !0,
                                    isRequisite: !0
                                },
                                type: "ID"
                            }],
                            id: l.a.QL.__id(),
                            kind: "Fragment",
                            metadata: {},
                            name: "BicycleRentalStationRowContainer_StationRelayQL",
                            type: "BikeRentalStation"
                        }
                    }
                },
                initialVariables: {
                    currentTime: 0
                }
            })
        },
        "./app/component/BubbleDialog.js": function(e, t, a) {
            "use strict";
            a.d(t, "a", (function() {
                return j
            }));
            var n = a("./node_modules/@babel/runtime/helpers/esm/extends.js"),
                i = a("./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js"),
                r = a("./node_modules/classnames/index.js"),
                o = a.n(r),
                s = a("./node_modules/lodash-es/isFunction.js"),
                l = a("./node_modules/prop-types/index.js"),
                c = a.n(l),
                u = a("./node_modules/react/index.js"),
                d = a.n(u),
                p = a("./node_modules/react-click-outside/dist/index.js"),
                m = a.n(p),
                f = a("./node_modules/react-intl/lib/index.es.js"),
                g = a("./node_modules/react-router/es/index.js"),
                h = a("./app/component/Icon.js"),
                b = a("./app/component/LazilyLoad.js"),
                y = a("./app/util/browser.js"),
                v = a("./app/util/withBreakpoint.js"),
                k = function(e) {
                    function t(t, i) {
                        var r;
                        return (r = e.call(this, t) || this).getDialogState = function(e) {
                            var t = e.router.getCurrentLocation();
                            return t.state && !0 === t.state[r.props.id]
                        }, r.setDialogState = function(e, t) {
                            r.state.isOpen !== e && r.setState({
                                isOpen: e
                            }, (function() {
                                var a, i = r.context.router,
                                    o = i.getCurrentLocation();
                                i.replace(Object(n.a)({}, o, {
                                    state: Object(n.a)({}, o.state, (a = {}, a[r.props.id] = e, a))
                                })), t()
                            }))
                        }, r.modules = {
                            Drawer: function() {
                                return Object(b.b)(a.e(0).then(a.t.bind(null, "./node_modules/material-ui/Drawer/index.js", 7)))
                            }
                        }, r.openDialog = function(e) {
                            void 0 === e && (e = !1), r.setDialogState(!0, (function() {
                                Object(s.a)(r.props.onDialogOpen) ? r.props.onDialogOpen(e) : e && r.dialogContentRef.current && r.dialogContentRef.current.focus()
                            }))
                        }, r.closeDialog = function(e) {
                            void 0 === e && (e = !1), r.setDialogState(!1, (function() {
                                e && r.toggleDialogRef.current && r.toggleDialogRef.current.focus()
                            }))
                        }, r.render = function() {
                            if (!y.c && !Object(y.b)()) return null;
                            var e = r.props,
                                t = e.breakpoint,
                                a = e.isFullscreenOnMobile,
                                n = "large" !== t && a;
                            return r.renderContainer(n)
                        }, r.dialogContentRef = d.a.createRef(), r.toggleDialogRef = d.a.createRef(), r.state = {
                            isOpen: r.getDialogState(i)
                        }, r
                    }
                    Object(i.a)(t, e);
                    var r = t.prototype;
                    return r.handleClickOutside = function() {
                        this.closeDialog()
                    }, r.renderContent = function(e) {
                        var t = this,
                            a = this.props,
                            n = a.breakpoint,
                            i = a.children,
                            r = a.contentClassName,
                            s = a.header,
                            l = this.context.intl,
                            c = "large" === n;
                        return d.a.createElement("div", {
                            className: o()("bubble-dialog-container", {
                                "bubble-dialog-container--fullscreen": e
                            })
                        }, d.a.createElement("div", {
                            className: o()("bubble-dialog", {
                                "bubble-dialog--fullscreen": e,
                                "bubble-dialog--large": c
                            })
                        }, d.a.createElement("div", {
                            className: o()("bubble-dialog-header-container", {
                                "bubble-dialog-header-container--fullscreen": e
                            })
                        }, d.a.createElement("span", {
                            className: o()("bubble-dialog-header", {
                                "bubble-dialog-header--fullscreen": e
                            })
                        }, l.formatMessage({
                            id: s,
                            defaultMessage: "Bubble Dialog Header"
                        })), d.a.createElement("button", {
                            className: o()("bubble-dialog-close", {
                                "bubble-dialog-close--fullscreen": e
                            }),
                            onClick: function() {
                                return t.closeDialog()
                            },
                            onKeyDown: function(e) {
                                return Object(y.h)(e) && t.closeDialog(!0)
                            },
                            "aria-label": l.formatMessage({
                                id: "close",
                                defaultMessage: "Close"
                            })
                        }, d.a.createElement(h.a, {
                            img: "icon-icon_close"
                        }))), d.a.createElement("div", {
                            className: o()("bubble-dialog-content", r, {
                                "bubble-dialog-content--fullscreen": e,
                                "bubble-dialog-content--large": c
                            }),
                            ref: this.dialogContentRef,
                            tabIndex: "-1"
                        }, i), d.a.createElement("div", {
                            className: o()("bubble-dialog-buttons", {
                                collapsed: !e
                            })
                        }, d.a.createElement("button", {
                            className: "standalone-btn",
                            onClick: function() {
                                return t.closeDialog()
                            },
                            onKeyDown: function(e) {
                                return Object(y.h)(e) && t.closeDialog(!0)
                            }
                        }, l.formatMessage({
                            id: "dialog-return-to-map",
                            defaultMessage: "Return to map"
                        })))), d.a.createElement("div", {
                            className: o()("bubble-dialog-tip-container", {
                                collapsed: e
                            })
                        }, d.a.createElement("div", {
                            className: "bubble-dialog-tip"
                        })))
                    }, r.renderContainer = function(e) {
                        var t = this,
                            a = this.state.isOpen || this.props.isOpen,
                            n = this.context.intl;
                        return d.a.createElement("div", {
                            className: o()("bubble-dialog-component-container", this.props.containerClassName)
                        }, d.a.createElement("button", {
                            className: "bubble-dialog-toggle",
                            "aria-label": this.props.toggleButtonTitle,
                            title: this.props.toggleButtonTitle,
                            onClick: function() {
                                return a ? t.closeDialog() : t.openDialog()
                            },
                            onKeyDown: function(e) {
                                return Object(y.h)(e) && (a ? t.closeDialog(!0) : t.openDialog(!0))
                            },
                            ref: this.toggleDialogRef,
                            tabIndex: "0"
                        }, this.props.buttonText && n.formatMessage({
                            id: this.props.buttonText,
                            defaultMessage: "Bubble Dialog Button"
                        }), d.a.createElement(h.a, {
                            img: "icon-icon_" + this.props.icon,
                            viewBox: "0 0 25 25"
                        })), e ? d.a.createElement(b.a, {
                            modules: this.modules
                        }, (function(e) {
                            var n = e.Drawer;
                            return d.a.createElement(n, {
                                containerStyle: {
                                    maxHeight: "100vh"
                                },
                                disableSwipeToOpen: !0,
                                docked: !1,
                                open: a,
                                openSecondary: !0,
                                width: Object(y.a)(window)
                            }, t.renderContent(!0))
                        })) : a && this.renderContent(!1))
                    }, t
                }(d.a.Component);
            k.propTypes = {
                breakpoint: c.a.oneOf(["small", "medium", "large"]),
                children: c.a.node,
                containerClassName: c.a.string,
                contentClassName: c.a.string,
                header: c.a.string.isRequired,
                id: c.a.string.isRequired,
                icon: c.a.string.isRequired,
                buttonText: c.a.string,
                isFullscreenOnMobile: c.a.bool,
                isOpen: c.a.bool,
                onDialogOpen: c.a.func,
                toggleButtonTitle: c.a.string
            }, k.defaultProps = {
                breakpoint: "small",
                children: null,
                containerClassName: void 0,
                contentClassName: void 0,
                buttonText: void 0,
                isFullscreenOnMobile: !1,
                isOpen: !1,
                onDialogOpen: void 0,
                toggleButtonTitle: ""
            }, k.contextTypes = {
                intl: f.d.isRequired,
                router: g.routerShape.isRequired
            };
            var j = m()(Object(v.d)(k, {
                forwardRef: !0
            }))
        },
        "./app/component/Card.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/prop-types/index.js"),
                i = a.n(n),
                r = a("./node_modules/react/index.js"),
                o = a.n(r),
                s = a("./node_modules/classnames/index.js"),
                l = a.n(s),
                c = a("./app/component/ComponentUsageExample.js"),
                u = function(e) {
                    var t = e.className,
                        a = e.children;
                    return o.a.createElement("div", {
                        className: l()("card", t)
                    }, a)
                };
            u.displayName = "Card", u.description = function() {
                return o.a.createElement("div", null, o.a.createElement("p", null, "Renders a card container"), o.a.createElement(c.a, {
                    description: ""
                }, o.a.createElement(u, {
                    className: "padding-small"
                }, "content of a card")))
            }, u.displayName = "Card", u.propTypes = {
                className: i.a.string,
                children: i.a.node
            }, t.a = u
        },
        "./app/component/CardHeader.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/prop-types/index.js"),
                i = a.n(n),
                r = a("./node_modules/react/index.js"),
                o = a.n(r),
                s = a("./node_modules/classnames/index.js"),
                l = a.n(s),
                c = a("./app/component/ComponentUsageExample.js"),
                u = a("./app/component/Icon.js"),
                d = a("./app/component/SplitBars.js"),
                p = a("./app/component/Favourite.js"),
                m = function(e) {
                    var t = e.className,
                        a = e.children,
                        n = e.headingStyle,
                        i = e.name,
                        r = e.description,
                        s = e.code,
                        c = e.icon,
                        p = e.icons,
                        m = e.unlinked,
                        f = e.iconColor;
                    return o.a.createElement("div", {
                        className: l()("card-header", t)
                    }, a, c ? o.a.createElement("div", {
                        className: "left",
                        style: {
                            fontSize: 32,
                            paddingRight: 10,
                            height: 32
                        }
                    }, o.a.createElement(u.a, {
                        img: c,
                        color: f
                    })) : null, "stop-page header" === t && o.a.createElement("div", {
                        className: "stop-page-header_icon-container"
                    }, o.a.createElement(u.a, {
                        img: "icon-icon_bus-stop",
                        className: "stop-page-header_icon"
                    })), o.a.createElement("div", {
                        className: "card-header-wrapper"
                    }, o.a.createElement("span", {
                        className: n || "h5"
                    }, i, m ? null : o.a.createElement("span", {
                        className: "link-arrow"
                    }, " ›")), o.a.createElement("div", {
                        className: "card-sub-header"
                    }, null != s ? o.a.createElement("p", {
                        className: "card-code"
                    }, s) : null, null != r && "null" !== r ? o.a.createElement("p", {
                        className: "sub-header-h4"
                    }, r) : null)), p ? o.a.createElement(d.a, null, p) : null)
                },
                f = [o.a.createElement(p.a, {
                    key: "favourite",
                    favourite: !1,
                    addFavourite: function() {}
                })];
            m.displayName = "CardHeader", m.description = function() {
                return o.a.createElement("div", null, o.a.createElement("p", null, "Generic card header, which displays card name, description, favourite star and optional childs"), o.a.createElement(c.a, {
                    description: ""
                }, o.a.createElement(m, {
                    name: "Testipysäkki",
                    description: "Testipysäkki 2",
                    code: "7528",
                    icons: f,
                    headingStyle: "header-primary"
                })))
            }, m.propTypes = {
                className: i.a.string,
                headingStyle: i.a.string,
                name: i.a.string.isRequired,
                description: i.a.string.isRequired,
                code: i.a.string,
                icon: i.a.string,
                icons: i.a.arrayOf(i.a.node),
                children: i.a.node,
                unlinked: i.a.bool,
                iconColor: i.a.string
            }, t.a = m
        },
        "./app/component/Checkbox.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/classnames/index.js"),
                i = a.n(n),
                r = a("./node_modules/lodash-es/uniqueId.js"),
                o = a("./node_modules/prop-types/index.js"),
                s = a.n(o),
                l = a("./node_modules/react/index.js"),
                c = a.n(l),
                u = a("./node_modules/react-intl/lib/index.es.js"),
                d = a("./app/util/browser.js"),
                p = function(e, t) {
                    var a = e.checked,
                        n = e.disabled,
                        o = e.onChange,
                        s = e.labelId,
                        l = e.defaultMessage,
                        p = e.showLabel,
                        m = e.title,
                        f = t.intl,
                        g = Object(r.a)("input-");
                    return c.a.createElement("div", {
                        className: "option-checkbox-container",
                        title: m
                    }, c.a.createElement("div", {
                        "aria-checked": a,
                        className: "option-checkbox",
                        onKeyPress: function(e) {
                            return !n && Object(d.h)(e) && o({
                                target: {
                                    checked: !a
                                }
                            })
                        },
                        role: "checkbox",
                        tabIndex: n ? -1 : 0
                    }, c.a.createElement("label", {
                        className: i()({
                            checked: a,
                            disabled: n
                        }),
                        htmlFor: g
                    }, c.a.createElement("input", {
                        "aria-label": s ? f.formatMessage({
                            id: s,
                            defaultMessage: l
                        }) : void 0,
                        checked: a,
                        disabled: n,
                        id: g,
                        onChange: function(e) {
                            return !n && o(e)
                        },
                        type: "checkbox"
                    }))), p && s && c.a.createElement(u.a, {
                        id: s,
                        defaultMessage: l
                    }))
                };
            p.propTypes = {
                checked: s.a.bool,
                defaultMessage: s.a.string,
                disabled: s.a.bool,
                onChange: s.a.func.isRequired,
                labelId: s.a.string,
                showLabel: s.a.bool,
                title: s.a.string
            }, p.defaultProps = {
                checked: !1,
                defaultMessage: "",
                disabled: !1,
                labelId: void 0,
                showLabel: !0,
                title: void 0
            }, p.contextTypes = {
                intl: u.d.isRequired
            }, t.a = p
        },
        "./app/component/ComponentUsageExample.js": function(e, t, a) {
            "use strict";
            a.d(t, "a", (function() {
                return d
            }));
            var n = a("./node_modules/prop-types/index.js"),
                i = a.n(n),
                r = a("./node_modules/react/index.js"),
                o = a.n(r),
                s = a("./node_modules/lodash-es/toPairs.js"),
                l = a("./node_modules/lodash-es/toString.js");

            function c(e) {
                return Object(s.a)(e).map((function(e) {
                    var t = e[0],
                        a = e[1];
                    switch (typeof a) {
                        case "string":
                            return "children" !== t ? t + "='" + a + "'" : "";
                        case "object":
                            return null === a ? t + "={null}" : a.$$typeof ? t + "={<" + (a.type.displayName || a.type.name) + "\n            " + c(a.props) + "/>}" : t + "={" + c(a) + "}";
                        default:
                            return t + "={" + Object(l.a)(a) + "}"
                    }
                })).join(" ")
            }

            function u(e) {
                return o.a.createElement("div", null, o.a.createElement("span", {
                    className: "code"
                }, "<" + (e.type.displayName || e.type.name) + " " + c(e.props) + "/>"), o.a.createElement("div", {
                    className: "component border-dashed"
                }, e))
            }

            function d(e, t) {
                var a = e.description,
                    n = e.children,
                    i = e.isFullscreen;
                if (t.componentOnly) {
                    var r = i ? {
                        height: "100vh",
                        margin: "-75px -25px",
                        position: "relative",
                        width: "100vw"
                    } : {};
                    return o.a.createElement("div", {
                        className: "component-example component-example-large-vertical-padding"
                    }, o.a.createElement("div", {
                        className: "component",
                        style: r
                    }, n))
                }
                var s = "";
                return a && (s = o.a.createElement("p", null, a)), o.a.createElement("div", {
                    className: "component-example padding-vertical-normal"
                }, s, o.a.Children.map(n, (function(e) {
                    return u(e)
                })))
            }
            d.propTypes = {
                description: i.a.node,
                children: i.a.node,
                isFullscreen: i.a.bool
            }, d.defaultProps = {
                isFullscreen: !1
            }, d.contextTypes = {
                componentOnly: i.a.bool
            }
        },
        "./app/component/DTAutosuggestPanel.js": function(e, t, a) {
            "use strict";
            a.d(t, "a", (function() {
                return N
            }));
            var n = a("./node_modules/@babel/runtime/helpers/esm/extends.js"),
                i = a("./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js"),
                r = a("./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"),
                o = a("./node_modules/classnames/index.js"),
                s = a.n(o),
                l = a("./node_modules/prop-types/index.js"),
                c = a.n(l),
                u = a("./node_modules/react/index.js"),
                d = a.n(u),
                p = a("./node_modules/react-intl/lib/index.es.js"),
                m = a("./node_modules/react-router/es/index.js"),
                f = a("./app/component/DTEndpointAutosuggest.js"),
                g = a("./app/component/Icon.js"),
                h = a("./app/component/Select.js"),
                b = a("./app/util/browser.js"),
                y = a("./app/util/path.js"),
                v = a("./app/util/shapes.js"),
                k = a("./app/util/withBreakpoint.js"),
                j = ["children", "className", "enabled", "onClick", "onKeyPress", "title"],
                S = function(e) {
                    var t = e.children,
                        a = e.className,
                        n = e.enabled,
                        i = e.onClick,
                        o = e.onKeyPress,
                        l = e.title,
                        c = Object(r.a)(e, j);
                    return n && i && d.a.createElement("div", {
                        className: "itinerary-search-control"
                    }, d.a.createElement("button", Object.assign({}, c, {
                        className: s()(a, "cursor-pointer"),
                        onClick: i,
                        onKeyPress: o,
                        tabIndex: "0",
                        "aria-label": l,
                        title: l
                    }), t))
                },
                E = function(e) {
                    function t(t) {
                        var a;
                        return (a = e.call(this, t) || this).getSlackTimeOptions = function() {
                            for (var e = [], t = 0; t <= 9; t++) {
                                var n = 10 * t;
                                e.push({
                                    displayName: "" + t,
                                    displayNameObject: n + " " + a.context.intl.formatMessage({
                                        id: "minute-short"
                                    }),
                                    value: 60 * n
                                })
                            }
                            return e
                        }, a.setDraggableViaPointRef = function(e, t) {
                            a.draggableViaPoints[t] = e
                        }, a.value = function(e) {
                            return e && e.address || e && e.gps && e.ready && "Nykyinen sijainti" || ""
                        }, a.class = function(e) {
                            return e && !0 === e.gps ? "position" : "location"
                        }, a.isFocused = function(e) {
                            a.setState({
                                showDarkOverlay: e
                            })
                        }, a.updateViaPoints = function(e) {
                            0 !== e.length ? a.props.updateViaPoints(e.filter((function(e) {
                                return ! function(e) {
                                    if (void 0 === e) return !0;
                                    var t = Object.keys(e);
                                    return 0 === t.length || 1 === t.length && "locationSlack" === t[0]
                                }(e)
                            }))) : a.props.updateViaPoints([])
                        }, a.updateViaPointSlack = function(e, t, a) {
                            void 0 === a && (a = !1);
                            var n = e.indexOf(t);
                            return n > -1 && e.splice(n, 1), a ? e.map((function(e) {
                                return e > t ? e - 1 : e
                            })) : e
                        }, a.handleToggleViaPointSlackClick = function(e) {
                            var t = a.state.activeSlackInputs;
                            a.setState({
                                activeSlackInputs: t.includes(e) ? a.updateViaPointSlack(t, e) : t.concat([e])
                            })
                        }, a.handleViaPointSlackTimeSelected = function(e, t) {
                            var n = a.state.viaPoints;
                            n[t].locationSlack = Number.parseInt(e, 10), a.setState({
                                viaPoints: n
                            }, (function() {
                                return a.updateViaPoints(n)
                            }))
                        }, a.handleViaPointLocationSelected = function(e, t) {
                            var i = a.state.viaPoints;
                            i[t] = Object(n.a)({}, e), a.setState({
                                viaPoints: i
                            }, (function() {
                                return a.updateViaPoints(i)
                            }))
                        }, a.handleRemoveViaPointClick = function(e) {
                            var t = a.state,
                                n = t.activeSlackInputs,
                                i = t.viaPoints;
                            i.splice(e, 1), a.setState({
                                activeSlackInputs: a.updateViaPointSlack(n, e, !0),
                                viaPoints: i
                            }, (function() {
                                return a.updateViaPoints(i)
                            }))
                        }, a.handleAddViaPointClick = function() {
                            var e = a.state.viaPoints;
                            e.push({}), a.setState({
                                viaPoints: e
                            })
                        }, a.handleSwapOrderClick = function() {
                            var e = a.state.viaPoints;
                            e.reverse(), a.setState({
                                viaPoints: e
                            }, (function() {
                                return a.props.swapOrder()
                            }))
                        }, a.handleOnViaPointDragOver = function(e, t) {
                            e.preventDefault(), a.setState({
                                isDraggingOverIndex: t
                            })
                        }, a.handleOnViaPointDragEnd = function() {
                            a.setState({
                                isDraggingOverIndex: void 0
                            })
                        }, a.handleOnViaPointDrop = function(e, t) {
                            e.preventDefault();
                            var n = Number.parseInt(e.dataTransfer.getData("text"), 10);
                            if (!Number.isNaN(n) && n !== t && t - n != 1) {
                                var i = a.state.viaPoints,
                                    r = i.splice(n, 1)[0];
                                i.splice(t > n ? t - 1 : t, 0, r), a.setState({
                                    viaPoints: i,
                                    isDraggingOverIndex: void 0
                                }, (function() {
                                    return a.updateViaPoints(i)
                                }))
                            }
                        }, a.handleStartViaPointDragging = function(e, t) {
                            e.dataTransfer.setDragImage && a.draggableViaPoints[t] && e.dataTransfer.setDragImage(a.draggableViaPoints[t], 0, 0), b.f || (e.dataTransfer.dropEffect = "move"), e.dataTransfer.effectAllowed = "move", e.dataTransfer.setData("text", "" + t)
                        }, a.render = function() {
                            var e = a.props,
                                t = e.breakpoint,
                                i = e.isItinerary,
                                r = e.origin,
                                o = a.state,
                                l = o.activeSlackInputs,
                                c = o.isDraggingOverIndex,
                                u = o.viaPoints,
                                m = a.getSlackTimeOptions(),
                                v = function(e, t) {
                                    return void 0 === t && (t = 0), e && e.locationSlack || t
                                },
                                k = function(e) {
                                    return l.includes(e)
                                };
                            return d.a.createElement("div", {
                                className: s()(["autosuggest-panel", {
                                    small: "large" !== t,
                                    isItinerary: i
                                }])
                            }, d.a.createElement("div", {
                                className: s()(["dark-overlay", {
                                    hidden: !a.state.showDarkOverlay,
                                    isItinerary: i
                                }])
                            }), d.a.createElement("div", {
                                className: "origin-input-container"
                            }, d.a.createElement(f.a, {
                                id: "origin",
                                autoFocus: !b.f && ("large" === t && !r.ready),
                                refPoint: r,
                                className: a.class(r),
                                searchType: a.props.searchType,
                                placeholder: a.props.originPlaceHolder,
                                value: a.value(r),
                                isFocused: a.isFocused,
                                onLocationSelected: function(e) {
                                    var t = Object(n.a)({}, e, {
                                            ready: !0
                                        }),
                                        i = a.props.destination;
                                    "CurrentLocation" === e.type && (t = Object(n.a)({}, e, {
                                        gps: !0,
                                        ready: !!e.lat
                                    }), !0 === i.gps && (i = {
                                        set: !1
                                    })), Object(y.j)({
                                        base: a.context.location,
                                        origin: t,
                                        destination: i,
                                        context: a.props.isItinerary ? y.a : "",
                                        router: a.context.router,
                                        tab: a.props.tab,
                                        resetIndex: !0
                                    })
                                }
                            }), d.a.createElement(S, {
                                className: "switch",
                                enabled: i,
                                onClick: function() {
                                    return a.handleSwapOrderClick()
                                },
                                onKeyPress: function(e) {
                                    return Object(b.h)(e) && a.handleSwapOrderClick()
                                },
                                title: a.context.intl.formatMessage({
                                    id: "reverse-route",
                                    defaultMessage: "Reverse route direction"
                                })
                            }, d.a.createElement(g.a, {
                                img: "icon-icon_direction-b"
                            }))), d.a.createElement("div", {
                                className: "viapoints-container"
                            }, u.map((function(e, n) {
                                return d.a.createElement("div", {
                                    className: s()("viapoint-container", {
                                        "drop-target-before": n === c
                                    }),
                                    key: "viapoint-" + n,
                                    onDragOver: function(e) {
                                        return a.handleOnViaPointDragOver(e, n)
                                    },
                                    onDrop: function(e) {
                                        return a.handleOnViaPointDrop(e, n)
                                    },
                                    ref: function(e) {
                                        return a.setDraggableViaPointRef(e, n)
                                    }
                                }, d.a.createElement("div", {
                                    className: "viapoint-input-container viapoint-" + (n + 1)
                                }, d.a.createElement("div", {
                                    className: "viapoint-before",
                                    draggable: !0,
                                    onDragEnd: a.handleOnViaPointDragEnd,
                                    onDragStart: function(e) {
                                        return a.handleStartViaPointDragging(e, n)
                                    },
                                    style: {
                                        cursor: "move"
                                    }
                                }, d.a.createElement(g.a, {
                                    img: "icon-icon_ellipsis"
                                })), d.a.createElement(f.a, {
                                    id: "viapoint",
                                    autoFocus: !b.f && "large" === t,
                                    refPoint: a.props.origin,
                                    searchType: "endpoint",
                                    placeholder: "via-point",
                                    className: "viapoint",
                                    isFocused: a.isFocused,
                                    value: e && e.address || "",
                                    onLocationSelected: function(e) {
                                        return a.handleViaPointLocationSelected(e, n)
                                    }
                                }), d.a.createElement(S, {
                                    className: "addViaPointSlack",
                                    enabled: i,
                                    onClick: function() {
                                        return a.handleToggleViaPointSlackClick(n)
                                    },
                                    onKeyPress: function(e) {
                                        return Object(b.h)(e) && a.handleToggleViaPointSlackClick(n)
                                    },
                                    title: a.context.intl.formatMessage({
                                        id: "viapoint-slack-amount",
                                        defaultMessage: "Stop duration"
                                    })
                                }, d.a.createElement(g.a, {
                                    img: "icon-icon_time"
                                }), d.a.createElement(g.a, {
                                    img: "icon-icon_attention",
                                    className: s()("super-icon", {
                                        collapsed: k(n) || 0 === v(u[n])
                                    })
                                })), d.a.createElement(S, {
                                    className: "removeViaPoint",
                                    enabled: i,
                                    onClick: function() {
                                        return a.handleRemoveViaPointClick(n)
                                    },
                                    onKeyPress: function(e) {
                                        return Object(b.h)(e) && a.handleRemoveViaPointClick(n)
                                    },
                                    title: a.context.intl.formatMessage({
                                        id: "viapoint-remove",
                                        defaultMessage: "Stop duration"
                                    })
                                }, d.a.createElement(g.a, {
                                    img: "icon-icon_close"
                                }))), d.a.createElement("div", {
                                    className: s()("input-viapoint-slack-container", {
                                        collapsed: !k(n)
                                    })
                                }, d.a.createElement(p.a, {
                                    defaultMessage: "viapoint-slack-amount",
                                    id: "viapoint-slack-amount"
                                }), d.a.createElement("div", {
                                    className: "select-wrapper"
                                }, d.a.createElement(h.a, {
                                    name: "viapoint-slack-amount",
                                    selected: "" + v(u[n]),
                                    options: m,
                                    onSelectChange: function(e) {
                                        return a.handleViaPointSlackTimeSelected(e.target.value, n)
                                    }
                                }), d.a.createElement(g.a, {
                                    className: "fake-select-arrow",
                                    img: "icon-icon_arrow-dropdown"
                                }))))
                            }))), (a.props.destination && a.props.destination.set || r.ready || i) && d.a.createElement("div", {
                                className: "destination-input-container"
                            }, d.a.createElement(f.a, {
                                id: "destination",
                                autoFocus: !b.f && "large" === t,
                                refPoint: r,
                                searchType: a.props.searchType,
                                placeholder: a.props.destinationPlaceHolder,
                                className: a.class(a.props.destination),
                                isFocused: a.isFocused,
                                value: a.value(a.props.destination),
                                onLocationSelected: function(e) {
                                    var t = r,
                                        o = Object(n.a)({}, e, {
                                            ready: !0
                                        });
                                    "CurrentLocation" === e.type && (o = Object(n.a)({}, e, {
                                        gps: !0,
                                        ready: !!e.lat
                                    }), !0 === r.gps && (t = {
                                        set: !1
                                    })), Object(y.j)({
                                        base: a.context.location,
                                        origin: t,
                                        destination: o,
                                        context: i ? y.a : "",
                                        router: a.context.router,
                                        tab: a.props.tab,
                                        resetIndex: !0
                                    })
                                }
                            }), d.a.createElement(S, {
                                className: s()("addViaPoint", "more", {
                                    collapsed: u.length > 4
                                }),
                                enabled: i,
                                onClick: function() {
                                    return a.handleAddViaPointClick()
                                },
                                onKeyPress: function(e) {
                                    return Object(b.h)(e) && a.handleAddViaPointClick()
                                },
                                title: a.context.intl.formatMessage({
                                    id: "add-itinerary-via-point",
                                    defaultMessage: "Add via point for itinerary"
                                })
                            }, d.a.createElement(g.a, {
                                img: "icon-icon_plus"
                            }))))
                        }, a.draggableViaPoints = [], a.state = {
                            activeSlackInputs: [],
                            showDarkOverlay: !1,
                            viaPoints: a.props.initialViaPoints.map((function(e) {
                                return Object(n.a)({}, e)
                            }))
                        }, a
                    }
                    return Object(i.a)(t, e), t
                }(d.a.Component);
            E.contextTypes = {
                executeAction: c.a.func.isRequired,
                router: m.routerShape.isRequired,
                location: m.locationShape.isRequired,
                intl: p.d.isRequired
            }, E.propTypes = {
                origin: v.a.isRequired,
                destination: v.a.isRequired,
                isItinerary: c.a.bool,
                originPlaceHolder: c.a.string,
                destinationPlaceHolder: c.a.string,
                searchType: c.a.string,
                initialViaPoints: c.a.arrayOf(v.a),
                tab: c.a.string,
                updateViaPoints: c.a.func,
                breakpoint: c.a.string.isRequired,
                swapOrder: c.a.func
            }, E.defaultProps = {
                initialViaPoints: [],
                isItinerary: !1,
                originPlaceHolder: "give-origin",
                destinationPlaceHolder: "give-destination",
                searchType: "endpoint",
                swapOrder: void 0,
                updateViaPoints: function() {}
            };
            var N = Object(k.d)(E)
        },
        "./app/component/DTEndpointAutosuggest.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js"),
                i = a("./node_modules/react/index.js"),
                r = a.n(i),
                o = a("./node_modules/prop-types/index.js"),
                s = a.n(o),
                l = a("./node_modules/react-intl/lib/index.es.js"),
                c = a("./node_modules/fluxible-addons-react/connectToStores.js"),
                u = a.n(c),
                d = a("./node_modules/react-router/es/index.js"),
                p = a("./node_modules/@babel/runtime/helpers/esm/extends.js"),
                m = a("./node_modules/classnames/index.js"),
                f = a.n(m),
                g = a("./node_modules/react-autosuggest/dist/index.js"),
                h = a.n(g),
                b = a("./node_modules/lodash-es/isEqual.js"),
                y = a("./app/util/searchUtils.js"),
                v = a("./app/component/SuggestionItem.js"),
                k = a("./app/util/suggestionUtils.js"),
                j = a("./app/util/shapes.js"),
                S = a("./app/component/Icon.js"),
                E = function(e) {
                    function t(t) {
                        var a;
                        return (a = e.call(this, t) || this).componentDidMount = function() {
                            a.props.autoFocus && a.input && a.input.focus()
                        }, a.componentWillReceiveProps = function(e) {
                            e.value === a.state.value || a.state.editing || a.setState({
                                value: e.value
                            })
                        }, a.onChange = function(e, t) {
                            var n = t.newValue,
                                i = t.method,
                                r = {
                                    value: n
                                };
                            a.state.editing ? ("enter" !== i || a.state.valid) && a.setState(r) : (r.editing = !0, a.props.isFocused(!0), a.setState(r, (function() {
                                return a.fetchFunction({
                                    value: n
                                })
                            })))
                        }, a.onBlur = function() {
                            a.props.isFocused(!1), a.setState({
                                editing: !1,
                                value: a.props.value
                            })
                        }, a.onSelected = function(e, t) {
                            a.props.isFocused(!1), a.state.valid ? a.setState({
                                editing: !1,
                                value: t.suggestionValue
                            }, (function() {
                                a.input.blur(), a.props.selectedFunction(t.suggestion)
                            })) : a.setState({
                                pendingSelection: a.state.value
                            }, (function() {
                                return a.checkPendingSelection()
                            }))
                        }, a.onSuggestionsClearRequested = function() {
                            a.setState({
                                suggestions: []
                            })
                        }, a.getSuggestionValue = function(e) {
                            return Object(k.c)(e.properties)
                        }, a.checkPendingSelection = function() {
                            a.state.pendingSelection && a.state.valid && a.setState({
                                pendingSelection: null,
                                editing: !1
                            }, (function() {
                                a.state.suggestions.length && (a.input.blur(), a.props.selectedFunction(a.state.suggestions[0]))
                            }))
                        }, a.clearButton = function() {
                            var e = a.state.value ? "icon-icon_close" : "icon-icon_search";
                            return r.a.createElement("button", {
                                className: "noborder clear-input",
                                onClick: a.clearInput,
                                title: a.context.intl.formatMessage({
                                    id: a.state.value ? "clear" : "search",
                                    defaultMessage: a.state.value ? "Clear" : "Search"
                                }),
                                "aria-label": a.context.intl.formatMessage({
                                    id: a.state.value ? "clear" : "search",
                                    defaultMessage: a.state.value ? "Clear" : "Search"
                                })
                            }, r.a.createElement(S.a, {
                                img: e
                            }))
                        }, a.fetchFunction = function(e) {
                            var t = e.value;
                            return a.setState({
                                valid: !1
                            }, (function() {
                                a.props.executeSearch(a.context.getStore, a.props.refPoint, {
                                    layers: a.props.layers,
                                    input: t,
                                    type: a.props.searchType,
                                    config: a.context.config
                                }, (function(e) {
                                    if (null != e) {
                                        var n = (e.results || []).map((function(e) {
                                            if ("CurrentLocation" === e.type) {
                                                var t = Object(p.a)({}, e);
                                                return t.properties.labelId = a.context.intl.formatMessage({
                                                    id: e.properties.labelId,
                                                    defaultMessage: "Own Location"
                                                }), t
                                            }
                                            return e
                                        }));
                                        t !== a.state.value && t !== a.state.pendingSelection || a.setState({
                                            valid: !0,
                                            suggestions: n
                                        }, (function() {
                                            return a.checkPendingSelection()
                                        }))
                                    }
                                }))
                            }))
                        }, a.clearInput = function() {
                            a.setState({
                                editing: !0,
                                value: ""
                            }, (function() {
                                return a.fetchFunction({
                                    value: ""
                                })
                            })), a.props.isFocused(!0), a.input.focus()
                        }, a.inputClicked = function() {
                            if (!a.state.editing) {
                                a.props.isFocused(!0);
                                var e = {
                                    editing: !0,
                                    pendingSelection: null
                                };
                                a.state.suggestions.length ? a.setState(e) : a.setState(e, (function() {
                                    return a.fetchFunction({
                                        value: a.state.value
                                    })
                                }))
                            }
                        }, a.storeInputReference = function(e) {
                            null !== e && (a.input = e.input)
                        }, a.renderItem = function(e) {
                            return r.a.createElement(v.a, {
                                doNotShowLinkToStop: a.state.doNotShowLinkToStop,
                                ref: e.name,
                                item: e,
                                loading: !a.state.valid,
                                useTransportIconsconfig: a.context.config.search.suggestions.useTransportIcons
                            })
                        }, a.state = {
                            doNotShowLinkToStop: !Object(b.a)(t.layers, Object(y.b)()),
                            value: t.value,
                            suggestions: [],
                            editing: !1,
                            valid: !0
                        }, a
                    }
                    return Object(n.a)(t, e), t.prototype.render = function() {
                        var e = this,
                            t = this.state,
                            a = t.value,
                            n = t.suggestions,
                            i = n;
                        "viapoint" === this.props.id && (i = n.filter((function(e) {
                            return "stop" === e.properties.layer
                        })));
                        var o = this.context.intl.formatMessage({
                                id: this.props.placeholder,
                                defaultMessage: ""
                            }),
                            s = {
                                placeholder: o,
                                value: a,
                                onChange: this.onChange,
                                onBlur: this.onBlur,
                                className: "react-autosuggest__input " + this.props.className,
                                "aria-label": o
                            };
                        return r.a.createElement("div", {
                            className: f()(["autosuggest-input-container", this.props.id])
                        }, r.a.createElement("div", {
                            className: f()(["autosuggest-input-icon", this.props.id])
                        }, r.a.createElement(S.a, {
                            img: "icon-icon_mapMarker-point"
                        })), r.a.createElement(h.a, {
                            id: this.props.id,
                            suggestions: i,
                            onSuggestionsFetchRequested: this.fetchFunction,
                            onSuggestionsClearRequested: this.onSuggestionsClearRequested,
                            getSuggestionValue: this.getSuggestionValue,
                            renderSuggestion: this.renderItem,
                            inputProps: s,
                            focusInputOnSuggestionClick: !1,
                            shouldRenderSuggestions: function() {
                                return e.state.editing
                            },
                            renderInputComponent: function(t) {
                                return r.a.createElement("div", {
                                    id: e.props.id + "-container",
                                    style: {
                                        display: "flex"
                                    }
                                }, r.a.createElement("input", Object.assign({
                                    id: e.props.id,
                                    onClick: e.inputClicked
                                }, t)), e.clearButton())
                            },
                            onSuggestionSelected: this.onSelected,
                            highlightFirstSuggestion: !0,
                            ref: this.storeInputReference
                        }))
                    }, t
                }(r.a.Component);
            E.contextTypes = {
                config: s.a.object.isRequired,
                getStore: s.a.func.isRequired,
                intl: l.d.isRequired
            }, E.propTypes = {
                autoFocus: s.a.bool,
                className: s.a.string,
                executeSearch: s.a.func,
                id: s.a.string.isRequired,
                isFocused: s.a.func,
                layers: s.a.arrayOf(s.a.string).isRequired,
                placeholder: s.a.string.isRequired,
                refPoint: j.a.isRequired,
                searchType: s.a.oneOf(["all", "endpoint", "search"]).isRequired,
                selectedFunction: s.a.func.isRequired,
                value: s.a.string
            }, E.defaultProps = {
                autoFocus: !1,
                className: "",
                executeSearch: y.a,
                isFocused: function() {},
                value: ""
            };
            var N = E;

            function R(e, t) {
                e.dispatch("SaveSearch", t)
            }
            var w = function(e) {
                function t() {
                    for (var t, a = arguments.length, n = new Array(a), i = 0; i < a; i++) n[i] = arguments[i];
                    return (t = e.call.apply(e, [this].concat(n)) || this).onSelect = function(e) {
                        var a = "endpoint";
                        switch (e.type) {
                            case "Stop":
                                !0 === e.timetableClicked && (a = "search");
                                break;
                            case "Route":
                                a = "search"
                        } - 1 === e.type.indexOf("Favourite") && t.context.executeAction(R, {
                            item: e,
                            type: a
                        }), t.props.onSelect(e, a)
                    }, t.render = function() {
                        return r.a.createElement(N, {
                            autoFocus: t.props.autoFocus,
                            placeholder: t.props.placeholder,
                            isFocused: t.props.isFocused,
                            searchType: t.props.searchType,
                            value: t.props.value,
                            selectedFunction: function(e) {
                                return t.onSelect(e)
                            },
                            id: t.props.id,
                            className: t.props.className,
                            refPoint: t.props.refPoint,
                            layers: t.props.layers
                        })
                    }, t
                }
                return Object(n.a)(t, e), t
            }(r.a.Component);
            w.contextTypes = {
                executeAction: s.a.func.isRequired,
                getStore: s.a.func.isRequired,
                config: s.a.object.isRequired,
                router: d.routerShape.isRequired
            }, w.propTypes = {
                onSelect: s.a.func.isRequired,
                searchType: s.a.string.isRequired,
                autoFocus: s.a.bool,
                placeholder: s.a.string,
                value: s.a.string,
                className: s.a.string,
                id: s.a.string.isRequired,
                isFocused: s.a.func,
                refPoint: j.a.isRequired,
                layers: s.a.array.isRequired
            }, w.defaultProps = {
                autoFocus: !1,
                placeholder: "",
                className: ""
            };
            var T = w,
                C = a("./app/component/Loading.js"),
                x = a("./app/util/path.js"),
                L = a("./app/action/PositionActions.js"),
                O = a("./app/store/PositionStore.js"),
                M = function(e) {
                    function t() {
                        var t;
                        return (t = e.call(this) || this).componentWillReceiveProps = function(e) {
                            var a = e.locationState;
                            t.state.pendingCurrentLocation && (a.status === O.a.STATUS_FOUND_ADDRESS || a.locationingFailed) && t.setState({
                                pendingCurrentLocation: !1
                            }, (function() {
                                if (a.status === O.a.STATUS_FOUND_ADDRESS) {
                                    var n = {
                                        type: "CurrentLocation",
                                        lat: a.lat,
                                        lon: a.lon,
                                        address: a.address || t.context.intl.formatMessage({
                                            id: "own-position",
                                            defaultMessage: "Own Location"
                                        })
                                    };
                                    e.onLocationSelected(n)
                                }
                            }))
                        }, t.shouldComponentUpdate = function(e, a) {
                            if (t.state.pendingCurrentLocation !== a.pendingCurrentLocation) return !0;
                            var n;
                            if (Object.keys(e).forEach((function(a) {
                                    "locationState" !== a && t.props[a] !== e[a] && (n = !0)
                                })), n) return !0;
                            var i = t.props.locationState,
                                r = e.locationState,
                                o = i.status === O.a.STATUS_FOUND_ADDRESS || i.status === O.a.STATUS_FOUND_LOCATION,
                                s = r.status === O.a.STATUS_FOUND_ADDRESS || r.status === O.a.STATUS_FOUND_LOCATION;
                            return (!o || !s) && i.status !== r.status
                        }, t.onSuggestionSelected = function(e) {
                            if (t.props.isPreferredRouteSearch && t.props.onRouteSelected) t.props.onRouteSelected(e);
                            else if (!0 !== e.timetableClicked)
                                if (e.properties.link) t.context.router.push(e.properties.link);
                                else {
                                    var a = Object(k.g)(e);
                                    "currentPosition" !== e.properties.layer || e.properties.lat ? t.props.onLocationSelected(a) : t.setState({
                                        pendingCurrentLocation: !0
                                    }, (function() {
                                        return t.context.executeAction(L.c)
                                    }))
                                }
                            else {
                                var n = "/" + (Object(k.e)(e.properties) ? x.c : x.d) + "/" + Object(k.a)(e.properties);
                                t.context.router.push(n)
                            }
                        }, t.render = function() {
                            return t.props.showSpinner && t.state.pendingCurrentLocation ? r.a.createElement(C.a, null) : r.a.createElement(T, {
                                autoFocus: t.props.autoFocus,
                                isFocused: t.props.isFocused,
                                placeholder: t.props.placeholder,
                                searchType: t.props.searchType,
                                onSelect: t.onSuggestionSelected,
                                refPoint: t.props.refPoint,
                                value: t.props.value,
                                id: t.props.id,
                                layers: t.props.layers,
                                className: "" !== t.props.value ? t.props.className : ""
                            })
                        }, t.state = {}, t
                    }
                    return Object(n.a)(t, e), t
                }(r.a.Component);
            M.contextTypes = {
                executeAction: s.a.func.isRequired,
                router: d.routerShape.isRequired,
                intl: l.d
            }, M.propTypes = {
                searchType: s.a.string.isRequired,
                autoFocus: s.a.bool,
                onLocationSelected: s.a.func.isRequired,
                onRouteSelected: s.a.func,
                value: s.a.string.isRequired,
                placeholder: s.a.string.isRequired,
                id: s.a.string.isRequired,
                className: s.a.string,
                refPoint: j.a.isRequired,
                layers: s.a.array,
                isFocused: s.a.func,
                isPreferredRouteSearch: s.a.bool,
                locationState: s.a.object.isRequired,
                showSpinner: s.a.bool
            }, M.defaultProps = {
                autoFocus: !1,
                className: "",
                onRouteSelected: void 0,
                isPreferredRouteSearch: !1,
                layers: Object(y.b)(),
                showSpinner: !1
            };
            t.a = u()(M, ["PositionStore"], (function(e) {
                return {
                    locationState: e.getStore("PositionStore").getLocationState()
                }
            }))
        },
        "./app/component/DepartureRowContainer.js": function(e, t, a) {
            "use strict";
            a.d(t, "a", (function() {
                return y
            }));
            var n = a("./node_modules/prop-types/index.js"),
                i = a.n(n),
                r = a("./node_modules/react/index.js"),
                o = a.n(r),
                s = a("./node_modules/react-relay/classic.js"),
                l = a.n(s),
                c = a("./node_modules/react-router/es/index.js"),
                u = a("./node_modules/lodash-es/filter.js"),
                d = a("./app/component/RouteNumberContainer.js"),
                p = a("./app/component/Distance.js"),
                m = a("./app/component/RouteDestination.js"),
                f = a("./app/component/DepartureTime.js"),
                g = a("./app/component/ComponentUsageExample.js"),
                h = a("./app/util/legUtils.js"),
                b = a("./app/util/path.js"),
                y = function(e, t) {
                    var a, n, i = e.departure,
                        r = e.currentTime,
                        s = e.distance;
                    i.stoptimes && (a = i.stoptimes.map((function(e) {
                        n = e.headsign;
                        var t = "CANCELED" === e.realtimeState,
                            a = i.pattern.route.gtfsId + ":" + i.pattern.headsign + ":\n        " + e.realtimeDeparture;
                        return o.a.createElement("td", {
                            key: a + "-td",
                            className: "td-departure-times"
                        }, o.a.createElement(f.a, {
                            key: a,
                            departureTime: e.serviceDay + e.realtimeDeparture,
                            realtime: e.realtime,
                            currentTime: r,
                            canceled: t
                        }))
                    })));
                    var l, c, g = "/" + b.b + "/" + i.pattern.route.gtfsId + "/pysakit/" + i.pattern.code,
                        y = a.length < 2 ? [a[0], o.a.createElement("td", {
                            key: a[0].key + "-empty",
                            className: "td-departure-times"
                        })] : a;
                    return o.a.createElement("tr", {
                        className: "next-departure-row-tr",
                        onClick: function() {
                            return e = g, void t.router.push(e);
                            var e
                        },
                        style: {
                            cursor: "pointer"
                        }
                    }, o.a.createElement("td", {
                        className: "td-distance"
                    }, o.a.createElement(p.a, {
                        distance: s
                    })), o.a.createElement("td", {
                        className: "td-route-number"
                    }, o.a.createElement(d.a, {
                        route: i.pattern.route,
                        hasDisruption: (l = r, c = i.pattern.route.alerts, Object(u.a)(c, (function(e) {
                            return e.effectiveStartDate < l && l < e.effectiveEndDate
                        })).length > 0),
                        isCallAgency: Object(h.i)(i.stoptimes[0])
                    })), o.a.createElement("td", {
                        className: "td-destination"
                    }, o.a.createElement(m.a, {
                        mode: i.pattern.route.mode,
                        destination: n || i.pattern.headsign || i.pattern.route.longName
                    })), y)
                };
            y.displayName = "DepartureRow", y.propTypes = {
                departure: i.a.object.isRequired,
                distance: i.a.number.isRequired,
                currentTime: i.a.number.isRequired
            }, y.contextTypes = {
                router: c.routerShape
            };
            var v = {
                    pattern: {
                        code: "28",
                        headSign: "Tampere",
                        route: {
                            gtfsId: "123",
                            mode: "RAIL",
                            shortName: "IC28"
                        }
                    },
                    stoptimes: [{
                        realtimeDeparture: 6900,
                        realtime: !0,
                        serviceDay: 147367e4
                    }, {
                        realtimeDeparture: 8e3,
                        realtime: !1,
                        serviceDay: 147367e4
                    }]
                },
                k = {
                    pattern: {
                        code: "154",
                        headSign: "Kamppi",
                        route: {
                            gtfsId: "123",
                            mode: "BUS",
                            shortName: "154"
                        }
                    },
                    stoptimes: [{
                        realtimeDeparture: 7396,
                        realtime: !0,
                        serviceDay: 147367e4,
                        realtimeState: "CANCELED"
                    }, {
                        realtimeDeparture: 9e3,
                        realtime: !1,
                        serviceDay: 147367e4
                    }]
                };
            y.description = function() {
                return o.a.createElement("div", null, o.a.createElement(g.a, {
                    description: "example"
                }, o.a.createElement(y, {
                    departure: v,
                    distance: 123,
                    currentTime: 1473676196
                })), o.a.createElement(g.a, {
                    description: "with cancellation"
                }, o.a.createElement(y, {
                    departure: k,
                    distance: 123,
                    currentTime: 1473676196
                })))
            }, t.b = l.a.createContainer(y, {
                fragments: {
                    departure: function() {
                        return {
                            children: [{
                                children: [{
                                    children: [{
                                        fieldName: "gtfsId",
                                        kind: "Field",
                                        metadata: {},
                                        type: "String"
                                    }, {
                                        fieldName: "shortName",
                                        kind: "Field",
                                        metadata: {},
                                        type: "String"
                                    }, {
                                        fieldName: "longName",
                                        kind: "Field",
                                        metadata: {},
                                        type: "String"
                                    }, {
                                        fieldName: "mode",
                                        kind: "Field",
                                        metadata: {},
                                        type: "TransitMode"
                                    }, {
                                        fieldName: "color",
                                        kind: "Field",
                                        metadata: {},
                                        type: "String"
                                    }, {
                                        children: [{
                                            fieldName: "id",
                                            kind: "Field",
                                            metadata: {
                                                isRequisite: !0
                                            },
                                            type: "ID"
                                        }, {
                                            fieldName: "effectiveStartDate",
                                            kind: "Field",
                                            metadata: {},
                                            type: "Long"
                                        }, {
                                            fieldName: "effectiveEndDate",
                                            kind: "Field",
                                            metadata: {},
                                            type: "Long"
                                        }],
                                        fieldName: "alerts",
                                        kind: "Field",
                                        metadata: {
                                            canHaveSubselections: !0,
                                            inferredRootCallName: "node",
                                            inferredPrimaryKey: "id",
                                            isPlural: !0
                                        },
                                        type: "Alert"
                                    }, {
                                        children: [{
                                            fieldName: "name",
                                            kind: "Field",
                                            metadata: {},
                                            type: "String"
                                        }, {
                                            fieldName: "id",
                                            kind: "Field",
                                            metadata: {
                                                isGenerated: !0,
                                                isRequisite: !0
                                            },
                                            type: "ID"
                                        }],
                                        fieldName: "agency",
                                        kind: "Field",
                                        metadata: {
                                            canHaveSubselections: !0,
                                            inferredRootCallName: "node",
                                            inferredPrimaryKey: "id"
                                        },
                                        type: "Agency"
                                    }, {
                                        fieldName: "id",
                                        kind: "Field",
                                        metadata: {
                                            isGenerated: !0,
                                            isRequisite: !0
                                        },
                                        type: "ID"
                                    }],
                                    fieldName: "route",
                                    kind: "Field",
                                    metadata: {
                                        canHaveSubselections: !0,
                                        inferredRootCallName: "node",
                                        inferredPrimaryKey: "id"
                                    },
                                    type: "Route"
                                }, {
                                    fieldName: "code",
                                    kind: "Field",
                                    metadata: {},
                                    type: "String"
                                }, {
                                    fieldName: "headsign",
                                    kind: "Field",
                                    metadata: {},
                                    type: "String"
                                }, {
                                    fieldName: "id",
                                    kind: "Field",
                                    metadata: {
                                        isGenerated: !0,
                                        isRequisite: !0
                                    },
                                    type: "ID"
                                }],
                                fieldName: "pattern",
                                kind: "Field",
                                metadata: {
                                    canHaveSubselections: !0,
                                    inferredRootCallName: "node",
                                    inferredPrimaryKey: "id"
                                },
                                type: "Pattern"
                            }, {
                                calls: [{
                                    kind: "Call",
                                    metadata: {
                                        type: "Long"
                                    },
                                    name: "startTime",
                                    value: {
                                        kind: "CallVariable",
                                        callVariableName: "currentTime"
                                    }
                                }, {
                                    kind: "Call",
                                    metadata: {
                                        type: "Int"
                                    },
                                    name: "timeRange",
                                    value: {
                                        kind: "CallVariable",
                                        callVariableName: "timeRange"
                                    }
                                }, {
                                    kind: "Call",
                                    metadata: {
                                        type: "Int"
                                    },
                                    name: "numberOfDepartures",
                                    value: {
                                        kind: "CallValue",
                                        callValue: 2
                                    }
                                }],
                                children: [{
                                    fieldName: "realtimeState",
                                    kind: "Field",
                                    metadata: {},
                                    type: "RealtimeState"
                                }, {
                                    fieldName: "realtimeDeparture",
                                    kind: "Field",
                                    metadata: {},
                                    type: "Int"
                                }, {
                                    fieldName: "scheduledDeparture",
                                    kind: "Field",
                                    metadata: {},
                                    type: "Int"
                                }, {
                                    fieldName: "realtimeArrival",
                                    kind: "Field",
                                    metadata: {},
                                    type: "Int"
                                }, {
                                    fieldName: "scheduledArrival",
                                    kind: "Field",
                                    metadata: {},
                                    type: "Int"
                                }, {
                                    fieldName: "pickupType",
                                    kind: "Field",
                                    metadata: {},
                                    type: "PickupDropoffType"
                                }, {
                                    fieldName: "realtime",
                                    kind: "Field",
                                    metadata: {},
                                    type: "Boolean"
                                }, {
                                    fieldName: "serviceDay",
                                    kind: "Field",
                                    metadata: {},
                                    type: "Long"
                                }, {
                                    fieldName: "headsign",
                                    kind: "Field",
                                    metadata: {},
                                    type: "String"
                                }, {
                                    children: [{
                                        fieldName: "code",
                                        kind: "Field",
                                        metadata: {},
                                        type: "String"
                                    }, {
                                        fieldName: "platformCode",
                                        kind: "Field",
                                        metadata: {},
                                        type: "String"
                                    }, {
                                        fieldName: "id",
                                        kind: "Field",
                                        metadata: {
                                            isGenerated: !0,
                                            isRequisite: !0
                                        },
                                        type: "ID"
                                    }],
                                    fieldName: "stop",
                                    kind: "Field",
                                    metadata: {
                                        canHaveSubselections: !0,
                                        inferredRootCallName: "node",
                                        inferredPrimaryKey: "id"
                                    },
                                    type: "Stop"
                                }, {
                                    children: [{
                                        fieldName: "gtfsId",
                                        kind: "Field",
                                        metadata: {},
                                        type: "String"
                                    }, {
                                        fieldName: "id",
                                        kind: "Field",
                                        metadata: {
                                            isGenerated: !0,
                                            isRequisite: !0
                                        },
                                        type: "ID"
                                    }],
                                    fieldName: "trip",
                                    kind: "Field",
                                    metadata: {
                                        canHaveSubselections: !0,
                                        inferredRootCallName: "node",
                                        inferredPrimaryKey: "id"
                                    },
                                    type: "Trip"
                                }],
                                fieldName: "stoptimes",
                                kind: "Field",
                                metadata: {
                                    canHaveSubselections: !0,
                                    isPlural: !0
                                },
                                type: "Stoptime"
                            }, {
                                fieldName: "id",
                                kind: "Field",
                                metadata: {
                                    isGenerated: !0,
                                    isRequisite: !0
                                },
                                type: "ID"
                            }],
                            id: l.a.QL.__id(),
                            kind: "Fragment",
                            metadata: {},
                            name: "DepartureRowContainer_DepartureRelayQL",
                            type: "DepartureRow"
                        }
                    }
                },
                initialVariables: {
                    currentTime: 0,
                    timeRange: 0
                }
            })
        },
        "./app/component/DepartureTime.js": function(e, t, a) {
            "use strict";
            a.d(t, "b", (function() {
                return h
            }));
            var n = a("./node_modules/prop-types/index.js"),
                i = a.n(n),
                r = a("./node_modules/react/index.js"),
                o = a.n(r),
                s = a("./node_modules/classnames/index.js"),
                l = a.n(s),
                c = a("./node_modules/moment/moment.js"),
                u = a.n(c),
                d = a("./node_modules/react-intl/lib/index.es.js"),
                p = a("./app/component/Icon.js"),
                m = a("./app/component/ComponentUsageExample.js"),
                f = a("./app/component/ExampleData.js");

            function g(e, t) {
                var a, n, i = Math.floor((e.departureTime - e.currentTime) / 60);
                if (i < 0 || i > t.config.minutesToDepartureLimit) {
                    var r = u()(1e3 * e.departureTime);
                    e.useUTC && r.utc(), a = r.format("HH:mm")
                } else a = 0 === i ? o.a.createElement(d.a, {
                    id: "arriving-soon",
                    defaultMessage: "Now"
                }) : o.a.createElement(d.a, {
                    id: "departure-time-in-minutes",
                    defaultMessage: "{minutes} min",
                    values: {
                        minutes: i
                    }
                });
                return e.realtime && !e.canceled && (n = o.a.createElement("span", {
                    "aria-label": t.intl.formatMessage({
                        id: "realtime",
                        defaultMessage: "Real time"
                    })
                }, o.a.createElement(p.a, {
                    img: "icon-icon_realtime",
                    className: "realtime-icon realtime"
                }))), o.a.createElement("span", {
                    style: e.style,
                    className: l()("time", {
                        realtime: e.realtime,
                        canceled: e.canceled
                    }, e.className)
                }, n, a)
            }
            g.contextTypes = {
                intl: d.d.isRequired
            }, g.description = function() {
                return o.a.createElement("div", null, o.a.createElement("p", null, "Display time in correct format. Displays minutes for 20 minutes, otherwise in HH:mm format. Also, it takes into account if the time is realtime. The prop useUTC forces rendering in UTC, not local TZ, for testing."), o.a.createElement(m.a, {
                    description: "real time"
                }, o.a.createElement(g, {
                    departureTime: f.g.stoptime,
                    realtime: f.g.realtime,
                    currentTime: f.a,
                    useUTC: !0
                })), o.a.createElement(m.a, {
                    description: "not real time"
                }, o.a.createElement(g, {
                    departureTime: f.b.stoptime,
                    realtime: f.b.realtime,
                    currentTime: f.a,
                    useUTC: !0
                })), o.a.createElement(m.a, {
                    description: "canceled"
                }, o.a.createElement(g, {
                    departureTime: f.b.stoptime,
                    realtime: f.b.realtime,
                    currentTime: f.a,
                    canceled: !0,
                    useUTC: !0
                })))
            }, g.displayName = "DepartureTime", g.propTypes = {
                className: i.a.string,
                canceled: i.a.bool,
                currentTime: i.a.number.isRequired,
                departureTime: i.a.number.isRequired,
                realtime: i.a.bool,
                style: i.a.object,
                useUTC: i.a.bool
            }, g.contextTypes = {
                config: i.a.object.isRequired,
                intl: d.d.isRequired
            }, t.a = g;
            var h = function(e, t) {
                return o.a.createElement(g, Object.assign({
                    currentTime: t
                }, function(e, t) {
                    return {
                        stop: e.stop,
                        canceled: "CANCELED" === e.realtimeState,
                        departureTime: e.serviceDay + ("CANCELED" === e.realtimeState || -1 === e.realtimeDeparture ? e.scheduledDeparture : e.realtimeDeparture),
                        realtime: -1 !== e.realtimeDeparture && e.realtime,
                        pattern: t && t.pattern,
                        trip: e.trip
                    }
                }(e)))
            }
        },
        "./app/component/DesktopView.js": function(e, t, a) {
            "use strict";
            a.d(t, "a", (function() {
                return m
            }));
            var n = a("./node_modules/classnames/index.js"),
                i = a.n(n),
                r = a("./node_modules/prop-types/index.js"),
                o = a.n(r),
                s = a("./node_modules/react/index.js"),
                l = a.n(s),
                c = a("./node_modules/react-router/es/index.js"),
                u = a("./node_modules/react-intl/lib/index.es.js"),
                d = a("./app/component/Icon.js"),
                p = a("./app/component/ErrorBoundary.js");

            function m(e, t) {
                var a = e.title,
                    n = e.header,
                    r = e.map,
                    o = e.content,
                    s = e.homeUrl,
                    u = e.scrollable,
                    m = e.altView,
                    f = t.intl.formatMessage;
                return l.a.createElement("div", {
                    className: i()("desktop", {
                        "alt-view": m
                    })
                }, l.a.createElement("div", {
                    className: "main-content"
                }, l.a.createElement("div", {
                    className: "desktop-title"
                }, l.a.createElement("h3", null, l.a.createElement(c.Link, {
                    title: f({
                        id: "back-to-front-page",
                        defaultMessage: "Back to the front page"
                    }),
                    to: s
                }, l.a.createElement(d.a, {
                    img: "icon-icon_home",
                    className: "home-icon"
                })), l.a.createElement(d.a, {
                    img: "icon-icon_arrow-collapse--right",
                    className: "arrow-icon"
                }), a)), l.a.createElement("div", {
                    className: i()("scrollable-content-wrapper", {
                        "momentum-scroll": u
                    })
                }, n, l.a.createElement(p.a, null, o))), l.a.createElement("div", {
                    className: "map-content"
                }, l.a.createElement(p.a, null, r)))
            }
            m.propTypes = {
                title: o.a.node,
                header: o.a.node,
                map: o.a.node,
                content: o.a.node,
                homeUrl: o.a.string,
                scrollable: o.a.bool,
                altView: o.a.bool
            }, m.defaultProps = {
                scrollable: !1,
                altView: !1
            }, m.contextTypes = {
                intl: u.d.isRequired
            }
        },
        "./app/component/DisruptionInfo.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/@babel/runtime/helpers/esm/extends.js"),
                i = a("./node_modules/prop-types/index.js"),
                r = a.n(i),
                o = a("./node_modules/react/index.js"),
                s = a.n(o),
                l = a("./node_modules/react-relay/classic.js"),
                c = a.n(l),
                u = a("./node_modules/react-intl/lib/index.es.js"),
                d = a("./node_modules/react-router/es/index.js"),
                p = a("./app/component/Modal.js"),
                m = a("./app/component/Loading.js"),
                f = a("./node_modules/moment/moment.js"),
                g = a.n(f),
                h = a("./node_modules/lodash-es/groupBy.js"),
                b = a("./node_modules/lodash-es/toPairs.js"),
                y = a("./node_modules/lodash-es/uniq.js"),
                v = a("./node_modules/classnames/index.js"),
                k = a.n(v),
                j = a("./app/util/route-compare.js"),
                S = a("./app/component/RouteNumber.js");

            function E(e) {
                var t = Object(b.a)(Object(h.a)(e.routes, (function(e) {
                    return e.mode.toLowerCase()
                }))).map((function(e) {
                    var t = e[0],
                        a = e[1];
                    return s.a.createElement("div", {
                        key: t,
                        className: t
                    }, s.a.createElement(S.a, {
                        mode: t,
                        text: " " + Object(y.a)(a.sort(j.a).filter((function(e) {
                            return e.shortName
                        })).map((function(e) {
                            return e.shortName
                        }))).join(", ")
                    }))
                }));
                return s.a.createElement("div", {
                    className: k()("route-list", e.className)
                }, t)
            }
            E.propTypes = {
                className: r.a.string,
                routes: r.a.arrayOf(r.a.shape({
                    mode: r.a.string.isRequired,
                    shortName: r.a.string
                })).isRequired
            };
            var N = E,
                R = a("./app/util/path.js");

            function w(e) {
                var t = e.routes,
                    a = e.startTime,
                    n = e.endTime,
                    i = e.description,
                    r = e.cause,
                    o = e.stops;
                return s.a.createElement("div", {
                    className: "row"
                }, s.a.createElement("section", {
                    className: "grid-content"
                }, s.a.createElement("div", {
                    className: "disruption-header disruption"
                }, t.length > 0 && s.a.createElement(N, {
                    className: "left",
                    routes: t.filter((function(e) {
                        return e
                    }))
                }), o && o.map((function(e) {
                    return s.a.createElement(d.Link, {
                        key: e.gtfsId,
                        to: "/" + R.c + "/" + encodeURIComponent(e.gtfsId)
                    }, s.a.createElement("span", {
                        className: "stop-list left bold"
                    }, e.name))
                })), s.a.createElement("span", {
                    className: "time bold"
                }, a.format("DD.MM.YYYY HH:mm") + " - " + n.format("DD.MM.YYYY HH:mm"))), s.a.createElement("div", {
                    className: "disruption-content"
                }, s.a.createElement("p", null, i)), r && s.a.createElement("div", {
                    className: "disruption-details hide"
                }, s.a.createElement("span", null, s.a.createElement("b", {
                    className: "uppercase"
                }, s.a.createElement(u.a, {
                    id: "cause",
                    defaultMessage: "cause"
                }), ":"), r))))
            }
            w.propTypes = {
                startTime: r.a.instanceOf(g.a).isRequired,
                endTime: r.a.instanceOf(g.a).isRequired,
                routes: r.a.arrayOf(r.a.object),
                description: r.a.node,
                cause: r.a.node,
                stops: r.a.arrayOf(r.a.object)
            }, w.defaultProps = {
                routes: [],
                description: null,
                cause: null,
                stops: []
            };
            var T = w;

            function C(e) {
                var t = e.root;
                if (!t || !t.alerts || 0 === t.alerts.length) return s.a.createElement(u.a, {
                    id: "disruption-info-no-alerts",
                    defaultMessage: "No known disruptions or diversions."
                });
                var a = t.alerts.map((function(e) {
                    var t = e.id,
                        a = g()(1e3 * e.effectiveStartDate),
                        n = g()(1e3 * e.effectiveEndDate),
                        i = e.entities ? e.entities.filter((function(e) {
                            return e.shortName
                        })) : void 0,
                        r = e.entities ? e.entities.filter((function(e) {
                            return e.gtfsId
                        })) : void 0,
                        o = e.alertDescriptionText;
                    return s.a.createElement(T, {
                        key: t,
                        description: o,
                        startTime: a,
                        endTime: n,
                        routes: i,
                        stops: r
                    })
                }));
                return s.a.createElement("div", {
                    className: "disruption-list"
                }, a)
            }
            C.contextTypes = {}, C.propTypes = {
                root: r.a.shape({
                    alerts: r.a.array
                }).isRequired
            };
            var x = c.a.createContainer(C, {
                    fragments: {
                        root: function() {
                            return {
                                children: [{
                                    calls: [{
                                        kind: "Call",
                                        metadata: {},
                                        name: "feeds",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "feedIds"
                                        }
                                    }],
                                    children: [{
                                        fieldName: "id",
                                        kind: "Field",
                                        metadata: {
                                            isRequisite: !0
                                        },
                                        type: "ID"
                                    }, {
                                        fieldName: "feed",
                                        kind: "Field",
                                        metadata: {},
                                        type: "String"
                                    }, {
                                        calls: [{
                                            kind: "Call",
                                            metadata: {},
                                            name: "language",
                                            value: {
                                                kind: "CallVariable",
                                                callVariableName: "language"
                                            }
                                        }],
                                        fieldName: "alertHeaderText",
                                        kind: "Field",
                                        metadata: {},
                                        type: "String"
                                    }, {
                                        calls: [{
                                            kind: "Call",
                                            metadata: {},
                                            name: "language",
                                            value: {
                                                kind: "CallVariable",
                                                callVariableName: "language"
                                            }
                                        }],
                                        fieldName: "alertDescriptionText",
                                        kind: "Field",
                                        metadata: {},
                                        type: "String"
                                    }, {
                                        fieldName: "effectiveStartDate",
                                        kind: "Field",
                                        metadata: {},
                                        type: "Long"
                                    }, {
                                        fieldName: "effectiveEndDate",
                                        kind: "Field",
                                        metadata: {},
                                        type: "Long"
                                    }, {
                                        children: [{
                                            fieldName: "__typename",
                                            kind: "Field",
                                            metadata: {
                                                isGenerated: !0,
                                                isRequisite: !0
                                            },
                                            type: "String"
                                        }, {
                                            children: [{
                                                fieldName: "shortName",
                                                kind: "Field",
                                                metadata: {},
                                                type: "String"
                                            }, {
                                                fieldName: "mode",
                                                kind: "Field",
                                                metadata: {},
                                                type: "TransitMode"
                                            }, {
                                                fieldName: "id",
                                                kind: "Field",
                                                metadata: {
                                                    isGenerated: !0,
                                                    isRequisite: !0
                                                },
                                                type: "ID"
                                            }],
                                            id: c.a.QL.__id(),
                                            kind: "Fragment",
                                            metadata: {},
                                            name: "Route",
                                            type: "Route"
                                        }, {
                                            children: [{
                                                fieldName: "id",
                                                kind: "Field",
                                                metadata: {
                                                    isRequisite: !0
                                                },
                                                type: "ID"
                                            }, {
                                                fieldName: "name",
                                                kind: "Field",
                                                metadata: {},
                                                type: "String"
                                            }, {
                                                fieldName: "gtfsId",
                                                kind: "Field",
                                                metadata: {},
                                                type: "String"
                                            }],
                                            id: c.a.QL.__id(),
                                            kind: "Fragment",
                                            metadata: {},
                                            name: "Stop",
                                            type: "Stop"
                                        }, {
                                            children: [{
                                                fieldName: "id",
                                                kind: "Field",
                                                metadata: {
                                                    isGenerated: !0,
                                                    isRequisite: !0
                                                },
                                                type: "ID"
                                            }, {
                                                fieldName: "__typename",
                                                kind: "Field",
                                                metadata: {
                                                    isGenerated: !0,
                                                    isRequisite: !0
                                                },
                                                type: "String"
                                            }],
                                            id: c.a.QL.__id(),
                                            kind: "Fragment",
                                            metadata: {
                                                isAbstract: !0
                                            },
                                            name: "IdFragment",
                                            type: "Node"
                                        }],
                                        fieldName: "entities",
                                        kind: "Field",
                                        metadata: {
                                            canHaveSubselections: !0,
                                            isAbstract: !0,
                                            isPlural: !0
                                        },
                                        type: "AlertEntity"
                                    }],
                                    fieldName: "alerts",
                                    kind: "Field",
                                    metadata: {
                                        canHaveSubselections: !0,
                                        inferredRootCallName: "node",
                                        inferredPrimaryKey: "id",
                                        isPlural: !0
                                    },
                                    type: "Alert"
                                }],
                                id: c.a.QL.__id(),
                                kind: "Fragment",
                                metadata: {},
                                name: "DisruptionListContainer_RootRelayQL",
                                type: "Query"
                            }
                        }
                    },
                    initialVariables: {
                        feedIds: null,
                        language: null
                    }
                }),
                L = a("./app/component/ComponentUsageExample.js"),
                O = a("./app/util/browser.js");

            function M(e, t) {
                if (!(e && e.isBrowser || O.c)) return null;
                var a = function() {
                    return !!t.location.state && t.location.state.disruptionInfoOpen
                };
                if (!a()) return null;
                return s.a.createElement(p.a, {
                    open: !0,
                    title: s.a.createElement(u.a, {
                        id: "disruption-info",
                        defaultMessage: "Disruption info"
                    }),
                    toggleVisibility: function() {
                        a() ? t.router.goBack() : t.router.push(Object(n.a)({}, t.location, {
                            state: Object(n.a)({}, t.location.state, {
                                disruptionInfoOpen: !0
                            })
                        }))
                    }
                }, s.a.createElement(c.a.RootContainer, {
                    Component: x,
                    forceFetch: !0,
                    route: {
                        name: "ViewerRoute",
                        queries: {
                            root: function(e, t) {
                                var a, n = t.feedIds,
                                    i = t.language;
                                return a = e.getFragment("root", {
                                    feedIds: n,
                                    language: i
                                }), {
                                    children: [].concat.apply([], [c.a.QL.__frag(a)]),
                                    fieldName: "viewer",
                                    kind: "Query",
                                    metadata: {},
                                    name: "DisruptionInfo",
                                    type: "Query"
                                }
                            }
                        },
                        params: {
                            feedIds: t.config.feedIds,
                            language: t.intl.locale
                        }
                    },
                    renderLoading: function() {
                        return s.a.createElement(m.a, null)
                    }
                }))
            }
            M.contextTypes = {
                router: d.routerShape.isRequired,
                location: d.locationShape.isRequired,
                config: r.a.shape({
                    feedIds: r.a.arrayOf(r.a.string.isRequired)
                }).isRequired,
                intl: u.d
            }, M.propTypes = {
                isBrowser: r.a.bool
            }, M.defaultProps = {
                isBrowser: !1
            }, M.description = function() {
                return s.a.createElement("div", null, s.a.createElement("p", null, "Modal that shows all available disruption info. Opened by DisruptionInfoButton.", s.a.createElement("strong", null, "Deprecated:"), " Will be removed in short future in favor of announcements page."), s.a.createElement(L.a, null, s.a.createElement(M, null)))
            };
            t.a = M
        },
        "./app/component/Distance.js": function(e, t, a) {
            "use strict";
            a.d(t, "a", (function() {
                return d
            })), a.d(t, "b", (function() {
                return u
            }));
            var n = a("./node_modules/prop-types/index.js"),
                i = a.n(n),
                r = a("./node_modules/react/index.js"),
                o = a.n(r),
                s = a("./app/component/ComponentUsageExample.js"),
                l = a("./app/util/geo-utils.js"),
                c = a("./app/util/browser.js"),
                u = function(e) {
                    return e < 1e3 ? e - e % 10 : e - e % 100
                },
                d = function(e, t) {
                    var a, n;
                    return e.distance ? (n = u(e.distance), a = Object(c.g)(t.config) ? Object(l.d)(e.distance) : n < 1e3 ? n + "m" : (n / 1e3).toFixed(1) + "km") : a = "", o.a.createElement("span", {
                        className: "distance"
                    }, a)
                };
            d.description = function() {
                return o.a.createElement("div", null, o.a.createElement("p", null, "Display distance in correct format. Rounds to 10s of meters or if above 1000 then shows kilometers with one decimal."), o.a.createElement(s.a, {
                    description: "distance is rounded down"
                }, o.a.createElement(d, {
                    distance: 7
                })), o.a.createElement(s.a, {
                    description: "distance"
                }, o.a.createElement(d, {
                    distance: 123
                })), o.a.createElement(s.a, {
                    description: "distance in km"
                }, o.a.createElement(d, {
                    distance: 3040
                })))
            }, d.propTypes = {
                distance: i.a.number.isRequired
            }, d.contextTypes = {
                config: i.a.object.isRequired
            }, d.displayName = "Distance"
        },
        "./app/component/EmptyFavouriteLocationSlot.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/prop-types/index.js"),
                i = a.n(n),
                r = a("./node_modules/react/index.js"),
                o = a.n(r),
                s = a("./node_modules/react-router/es/index.js"),
                l = a("./node_modules/react-intl/lib/index.es.js"),
                c = a("./node_modules/classnames/index.js"),
                u = a.n(c),
                d = a("./app/component/ComponentUsageExample.js"),
                p = function(e) {
                    var t = e.id;
                    return o.a.createElement("svg", {
                        id: t,
                        viewBox: "0 0 40 40",
                        className: u()("icon")
                    }, o.a.createElement("circle", {
                        strokeWidth: "2",
                        stroke: "currentColor",
                        fill: "currentColor",
                        cx: "20",
                        cy: "20",
                        r: "19"
                    }), o.a.createElement("use", {
                        xlinkHref: "#icon-icon_plus",
                        transform: "scale(0.7,0.7)",
                        y: "8",
                        x: "8",
                        style: {
                            color: "white",
                            fill: "white"
                        }
                    }))
                };
            p.description = function() {
                return o.a.createElement(d.a, {
                    description: "Add icon"
                }, o.a.createElement(p, null))
            }, p.displayName = "IconWithCaution", p.propTypes = {
                id: i.a.string
            };
            var m = p,
                f = function(e) {
                    var t = e.index;
                    return o.a.createElement(s.Link, {
                        id: "add-new-favourite-" + t,
                        to: "/suosikki/uusi",
                        className: "cursor-pointer no-decoration",
                        key: "add-new-favourite-" + t
                    }, o.a.createElement("div", {
                        className: "new-favourite-button-content"
                    }, o.a.createElement(m, null), o.a.createElement("p", {
                        className: "add-location-text"
                    }, o.a.createElement(l.a, {
                        id: "add-location",
                        defaultMessage: "Add location"
                    }))))
                };
            f.displayName = "EmptyFavouriteLocationSlot", f.description = function() {
                return o.a.createElement("div", null, o.a.createElement("p", null, "Renders a empty favourite location slot component"), o.a.createElement(d.a, {
                    description: "none"
                }, o.a.createElement(f, null)))
            }, f.propTypes = {
                index: i.a.number.isRequired
            };
            t.a = f
        },
        "./app/component/ErrorBoundary.js": function(e, t, a) {
            "use strict";
            a.d(t, "a", (function() {
                return u
            }));
            var n = a("./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js"),
                i = a("./node_modules/prop-types/index.js"),
                r = a.n(i),
                o = a("./node_modules/react/index.js"),
                s = a.n(o),
                l = a("./node_modules/react-intl/lib/index.es.js"),
                c = a("./app/component/Icon.js"),
                u = function(e) {
                    function t() {
                        for (var t, a = arguments.length, n = new Array(a), i = 0; i < a; i++) n[i] = arguments[i];
                        return (t = e.call.apply(e, [this].concat(n)) || this).state = {
                            error: null,
                            hasRetried: !1
                        }, t.resetState = function() {
                            return t.setState({
                                error: null,
                                hasRetried: !0
                            })
                        }, t
                    }
                    Object(n.a)(t, e);
                    var a = t.prototype;
                    return a.componentDidCatch = function(e, t) {
                        this.state.hasRetried ? window.location.reload() : (this.setState({
                            error: e
                        }), this.context.raven && this.context.raven.captureException(e, {
                            extra: t
                        }))
                    }, a.render = function() {
                        return this.state.error ? s.a.createElement("div", {
                            className: "page-not-found"
                        }, s.a.createElement(c.a, {
                            img: "icon-icon_error_page_not_found"
                        }), s.a.createElement("p", null, s.a.createElement(l.a, {
                            id: "generic-error",
                            defaultMessage: "There was an error"
                        })), s.a.createElement("p", null, s.a.createElement("button", {
                            onClick: this.resetState
                        }, s.a.createElement(l.a, {
                            id: "try-again",
                            defaultMessage: "Try again ›"
                        })))) : this.props.children || null
                    }, t
                }(s.a.Component);
            u.propTypes = {
                children: r.a.node.isRequired
            }, u.contextTypes = {
                raven: r.a.shape({
                    captureException: r.a.func.isRequired
                })
            }
        },
        "./app/component/ExampleData.js": function(e, t, a) {
            "use strict";
            a.d(t, "d", (function() {
                return n
            })), a.d(t, "g", (function() {
                return i
            })), a.d(t, "b", (function() {
                return r
            })), a.d(t, "l", (function() {
                return o
            })), a.d(t, "a", (function() {
                return s
            })), a.d(t, "k", (function() {
                return l
            })), a.d(t, "c", (function() {
                return c
            })), a.d(t, "e", (function() {
                return u
            })), a.d(t, "f", (function() {
                return d
            })), a.d(t, "j", (function() {
                return p
            })), a.d(t, "i", (function() {
                return m
            })), a.d(t, "h", (function() {
                return f
            }));
            var n = "fi",
                i = {
                    stop: {
                        code: "4611",
                        gtfsId: "HSL:1541157",
                        name: "Kaivonkatsojanpuisto",
                        desc: "Kaivonkatsojantie"
                    },
                    stoptime: 1444165199,
                    realtime: !0,
                    realtimeDeparture: 86399,
                    serviceDay: 1444078800,
                    pattern: {
                        __dataID__: "UGF0dGVybjpIU0w6NDYxMToxOjAx",
                        route: {
                            __dataID__: "Um91dGU6SFNMOjQ2MTE=",
                            gtfsId: "HSL:4611",
                            shortName: "611",
                            longName: "Rautatientori - Siltamäki - Suutarila - Tikkurila",
                            mode: "BUS",
                            color: null
                        },
                        code: "HSL:4611:1:01",
                        headsign: "Rautatientori"
                    },
                    trip: {
                        gtfsId: "HSL:1006T_20160613_La_1_2136"
                    }
                },
                r = {
                    isArrival: !1,
                    stop: {
                        code: "1007",
                        name: "Kellosilta",
                        desc: "Ratamestarinkatu 9",
                        gtfsId: "JOLI:1007",
                        platformCode: "1-6"
                    },
                    stoptime: 1444185960,
                    realtime: !1,
                    realtimeDeparture: 69900,
                    serviceDay: 1444116060,
                    pattern: {
                        __dataID__: "UGF0dGVybjpIU0w6MTAwN0I6MDowMg==",
                        alerts: [],
                        route: {
                            __dataID__: "Um91dGU6SFNMOjEwMDdC",
                            gtfsId: "HSL:1007B",
                            shortName: "7B",
                            longName: "Senaatintori-Pasila-Töölö-Senaatintori",
                            mode: "TRAM",
                            color: null
                        },
                        code: "HSL:1007B:0:02",
                        headsign: "Pasila"
                    },
                    trip: {
                        gtfsId: "HSL:1006T_20160613_La_1_2136"
                    }
                },
                o = {
                    id: "7afa423b",
                    route: "HSL:4611",
                    direction: 1,
                    tripStartTime: "1323",
                    operatingDay: "2016-06-01",
                    mode: "bus",
                    delay: 44,
                    next_stop: "1401152",
                    timestamp: 1464777425,
                    lat: 60.28675,
                    long: 25.00535
                },
                s = new Date(1464778e3).getTime() / 1e3,
                l = {
                    bikesAvailable: 1,
                    spacesAvailable: 1,
                    stationId: "A07",
                    name: "Fredrikinkatu 27",
                    lon: 24.939603788199364,
                    lat: 60.1626075196532,
                    state: "Station on"
                },
                c = {
                    favourite: {
                        locationName: "Työ",
                        selectedIconId: "icon-icon_place"
                    },
                    arrivalTime: 1444175199,
                    departureTime: 1444165199,
                    realtime: !0,
                    currentTime: 1444165100,
                    firstTransitLeg: {
                        realTime: !0,
                        mode: "BUS",
                        route: {
                            shortName: "123"
                        }
                    }
                },
                u = [{
                    feature: {
                        properties: {
                            gtfsId: "HSL:1301453",
                            type: "TRAM",
                            name: "Laajalahden aukio",
                            patterns: '[{"headsign":"Töölö","type":"TRAM","shortName":"4"}]'
                        }
                    },
                    layer: "stop"
                }, {
                    feature: {
                        properties: {
                            gtfsId: "HSL:1301452",
                            type: "TRAM",
                            name: "Laajalahden aukio",
                            patterns: '[{"headsign":"Munkkiniemi","type":"TRAM","shortName":"4T"}]'
                        }
                    },
                    layer: "stop"
                }],
                d = {
                    itineraries: [{
                        walkDistance: 465.2611547749316,
                        duration: 731,
                        startTime: 1463406749e3,
                        endTime: 146340748e4,
                        fares: [{
                            type: "regular",
                            cents: 320,
                            currency: "EUR",
                            components: [{
                                fareId: "HSL:hki"
                            }]
                        }],
                        legs: [{
                            mode: "WALK",
                            agency: null,
                            from: {
                                lat: 60.19922449999999,
                                lon: 24.9400405,
                                name: "Ratamestarinkatu 5, Helsinki",
                                vertexType: "NORMAL",
                                bikeRentalStation: null,
                                stop: null
                            },
                            to: {
                                lat: 60.19866269999994,
                                lon: 24.933482300000076,
                                name: "Pasila",
                                vertexType: "TRANSIT",
                                bikeRentalStation: null,
                                stop: {
                                    gtfsId: "HSL:1174552",
                                    code: "0071",
                                    id: "U3RvcDpIU0w6MTE3NDU1Mg=="
                                }
                            },
                            legGeometry: {
                                length: 33,
                                points: "ktlnJabfwC[NMDDj@?H@L@H@PFfADhC@TT|DBh@?BFdAJvADp@Dt@HtA?DDr@@H@FJrB@D???B?DBVB\\D|@FfATI"
                            },
                            intermediatePlaces: [],
                            realTime: !1,
                            transitLeg: !1,
                            rentedBike: !1,
                            startTime: 1463406749e3,
                            endTime: 1463407139e3,
                            distance: 427.403,
                            duration: 390,
                            route: null,
                            trip: null
                        }, {
                            mode: "RAIL",
                            agency: {
                                name: "Helsingin seudun liikenne",
                                id: "QWdlbmN5OkhTTA=="
                            },
                            from: {
                                lat: 60.19866269999994,
                                lon: 24.933482300000076,
                                name: "Pasila",
                                vertexType: "TRANSIT",
                                bikeRentalStation: null,
                                stop: {
                                    gtfsId: "HSL:1174552",
                                    code: "0071",
                                    id: "U3RvcDpIU0w6MTE3NDU1Mg=="
                                }
                            },
                            to: {
                                lat: 60.17131980000005,
                                lon: 24.941456599999952,
                                name: "Helsinki",
                                vertexType: "TRANSIT",
                                bikeRentalStation: null,
                                stop: {
                                    gtfsId: "HSL:1020552",
                                    code: "0070",
                                    id: "U3RvcDpIU0w6MTAyMDU1Mg=="
                                }
                            },
                            legGeometry: {
                                length: 2,
                                points: "splnJgydwC|iDyp@"
                            },
                            intermediatePlaces: [],
                            realTime: !1,
                            transitLeg: !0,
                            rentedBike: !1,
                            startTime: 146340714e4,
                            endTime: 146340744e4,
                            distance: 3072.1942153850637,
                            duration: 300,
                            route: {
                                shortName: "A",
                                id: "Um91dGU6SFNMOjMwMDJB"
                            },
                            trip: {
                                gtfsId: "HSL:3002A_20160509_Ma_2_1647",
                                tripHeadsign: "Helsinki",
                                id: "VHJpcDpIU0w6MzAwMkFfMjAxNjA1MDlfTWFfMl8xNjQ3"
                            }
                        }, {
                            mode: "WALK",
                            agency: null,
                            from: {
                                lat: 60.17131980000005,
                                lon: 24.941456599999952,
                                name: "Helsinki",
                                vertexType: "TRANSIT",
                                bikeRentalStation: null,
                                stop: {
                                    gtfsId: "HSL:1020552",
                                    code: "0070",
                                    id: "U3RvcDpIU0w6MTAyMDU1Mg=="
                                }
                            },
                            to: {
                                lat: 60.171198,
                                lon: 24.941828,
                                name: "Asema-Aukio 1, Helsinki",
                                vertexType: "NORMAL",
                                bikeRentalStation: null,
                                stop: null
                            },
                            legGeometry: {
                                length: 4,
                                points: "segnJekfwCKo@TCRA"
                            },
                            intermediatePlaces: [],
                            realTime: !1,
                            transitLeg: !1,
                            rentedBike: !1,
                            startTime: 1463407441e3,
                            endTime: 146340748e4,
                            distance: 37.714,
                            duration: 39,
                            route: null,
                            trip: null
                        }]
                    }, {
                        walkDistance: 465.2611547749316,
                        duration: 731,
                        startTime: 1463406929e3,
                        endTime: 146340766e4,
                        legs: [{
                            mode: "WALK",
                            agency: null,
                            from: {
                                lat: 60.19922449999999,
                                lon: 24.9400405,
                                name: "Ratamestarinkatu 5, Helsinki",
                                vertexType: "NORMAL",
                                bikeRentalStation: null,
                                stop: null
                            },
                            to: {
                                lat: 60.19866269999994,
                                lon: 24.933482300000076,
                                name: "Pasila",
                                vertexType: "TRANSIT",
                                bikeRentalStation: null,
                                stop: {
                                    gtfsId: "HSL:1174552",
                                    code: "0071",
                                    id: "U3RvcDpIU0w6MTE3NDU1Mg=="
                                }
                            },
                            legGeometry: {
                                length: 33,
                                points: "ktlnJabfwC[NMDDj@?H@L@H@PFfADhC@TT|DBh@?BFdAJvADp@Dt@HtA?DDr@@H@FJrB@D???B?DBVB\\D|@FfATI"
                            },
                            intermediatePlaces: [],
                            realTime: !1,
                            transitLeg: !1,
                            rentedBike: !1,
                            startTime: 1463406929e3,
                            endTime: 1463407319e3,
                            distance: 427.403,
                            duration: 390,
                            route: null,
                            trip: null
                        }, {
                            mode: "RAIL",
                            agency: {
                                name: "Helsingin seudun liikenne",
                                id: "QWdlbmN5OkhTTA=="
                            },
                            from: {
                                lat: 60.19866269999994,
                                lon: 24.933482300000076,
                                name: "Pasila",
                                vertexType: "TRANSIT",
                                bikeRentalStation: null,
                                stop: {
                                    gtfsId: "HSL:1174552",
                                    code: "0071",
                                    id: "U3RvcDpIU0w6MTE3NDU1Mg=="
                                }
                            },
                            to: {
                                lat: 60.17131980000005,
                                lon: 24.941456599999952,
                                name: "Helsinki",
                                vertexType: "TRANSIT",
                                bikeRentalStation: null,
                                stop: {
                                    gtfsId: "HSL:1020552",
                                    code: "0070",
                                    id: "U3RvcDpIU0w6MTAyMDU1Mg=="
                                }
                            },
                            legGeometry: {
                                length: 2,
                                points: "splnJgydwC|iDyp@"
                            },
                            intermediatePlaces: [],
                            realTime: !1,
                            transitLeg: !0,
                            rentedBike: !1,
                            startTime: 146340732e4,
                            endTime: 146340762e4,
                            distance: 3072.1942153850637,
                            duration: 300,
                            route: {
                                shortName: "Y",
                                id: "Um91dGU6SFNMOjMwMDJZ"
                            },
                            trip: {
                                gtfsId: "HSL:3002Y_20160509_Ma_2_1621",
                                tripHeadsign: "Helsinki",
                                id: "VHJpcDpIU0w6MzAwMllfMjAxNjA1MDlfTWFfMl8xNjIx"
                            }
                        }, {
                            mode: "WALK",
                            agency: null,
                            from: {
                                lat: 60.17131980000005,
                                lon: 24.941456599999952,
                                name: "Helsinki",
                                vertexType: "TRANSIT",
                                bikeRentalStation: null,
                                stop: {
                                    gtfsId: "HSL:1020552",
                                    code: "0070",
                                    id: "U3RvcDpIU0w6MTAyMDU1Mg=="
                                }
                            },
                            to: {
                                lat: 60.171198,
                                lon: 24.941828,
                                name: "Asema-Aukio 1, Helsinki",
                                vertexType: "NORMAL",
                                bikeRentalStation: null,
                                stop: null
                            },
                            legGeometry: {
                                length: 4,
                                points: "segnJekfwCKo@TCRA"
                            },
                            intermediatePlaces: [],
                            realTime: !1,
                            transitLeg: !1,
                            rentedBike: !1,
                            startTime: 1463407621e3,
                            endTime: 146340766e4,
                            distance: 37.714,
                            duration: 39,
                            route: null,
                            trip: null
                        }]
                    }, {
                        walkDistance: 465.2611547749316,
                        duration: 731,
                        startTime: 1463407049e3,
                        endTime: 146340778e4,
                        legs: [{
                            mode: "WALK",
                            agency: null,
                            from: {
                                lat: 60.19922449999999,
                                lon: 24.9400405,
                                name: "Ratamestarinkatu 5, Helsinki",
                                vertexType: "NORMAL",
                                bikeRentalStation: null,
                                stop: null
                            },
                            to: {
                                lat: 60.19866269999994,
                                lon: 24.933482300000076,
                                name: "Pasila",
                                vertexType: "TRANSIT",
                                bikeRentalStation: null,
                                stop: {
                                    gtfsId: "HSL:1174552",
                                    code: "0071",
                                    id: "U3RvcDpIU0w6MTE3NDU1Mg=="
                                }
                            },
                            legGeometry: {
                                length: 33,
                                points: "ktlnJabfwC[NMDDj@?H@L@H@PFfADhC@TT|DBh@?BFdAJvADp@Dt@HtA?DDr@@H@FJrB@D???B?DBVB\\D|@FfATI"
                            },
                            intermediatePlaces: [],
                            realTime: !1,
                            transitLeg: !1,
                            rentedBike: !1,
                            startTime: 1463407049e3,
                            endTime: 1463407439e3,
                            distance: 427.403,
                            duration: 390,
                            route: null,
                            trip: null
                        }, {
                            mode: "RAIL",
                            agency: {
                                name: "Helsingin seudun liikenne",
                                id: "QWdlbmN5OkhTTA=="
                            },
                            from: {
                                lat: 60.19866269999994,
                                lon: 24.933482300000076,
                                name: "Pasila",
                                vertexType: "TRANSIT",
                                bikeRentalStation: null,
                                stop: {
                                    gtfsId: "HSL:1174552",
                                    code: "0071",
                                    id: "U3RvcDpIU0w6MTE3NDU1Mg=="
                                }
                            },
                            to: {
                                lat: 60.17131980000005,
                                lon: 24.941456599999952,
                                name: "Helsinki",
                                vertexType: "TRANSIT",
                                bikeRentalStation: null,
                                stop: {
                                    gtfsId: "HSL:1020552",
                                    code: "0070",
                                    id: "U3RvcDpIU0w6MTAyMDU1Mg=="
                                }
                            },
                            legGeometry: {
                                length: 2,
                                points: "splnJgydwC|iDyp@"
                            },
                            intermediatePlaces: [],
                            realTime: !1,
                            transitLeg: !0,
                            rentedBike: !1,
                            startTime: 146340744e4,
                            endTime: 146340774e4,
                            distance: 3072.1942153850637,
                            duration: 300,
                            route: {
                                shortName: "I",
                                id: "Um91dGU6SFNMOjMwMDFJ"
                            },
                            trip: {
                                gtfsId: "HSL:3001I_20160509_Ma_1_1609",
                                tripHeadsign: "Helsinki",
                                id: "VHJpcDpIU0w6MzAwMUlfMjAxNjA1MDlfTWFfMV8xNjA5"
                            }
                        }, {
                            mode: "WALK",
                            agency: null,
                            from: {
                                lat: 60.17131980000005,
                                lon: 24.941456599999952,
                                name: "Helsinki",
                                vertexType: "TRANSIT",
                                bikeRentalStation: null,
                                stop: {
                                    gtfsId: "HSL:1020552",
                                    code: "0070",
                                    id: "U3RvcDpIU0w6MTAyMDU1Mg=="
                                }
                            },
                            to: {
                                lat: 60.171198,
                                lon: 24.941828,
                                name: "Asema-Aukio 1, Helsinki",
                                vertexType: "NORMAL",
                                bikeRentalStation: null,
                                stop: null
                            },
                            legGeometry: {
                                length: 4,
                                points: "segnJekfwCKo@TCRA"
                            },
                            intermediatePlaces: [],
                            realTime: !1,
                            transitLeg: !1,
                            rentedBike: !1,
                            startTime: 1463407741e3,
                            endTime: 146340778e4,
                            distance: 37.714,
                            duration: 39,
                            route: null,
                            trip: null
                        }]
                    }]
                },
                p = [{
                    displayName: "Kaisaniemenpuisto",
                    value: 1
                }, {
                    displayName: "Hakaniemi",
                    value: 2
                }, {
                    displayName: "Haapaniemi",
                    value: 3
                }, {
                    displayName: "Sörnäinen(M)",
                    value: 4
                }],
                m = [{
                    name: "Kaisaniemenpuisto"
                }, {
                    name: "Hakaniemi"
                }, {
                    name: "Haapaniemi"
                }, {
                    name: "Sörnäinen(M)"
                }],
                f = {
                    pattern: {
                        code: "HSL:1007A:1:03",
                        headsign: "Senaatintori",
                        id: "UGF0dGVybjpIU0w6MTAwN0E6MTowMw==",
                        route: {
                            gtfsId: "HSL:1007A",
                            id: "Um91dGU6SFNMOjEwMDdB",
                            longName: "Senaatintori-Töölö-Pasila-Senaatintori",
                            patterns: [{
                                code: "HSL:1007A:0:03",
                                headsign: "Pasila"
                            }, {
                                code: "HSL:1007A:0:02",
                                headsign: "Pasila"
                            }, {
                                code: "HSL:1007A:0:01",
                                headsign: "Pasila"
                            }, {
                                code: "HSL:1007A:1:04",
                                headsign: "Sturenkatu"
                            }, {
                                code: "HSL:1007A:1:03",
                                headsign: "Senaatintori"
                            }, {
                                code: "HSL:1007A:1:02",
                                headsign: "Senaatintori"
                            }, {
                                code: "HSL:1007A:1:01",
                                headsign: "Rautatieasema"
                            }],
                            shortName: "7A",
                            mode: "TRAM"
                        }
                    }
                }
        },
        "./app/component/ExternalLink.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/prop-types/index.js"),
                i = a.n(n),
                r = a("./node_modules/react/index.js"),
                o = a.n(r),
                s = a("./app/component/ComponentUsageExample.js"),
                l = a("./app/component/Icon.js"),
                c = a("./node_modules/classnames/index.js"),
                u = a.n(c),
                d = function(e) {
                    var t = e.className;
                    return o.a.createElement("svg", {
                        viewBox: "0 0 40 40",
                        className: u()("icon", "external-link-decoration", t)
                    }, o.a.createElement("use", {
                        className: "external-link-icon-outer",
                        xlinkHref: "#icon-icon_external_link_arrow"
                    }), o.a.createElement("use", {
                        className: "external-link-icon",
                        xlinkHref: "#icon-icon_external_link_arrow",
                        transform: "scale(0.9,0.9)",
                        y: "0",
                        x: "4"
                    }))
                };
            d.description = function() {
                return o.a.createElement(s.a, {
                    description: "Bus with caution"
                }, o.a.createElement("div", {
                    className: "external-top-bar",
                    style: {
                        textAlign: "center",
                        width: 50,
                        height: 20,
                        backgroundColor: "#ccc"
                    }
                }, o.a.createElement(d, null)))
            }, d.displayName = "IconWithCaution", d.propTypes = {
                className: i.a.string
            };
            var p = d,
                m = function(e) {
                    var t = e.name,
                        a = e.children,
                        n = e.href,
                        i = e.className;
                    return (t || void 0 !== a) && o.a.createElement("span", {
                        className: i
                    }, o.a.createElement("span", {
                        className: "external-link-container"
                    }, o.a.createElement("a", {
                        onClick: function(e) {
                            return e.stopPropagation()
                        },
                        className: "external-link",
                        href: n
                    }, t || a), o.a.createElement(p, null)))
                };
            m.propTypes = {
                name: i.a.string,
                href: i.a.string,
                className: i.a.string
            }, m.defaultProps = {
                className: ""
            }, m.displayName = "ExternalLink", m.description = function() {
                return o.a.createElement("div", null, o.a.createElement("p", null, "Link to external url"), o.a.createElement(s.a, {
                    description: "with text only"
                }, o.a.createElement("span", {
                    style: {
                        background: "#007ac9",
                        padding: "10px 10px 10px 10px"
                    }
                }, o.a.createElement(m, {
                    className: "external-top-bar",
                    name: "HSL.fi",
                    href: "http://www.hsl.fi"
                }))), o.a.createElement(s.a, {
                    description: "with more complex content"
                }, o.a.createElement("span", {
                    style: {
                        background: "#ccc",
                        padding: "10px 10px 10px 10px"
                    }
                }, o.a.createElement(m, {
                    className: "action-bar",
                    href: "http://print.me.invalid"
                }, o.a.createElement(l.a, {
                    img: "icon-icon_print"
                }), " Print"))))
            };
            t.a = m
        },
        "./app/component/ExternalModesContent.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/prop-types/index.js"),
                i = a.n(n),
                r = a("./node_modules/react/index.js"),
                o = a.n(r),
                s = a("./node_modules/react-relay/classic.js"),
                l = a.n(s),
                c = a("./node_modules/fluxible-addons-react/connectToStores.js"),
                u = a.n(c);

            function d(e, t) {
                var a = e.currentLanguage,
                    n = e.root.transportMenu,
                    i = t.config.defaultLanguage,
                    r = function(e) {
                        window.open(e.target.href, e.target.target).focus()
                    };
                return o.a.createElement("ul", {
                    className: "external-modes-list"
                }, n.items.map((function(e) {
                    return o.a.createElement("li", {
                        key: e.menuItemId
                    }, o.a.createElement("a", {
                        href: e.url[a] || e.url[i] || "",
                        target: "_blank",
                        rel: "noopener noreferrer",
                        onClick: r
                    }, e.icon && o.a.createElement("img", {
                        className: "item-icon",
                        src: e.icon,
                        alt: e.title[a] || e.title[i] || ""
                    }), e.title[a] || e.title[i] || ""))
                })))
            }
            d.propTypes = {
                currentLanguage: i.a.string,
                root: i.a.shape({
                    transportMenu: i.a.object
                })
            }, d.defaultProps = {
                currentLanguage: "",
                root: {
                    transportMenu: {}
                }
            }, d.contextTypes = {
                config: i.a.shape({
                    defaultLanguage: i.a.string
                }).isRequired
            }, t.a = l.a.createContainer(u()(d, ["PreferencesStore"], (function(e) {
                return {
                    currentLanguage: e.getStore("PreferencesStore").getLanguage()
                }
            })), {
                fragments: {
                    root: function() {
                        return {
                            children: [{
                                children: [{
                                    fieldName: "menuId",
                                    kind: "Field",
                                    metadata: {},
                                    type: "String"
                                }, {
                                    children: [{
                                        fieldName: "fi",
                                        kind: "Field",
                                        metadata: {},
                                        type: "String"
                                    }, {
                                        fieldName: "sv",
                                        kind: "Field",
                                        metadata: {},
                                        type: "String"
                                    }, {
                                        fieldName: "en",
                                        kind: "Field",
                                        metadata: {},
                                        type: "String"
                                    }],
                                    fieldName: "title",
                                    kind: "Field",
                                    metadata: {
                                        canHaveSubselections: !0
                                    },
                                    type: "LocalizedString"
                                }, {
                                    children: [{
                                        fieldName: "menuItemId",
                                        kind: "Field",
                                        metadata: {},
                                        type: "String"
                                    }, {
                                        children: [{
                                            fieldName: "fi",
                                            kind: "Field",
                                            metadata: {},
                                            type: "String"
                                        }, {
                                            fieldName: "sv",
                                            kind: "Field",
                                            metadata: {},
                                            type: "String"
                                        }, {
                                            fieldName: "en",
                                            kind: "Field",
                                            metadata: {},
                                            type: "String"
                                        }],
                                        fieldName: "title",
                                        kind: "Field",
                                        metadata: {
                                            canHaveSubselections: !0
                                        },
                                        type: "LocalizedString"
                                    }, {
                                        children: [{
                                            fieldName: "fi",
                                            kind: "Field",
                                            metadata: {},
                                            type: "String"
                                        }, {
                                            fieldName: "sv",
                                            kind: "Field",
                                            metadata: {},
                                            type: "String"
                                        }, {
                                            fieldName: "en",
                                            kind: "Field",
                                            metadata: {},
                                            type: "String"
                                        }],
                                        fieldName: "url",
                                        kind: "Field",
                                        metadata: {
                                            canHaveSubselections: !0
                                        },
                                        type: "LocalizedString"
                                    }, {
                                        fieldName: "icon",
                                        kind: "Field",
                                        metadata: {},
                                        type: "String"
                                    }, {
                                        fieldName: "id",
                                        kind: "Field",
                                        metadata: {
                                            isGenerated: !0,
                                            isRequisite: !0
                                        },
                                        type: "ID"
                                    }],
                                    fieldName: "items",
                                    kind: "Field",
                                    metadata: {
                                        canHaveSubselections: !0,
                                        isPlural: !0
                                    },
                                    type: "CmsMenuItem"
                                }, {
                                    fieldName: "id",
                                    kind: "Field",
                                    metadata: {
                                        isGenerated: !0,
                                        isRequisite: !0
                                    },
                                    type: "ID"
                                }],
                                fieldName: "transportMenu",
                                kind: "Field",
                                metadata: {
                                    canHaveSubselections: !0,
                                    inferredRootCallName: "node",
                                    inferredPrimaryKey: "id"
                                },
                                type: "CmsTransportMenu"
                            }],
                            id: l.a.QL.__id(),
                            kind: "Fragment",
                            metadata: {},
                            name: "ExternalModesContent_RootRelayQL",
                            type: "Query"
                        }
                    }
                }
            })
        },
        "./app/component/Favourite.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/prop-types/index.js"),
                i = a.n(n),
                r = a("./node_modules/react/index.js"),
                o = a.n(r),
                s = a("./node_modules/classnames/index.js"),
                l = a.n(s),
                c = a("./app/component/Icon.js"),
                u = a("./app/component/ComponentUsageExample.js"),
                d = function(e) {
                    var t = e.addFavourite,
                        a = e.favourite,
                        n = e.className;
                    return o.a.createElement("span", {
                        className: l()("cursor-pointer favourite-icon", n),
                        onClick: t
                    }, o.a.createElement(c.a, {
                        className: l()("favourite", {
                            selected: a
                        }),
                        img: "icon-icon_star",
                        pointerEvents: !0
                    }))
                };
            d.propTypes = {
                addFavourite: i.a.func.isRequired,
                favourite: i.a.bool,
                className: i.a.string
            }, d.description = function() {
                return o.a.createElement("div", null, o.a.createElement("p", null, "This component shows whether an entity is a favourite\n        and allows the user to toggle the favourite status on/off."), o.a.createElement(u.a, {
                    description: "entity is favourite"
                }, o.a.createElement(d, {
                    addFavourite: function() {},
                    favourite: !0,
                    pointerEvents: !0
                })), o.a.createElement(u.a, {
                    description: "entity is not favourite"
                }, o.a.createElement(d, {
                    addFavourite: function() {},
                    pointerEvents: !0
                })))
            }, d.displayName = "Favourite", t.a = d
        },
        "./app/component/FavouriteLocation.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/prop-types/index.js"),
                i = a.n(n),
                r = a("./node_modules/react/index.js"),
                o = a.n(r),
                s = a("./node_modules/classnames/index.js"),
                l = a.n(s),
                c = a("./node_modules/react-router/es/index.js"),
                u = a("./app/component/ComponentUsageExample.js"),
                d = a("./app/component/Icon.js"),
                p = a("./app/component/DepartureTime.js"),
                m = a("./app/component/RouteNumber.js"),
                f = a("./app/component/ExampleData.js"),
                g = a("./app/util/suggestionUtils.js"),
                h = function(e) {
                    var t, a, n = e.favourite,
                        i = e.className,
                        r = e.currentTime,
                        s = e.departureTime,
                        u = e.firstTransitLeg,
                        f = e.clickFavourite,
                        h = n.locationName,
                        b = n.id,
                        y = n.lat,
                        v = n.lon,
                        k = n.selectedIconId;
                    t = s && r < s ? o.a.createElement(p.a, {
                        departureTime: s,
                        realtime: u && u.realTime,
                        currentTime: r,
                        className: "time--small"
                    }) : o.a.createElement("div", {
                        className: "favourite-location-content-placeholder time--small"
                    }, "--:--"), a = u && u.route ? o.a.createElement("div", {
                        className: "favourite-location-departure"
                    }, o.a.createElement(m.a, {
                        mode: u.mode,
                        realtime: u.realTime,
                        text: u.route.shortName
                    }), " ", t) : o.a.createElement(d.a, {
                        img: "icon-icon_walk",
                        viewBox: "6 0 40 40"
                    });
                    var j = (Object(g.e)(n) || Object(g.f)(n)) && n.gtfsId ? "pysakki" : "sijainti";
                    return o.a.createElement("div", {
                        "data-swipeable": "true",
                        className: l()("favourite-location-content", i),
                        onClick: function() {
                            return f(h, y, v)
                        }
                    }, o.a.createElement("div", {
                        className: "favourite-location-arrival"
                    }, o.a.createElement(d.a, {
                        className: "favourite-location-icon",
                        img: k
                    }), o.a.createElement("div", {
                        className: "favourite-location-name"
                    }, h)), a, o.a.createElement(c.Link, {
                        onClick: function(e) {
                            e.stopPropagation()
                        },
                        to: "/suosikki/muokkaa/" + j + "/" + b,
                        className: "cursor-pointer no-decoration"
                    }, o.a.createElement("div", {
                        className: "favourite-edit-icon-click-area"
                    }, o.a.createElement(d.a, {
                        className: "favourite-edit-icon",
                        img: "icon-icon_edit"
                    }))))
                };
            h.description = function() {
                return o.a.createElement("div", null, o.a.createElement("p", null, "Renders a favourite location component"), o.a.createElement(u.a, {
                    description: "first leg is with a bus"
                }, o.a.createElement(h, Object.assign({
                    clickFavourite: function() {}
                }, f.c))))
            }, h.propTypes = {
                favourite: i.a.object,
                clickFavourite: i.a.func,
                className: i.a.string,
                departureTime: i.a.number,
                currentTime: i.a.number,
                firstTransitLeg: i.a.object
            }, h.displayName = "FavouriteLocation", t.a = h
        },
        "./app/component/FavouritesTabLabelContainer.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/@babel/runtime/helpers/esm/extends.js"),
                i = a("./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"),
                r = a("./node_modules/prop-types/index.js"),
                o = a.n(r),
                s = a("./node_modules/react/index.js"),
                l = a.n(s),
                c = a("./node_modules/react-relay/classic.js"),
                u = a.n(c),
                d = a("./node_modules/fluxible-addons-react/connectToStores.js"),
                p = a.n(d),
                m = a("./node_modules/recompose/mapProps.js"),
                f = a.n(m),
                g = a("./node_modules/lodash-es/some.js"),
                h = a("./node_modules/lodash-es/flatten.js"),
                b = a("./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js"),
                y = function(e) {
                    function t() {
                        return e.apply(this, arguments) || this
                    }
                    return Object(b.a)(t, e), t
                }(u.a.Route);
            y.queries = {
                routes: function(e, t) {
                    return a = e.getFragment("routes", {
                        feeds: t.feeds
                    }), {
                        calls: [{
                            kind: "Call",
                            metadata: {
                                type: "[String]"
                            },
                            name: "feeds",
                            value: {
                                kind: "CallVariable",
                                callVariableName: "feeds"
                            }
                        }],
                        children: [].concat.apply([], [{
                            fieldName: "id",
                            kind: "Field",
                            metadata: {
                                isGenerated: !0,
                                isRequisite: !0
                            },
                            type: "ID"
                        }, u.a.QL.__frag(a)]),
                        fieldName: "routes",
                        kind: "Query",
                        metadata: {
                            isPlural: !0,
                            identifyingArgName: "feeds",
                            identifyingArgType: "[String]"
                        },
                        name: "RoutesRoute",
                        type: "Route"
                    };
                    var a
                }
            }, y.paramDefinitions = {
                feeds: {
                    required: !0
                }
            }, y.routeName = "RoutesRoute";
            var v = a("./node_modules/react-intl/lib/index.es.js"),
                k = a("./app/component/Icon.js"),
                j = a("./app/component/IconWithCaution.js");

            function S(e) {
                var t = e.hasDisruption,
                    a = e.classes,
                    n = e.onClick;
                return l.a.createElement("li", {
                    className: a,
                    onClick: n,
                    role: "button"
                }, t ? l.a.createElement(j.a, {
                    className: "prefix-icon favourites-icon",
                    img: "icon-icon_star"
                }) : l.a.createElement(k.a, {
                    className: "prefix-icon favourites-icon",
                    img: "icon-icon_star"
                }), l.a.createElement(v.a, {
                    id: "your-favourites",
                    defaultMessage: "Favourites"
                }))
            }
            S.propTypes = {
                hasDisruption: o.a.bool,
                classes: o.a.string.isRequired,
                onClick: o.a.func.isRequired
            };
            var E = a("./app/util/browser.js"),
                N = ["routes"],
                R = ["routes"],
                w = function(e) {
                    return Object(g.a)(Object(h.a)(e.map((function(e) {
                        return e && e.alerts.length > 0
                    }))))
                },
                T = f()((function(e) {
                    var t = e.routes,
                        a = Object(i.a)(e, N);
                    return Object(n.a)({
                        hasDisruption: w(t)
                    }, a)
                })),
                C = u.a.createContainer(T(S), {
                    fragments: {
                        routes: function() {
                            return {
                                children: [{
                                    children: [{
                                        fieldName: "id",
                                        kind: "Field",
                                        metadata: {
                                            isRequisite: !0
                                        },
                                        type: "ID"
                                    }],
                                    fieldName: "alerts",
                                    kind: "Field",
                                    metadata: {
                                        canHaveSubselections: !0,
                                        inferredRootCallName: "node",
                                        inferredPrimaryKey: "id",
                                        isPlural: !0
                                    },
                                    type: "Alert"
                                }, {
                                    fieldName: "id",
                                    kind: "Field",
                                    metadata: {
                                        isGenerated: !0,
                                        isRequisite: !0
                                    },
                                    type: "ID"
                                }],
                                id: u.a.QL.__id(),
                                kind: "Fragment",
                                metadata: {
                                    plural: !0
                                },
                                name: "FavouritesTabLabelContainer_RoutesRelayQL",
                                type: "Route"
                            }
                        }
                    }
                });

            function x(e) {
                var t = e.routes,
                    a = Object(i.a)(e, R);
                return E.c ? l.a.createElement(u.a.Renderer, {
                    Container: C,
                    queryConfig: new y({
                        feeds: t
                    }),
                    environment: u.a.Store,
                    render: function(e) {
                        var t = e.done,
                            n = e.props;
                        return t ? l.a.createElement(C, Object.assign({}, n, a)) : l.a.createElement(S, a)
                    }
                }) : l.a.createElement("div", null)
            }
            x.propTypes = {
                routes: o.a.array.isRequired
            };
            t.a = p()(x, ["FavouriteRoutesStore"], (function(e) {
                return {
                    routes: e.getStore("FavouriteRoutesStore").getRoutes()
                }
            }))
        },
        "./app/component/FooterItem.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/prop-types/index.js"),
                i = a.n(n),
                r = a("./node_modules/react/index.js"),
                o = a.n(r),
                s = a("./node_modules/react-intl/lib/index.es.js"),
                l = a("./node_modules/react-router/es/index.js"),
                c = a("./app/component/ComponentUsageExample.js"),
                u = a("./app/component/Icon.js"),
                d = function(e, t) {
                    var a = e.name,
                        n = e.href,
                        i = e.label,
                        r = e.nameEn,
                        l = e.route,
                        c = e.icon,
                        d = t.router,
                        p = c && o.a.createElement(u.a, {
                            className: "footer-icon",
                            img: c
                        }) || void 0,
                        m = i || o.a.createElement(s.a, {
                            id: a,
                            defaultMessage: r || a
                        }),
                        f = o.a.createElement("span", {
                            id: a
                        }, p, m);
                    return f = n ? function(e, t) {
                        return o.a.createElement("span", {
                            className: "cursor-pointer"
                        }, o.a.createElement("a", {
                            href: e
                        }, t))
                    }(n, f) : l ? function(e, t, a) {
                        return o.a.createElement("button", {
                            className: "noborder button cursor-pointer",
                            onClick: function() {
                                e.push(t)
                            }
                        }, a)
                    }(d, l, f) : o.a.createElement("span", {
                        className: "footer-text"
                    }, f), o.a.createElement("span", {
                        className: "footer-item"
                    }, f)
                };
            d.propTypes = {
                name: i.a.string,
                nameEn: i.a.string,
                icon: i.a.string,
                href: i.a.string,
                route: i.a.string,
                label: i.a.string
            }, d.contextTypes = {
                router: l.routerShape.isRequired
            }, d.defaultProps = {
                links: []
            }, d.displayName = "FooterItem", d.description = function() {
                return o.a.createElement("div", null, o.a.createElement("p", null, "Front page footer item"), o.a.createElement(c.a, {
                    description: "external"
                }, o.a.createElement(d, {
                    name: "Palaute",
                    href: "http://www.hsl.fi/"
                })), o.a.createElement(c.a, {
                    description: "with icon"
                }, o.a.createElement(d, {
                    icon: "icon-icon_speech-bubble",
                    name: "Feedback",
                    route: "/"
                })))
            }, t.a = d
        },
        "./app/component/FrontPagePanelLarge.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/prop-types/index.js"),
                i = a.n(n),
                r = a("./node_modules/react/index.js"),
                o = a.n(r),
                s = a("./node_modules/classnames/index.js"),
                l = a.n(s),
                c = a("./app/component/NearbyTabLabel.js"),
                u = a("./app/component/FavouritesTabLabelContainer.js"),
                d = a("./app/component/ComponentUsageExample.js"),
                p = function(e) {
                    var t = e.selectedPanel,
                        a = e.nearbyClicked,
                        n = e.favouritesClicked,
                        i = e.children,
                        r = ["bp-large", "h5"],
                        s = ["nearby-routes"],
                        d = ["favourites"];
                    return 1 === t ? s.push("selected") : d.push("selected"), o.a.createElement("div", {
                        className: "fpcfloat no-select"
                    }, o.a.createElement("ul", {
                        className: "tabs-row bp-large cursor-pointer"
                    }, o.a.createElement(c.a, {
                        classes: l()(r, s),
                        onClick: a
                    }), o.a.createElement(u.a, {
                        classes: l()(r, d),
                        onClick: n
                    })), i)
                },
                m = function() {};
            p.displayName = "FrontPagePanelLarge", p.description = function() {
                return o.a.createElement("div", null, o.a.createElement("p", null, "Front page tabs for large display."), o.a.createElement("div", {
                    style: {
                        width: "340px"
                    }
                }, o.a.createElement(d.a, {
                    description: "Front page tabs"
                }, o.a.createElement(p, {
                    selectedPanel: 2,
                    nearbyClicked: m,
                    favouritesClicked: m
                }))))
            }, p.propTypes = {
                selectedPanel: i.a.oneOf([1, 2]),
                nearbyClicked: i.a.func.isRequired,
                favouritesClicked: i.a.func.isRequired,
                children: i.a.node
            }, p.defaultProps = {
                selectedPanel: 1,
                children: null
            }, t.a = p
        },
        "./app/component/FrontPagePanelSmall.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/prop-types/index.js"),
                i = a.n(n),
                r = a("./node_modules/react/index.js"),
                o = a.n(r),
                s = a("./node_modules/classnames/index.js"),
                l = a.n(s),
                c = a("./app/component/ComponentUsageExample.js"),
                u = a("./app/component/NearbyTabLabel.js"),
                d = a("./app/component/FavouritesTabLabelContainer.js"),
                p = function(e) {
                    var t = e.selectedPanel,
                        a = e.nearbyClicked,
                        n = e.favouritesClicked,
                        i = e.mapExpanded,
                        r = e.children,
                        s = ["hover"],
                        c = ["nearby-routes", "h5"],
                        p = ["favourites", "h5"];
                    1 === t ? c.push("selected") : p.push("selected");
                    var m = t && o.a.createElement("div", {
                        className: l()(["frontpage-panel-wrapper", "no-select", "small", {
                            "expanded-panel": i
                        }]),
                        key: "panel"
                    }, r);
                    return o.a.createElement("div", {
                        className: l()(["frontpage-panel-container", "no-select"], {
                            expanded: i
                        })
                    }, o.a.createElement("ul", {
                        className: l()(["tabs-row", "cursor-pointer", {
                            expanded: i
                        }])
                    }, o.a.createElement(u.a, {
                        classes: l()(s, c),
                        onClick: a
                    }), o.a.createElement(d.a, {
                        classes: l()(s, p),
                        onClick: n
                    })), m)
                },
                m = function() {};
            p.displayName = "FrontPagePanelSmall", p.description = function() {
                return o.a.createElement("div", null, o.a.createElement("p", null, "Front page tabs for small display."), o.a.createElement(c.a, {
                    description: "Front page tabs"
                }, o.a.createElement(p, {
                    closePanel: m,
                    favouritesClicked: m,
                    nearbyClicked: m
                })))
            }, p.defaultProps = {
                selectedPanel: 1,
                children: null
            }, p.propTypes = {
                selectedPanel: i.a.oneOf([1, 2]),
                nearbyClicked: i.a.func.isRequired,
                favouritesClicked: i.a.func.isRequired,
                mapExpanded: i.a.bool.isRequired,
                children: i.a.node
            }, t.a = p
        },
        "./app/component/Icon.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/prop-types/index.js"),
                i = a.n(n),
                r = a("./node_modules/react/index.js"),
                o = a.n(r),
                s = a("./node_modules/classnames/index.js"),
                l = a.n(s),
                c = function(e) {
                    return e.length > 1 || e > 9
                },
                u = function(e) {
                    var t = e.badgeFill,
                        a = e.badgeText;
                    return t && a ? o.a.createElement("svg", {
                        className: "icon-badge",
                        viewBox: "0 0 40 40"
                    }, o.a.createElement("circle", {
                        className: "badge-circle",
                        cx: "20",
                        cy: "20",
                        fill: t,
                        r: "20"
                    }), o.a.createElement("text", {
                        className: l()("badge-text", {
                            long: c(a)
                        }),
                        dy: "0.3em",
                        x: "20",
                        y: "20"
                    }, a)) : null
                };

            function d(e) {
                return o.a.createElement("span", {
                    "aria-hidden": !0,
                    className: "icon-container"
                }, o.a.createElement("svg", {
                    id: e.id,
                    style: {
                        fill: e.color ? e.color : null,
                        pointerEvents: e.pointerEvents ? "auto" : "none"
                    },
                    viewBox: e.viewBox,
                    className: l()("icon", e.className)
                }, o.a.createElement("use", {
                    xlinkHref: "#" + e.img
                })), o.a.createElement(u, {
                    badgeFill: e.badgeFill,
                    badgeText: e.badgeText
                }))
            }
            u.propTypes = {
                badgeFill: i.a.string,
                badgeText: i.a.oneOfType([i.a.string, i.a.number])
            }, u.defaultProps = {
                badgeFill: void 0,
                badgeText: void 0
            }, u.asString = function(e, t) {
                return e && t ? '\n  <svg class="icon-badge" viewBox="0 0 40 40">\n    <circle class="badge-circle" cx="20" cy="20" fill="' + e + '" r="20"/>\n    <text class="' + l()("badge-text", {
                    long: c(t)
                }) + '" dy="0.3em" x="20" y="20">' + t + "</text>\n  </svg>" : ""
            }, d.propTypes = {
                badgeFill: i.a.string,
                badgeText: i.a.oneOfType([i.a.string, i.a.number]),
                className: i.a.string,
                color: i.a.string,
                id: i.a.string,
                img: i.a.string.isRequired,
                pointerEvents: i.a.bool,
                viewBox: i.a.string
            }, d.defaultProps = {
                badgeFill: void 0,
                badgeText: void 0,
                className: void 0,
                color: void 0,
                id: void 0,
                pointerEvents: !1,
                viewBox: "0 0 40 40"
            }, d.asString = function(e, t, a, n, i) {
                return void 0 === n && (n = void 0), void 0 === i && (i = void 0), '\n  <span class="icon-container">\n    <svg\n      ' + (a ? " id=" + a : "") + '\n      viewBox="0 0 40 40"\n      class="' + l()("icon", t) + '"\n    >\n      <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#' + e + '"/>\n    </svg>\n    ' + u.asString(n, i) + "\n  </span>\n"
            }, d.displayName = "Icon", d.description = "Shows an icon from the SVG sprite", t.a = d
        },
        "./app/component/IconWithBigCaution.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/prop-types/index.js"),
                i = a.n(n),
                r = a("./node_modules/react/index.js"),
                o = a.n(r),
                s = a("./app/component/IconWithIcon.js"),
                l = a("./app/component/ComponentUsageExample.js"),
                c = function(e) {
                    var t = e.id,
                        a = e.img,
                        n = e.className,
                        i = e.color;
                    return o.a.createElement(s.a, {
                        id: t,
                        className: n,
                        color: i,
                        img: a,
                        subIcon: "icon-icon_caution",
                        subIconClassName: "subicon-caution"
                    })
                };
            c.displayName = "IconWithBigCaution", c.description = function() {
                return o.a.createElement(l.a, {
                    description: "Bus with caution"
                }, o.a.createElement("div", {
                    style: {
                        paddingLeft: "5px"
                    }
                }, o.a.createElement(c, {
                    className: "bus",
                    img: "icon-icon_bus"
                })))
            }, c.propTypes = {
                id: i.a.string,
                color: i.a.string,
                className: i.a.string,
                img: i.a.string.isRequired
            }, c.defaultProps = {
                id: "IconWithBigCaution-default-id",
                className: ""
            }, t.a = c
        },
        "./app/component/IconWithCaution.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/prop-types/index.js"),
                i = a.n(n),
                r = a("./node_modules/react/index.js"),
                o = a.n(r),
                s = a("./node_modules/classnames/index.js"),
                l = a.n(s),
                c = a("./app/component/ComponentUsageExample.js"),
                u = function(e) {
                    return o.a.createElement("svg", {
                        id: e.id,
                        viewBox: "0 0 40 40",
                        className: l()("icon", e.className)
                    }, o.a.createElement("use", {
                        xlinkHref: "#" + e.img
                    }), o.a.createElement("use", {
                        xlinkHref: "#icon-icon_caution",
                        transform: "scale(0.6,0.6)",
                        y: "30",
                        style: {
                            color: "white",
                            fill: "red"
                        }
                    }))
                };
            u.description = function() {
                return o.a.createElement(c.a, {
                    description: "Bus with caution"
                }, o.a.createElement(u, {
                    className: "bus",
                    img: "icon-icon_bus"
                }))
            }, u.displayName = "IconWithCaution", u.propTypes = {
                id: i.a.string,
                className: i.a.string,
                img: i.a.string.isRequired
            }, t.a = u
        },
        "./app/component/IconWithIcon.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/prop-types/index.js"),
                i = a.n(n),
                r = a("./node_modules/react/index.js"),
                o = a.n(r),
                s = a("./node_modules/react-intl/lib/index.es.js"),
                l = a("./app/component/Icon.js"),
                c = a("./app/component/ComponentUsageExample.js"),
                u = {
                    fontSize: "65%",
                    position: "absolute",
                    bottom: "-1px",
                    left: "-6px"
                },
                d = function(e, t) {
                    var a = e.id,
                        n = e.className,
                        i = e.img,
                        r = e.subIcon,
                        s = e.subIconClassName,
                        c = e.color,
                        d = e.badgeFill,
                        p = e.badgeText,
                        m = t.intl;
                    return o.a.createElement("span", {
                        style: {
                            position: "relative"
                        },
                        id: a,
                        className: n
                    }, o.a.createElement("span", null, o.a.createElement(l.a, {
                        badgeFill: d,
                        badgeText: p,
                        color: c,
                        img: i
                    })), r && o.a.createElement("span", {
                        className: s,
                        style: u,
                        title: m.formatMessage({
                            id: "disruption"
                        })
                    }, o.a.createElement(l.a, {
                        img: r
                    })))
                };
            d.description = function() {
                return o.a.createElement("div", null, o.a.createElement(c.a, {
                    description: "Bus with caution"
                }, o.a.createElement("div", {
                    style: {
                        paddingLeft: "5px"
                    }
                }, o.a.createElement(d, {
                    className: "bus",
                    img: "icon-icon_bus",
                    subIcon: "icon-icon_caution",
                    subIconClassName: "subicon-caution"
                }))), o.a.createElement(c.a, {
                    description: "Bus with call agency caution"
                }, o.a.createElement("div", {
                    style: {
                        paddingLeft: "5px"
                    }
                }, o.a.createElement(d, {
                    className: "bus",
                    img: "icon-icon_bus",
                    subIcon: "icon-icon_call"
                }))), o.a.createElement(c.a, {
                    description: "Bus with call agency caution, with 5em base font size"
                }, o.a.createElement("div", {
                    style: {
                        fontSize: "5em",
                        paddingLeft: "5px"
                    }
                }, o.a.createElement(d, {
                    className: "bus",
                    img: "icon-icon_bus",
                    subIcon: "icon-icon_call"
                }))))
            }, d.displayName = "IconWithIcon", d.propTypes = {
                id: i.a.string,
                className: i.a.string,
                img: i.a.string.isRequired,
                subIcon: i.a.string,
                subIconClassName: i.a.string,
                color: i.a.string,
                badgeFill: i.a.string,
                badgeText: i.a.oneOfType([i.a.string, i.a.number])
            }, d.contextTypes = {
                intl: s.d.isRequired
            }, d.defaultProps = {
                id: "",
                subIcon: "",
                className: "",
                subIconClassName: "",
                badgeFill: void 0,
                badgeText: void 0
            }, t.a = d
        },
        "./app/component/IconWithTail.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/prop-types/index.js"),
                i = a.n(n),
                r = a("./node_modules/react/index.js"),
                o = a.n(r),
                s = a("./node_modules/classnames/index.js"),
                l = a.n(s),
                c = a("./app/component/ComponentUsageExample.js"),
                u = function(e) {
                    var t = e.className,
                        a = e.id,
                        n = e.img,
                        i = e.rotate,
                        r = e.children,
                        s = e.desaturate,
                        c = void 0 !== s && s,
                        u = e.scrollIntoView,
                        d = void 0 !== u && u;
                    return o.a.createElement("span", null, o.a.createElement("svg", {
                        id: a,
                        viewBox: "0 0 80 80",
                        className: l()("icon", "tail-icon", t),
                        ref: function(e) {
                            return d && e && e.scrollIntoView()
                        }
                    }, void 0 !== i && o.a.createElement("use", {
                        filter: c ? "url(#desaturate)" : void 0,
                        xlinkHref: "#icon-icon_vehicle-live-shadow",
                        transform: "rotate(" + i + " 40 40)"
                    }), o.a.createElement("use", {
                        filter: c ? "url(#desaturate)" : void 0,
                        xlinkHref: "#" + n,
                        transform: "translate(26 26) scale(0.35)"
                    }), r))
                };
            u.displayName = "IconWithTail", u.description = function() {
                return o.a.createElement("div", null, o.a.createElement("p", null, "Shows an icon from the SVG sprite and adds blue ‘tail’."), o.a.createElement(c.a, {
                    description: "Rotate 0"
                }, o.a.createElement(u, {
                    img: "icon-icon_bus-live",
                    rotate: 0
                })), o.a.createElement(c.a, {
                    description: "Rotate 90"
                }, o.a.createElement(u, {
                    img: "icon-icon_bus-live",
                    rotate: 90
                })), o.a.createElement(c.a, {
                    description: "Rotate 90, desaturated"
                }, o.a.createElement(u, {
                    desaturate: !0,
                    img: "icon-icon_bus-live",
                    rotate: 90
                })), o.a.createElement(c.a, {
                    description: "no tail"
                }, o.a.createElement(u, {
                    desaturate: !0,
                    img: "icon-icon_bus-live"
                })))
            }, u.propTypes = {
                id: i.a.string,
                className: i.a.string,
                img: i.a.string.isRequired,
                rotate: i.a.number,
                children: i.a.element,
                desaturate: i.a.bool,
                scrollIntoView: i.a.bool
            }, t.a = u
        },
        "./app/component/LangSelect.js": function(e, t, a) {
            "use strict";
            a.d(t, "b", (function() {
                return f
            })), a.d(t, "a", (function() {
                return m
            }));
            var n = a("./node_modules/prop-types/index.js"),
                i = a.n(n),
                r = a("./node_modules/react/index.js"),
                o = a.n(r),
                s = a("./node_modules/fluxible-addons-react/connectToStores.js"),
                l = a.n(s),
                c = a("./app/component/ComponentUsageExample.js");

            function u(e, t) {
                e.dispatch("SetLanguage", t)
            }
            var d = a("./app/util/browser.js"),
                p = function(e, t) {
                    return function() {
                        return e(u, t)
                    }
                },
                m = function(e, t) {
                    var a = e.currentLanguage,
                        n = t.executeAction,
                        i = t.config;
                    return d.c ? o.a.createElement("div", {
                        key: "lang-select",
                        id: "lang-select"
                    }, i.availableLanguages.map((function(e) {
                        return function(e, t, a, n) {
                            return o.a.createElement("button", {
                                id: "lang-" + e,
                                key: e,
                                className: (a ? "selected" : "") + " noborder lang",
                                onClick: p(n, e)
                            }, e)
                        }(e, 0, e === a, n)
                    }))) : null
                };
            m.displayName = "LangSelect", m.description = function() {
                return o.a.createElement("div", null, o.a.createElement("p", null, "Language selection component, language selection comes from config."), o.a.createElement(c.a, {
                    description: ""
                }, o.a.createElement("div", {
                    style: {
                        width: "200px",
                        background: "rgb(51, 51, 51)"
                    }
                }, o.a.createElement(m, {
                    currentLanguage: "en"
                }))))
            }, m.propTypes = {
                currentLanguage: i.a.string.isRequired
            }, m.contextTypes = {
                executeAction: i.a.func.isRequired,
                config: i.a.object.isRequired
            };
            var f = l()(m, ["PreferencesStore"], (function(e) {
                return {
                    currentLanguage: e.getStore("PreferencesStore").getLanguage()
                }
            }))
        },
        "./app/component/LazilyLoad.js": function(e, t, a) {
            "use strict";
            a.d(t, "b", (function() {
                return c
            }));
            var n = a("./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js"),
                i = a("./node_modules/prop-types/index.js"),
                r = a.n(i),
                o = a("./node_modules/react/index.js"),
                s = a.n(o),
                l = function(e) {
                    function t() {
                        for (var t, a = arguments.length, n = new Array(a), i = 0; i < a; i++) n[i] = arguments[i];
                        return (t = e.call.apply(e, [this].concat(n)) || this).state = {
                            isLoaded: !1
                        }, t
                    }
                    Object(n.a)(t, e);
                    var a = t.prototype;
                    return a.componentDidMount = function() {
                        this.componentMounted = !0, this.load(this.props)
                    }, a.componentWillReceiveProps = function(e) {
                        e.modules !== this.props.modules && this.load(e)
                    }, a.componentWillUnmount = function() {
                        this.componentMounted = !1
                    }, a.load = function(e) {
                        var t = this,
                            a = e.modules;
                        this.setState({
                            isLoaded: !1
                        });
                        var n = Object.keys(a);
                        Promise.all(n.map((function(e) {
                            return a[e]()
                        }))).then((function(e) {
                            return n.reduce((function(t, a, n) {
                                return t[a] = e[n], t
                            }), {})
                        })).then((function(e) {
                            t.componentMounted && t.setState({
                                modules: e,
                                isLoaded: !0
                            })
                        }))
                    }, a.render = function() {
                        return this.state.isLoaded ? s.a.Children.only(this.props.children(this.state.modules)) : null
                    }, t
                }(s.a.Component);
            l.propTypes = {
                modules: r.a.objectOf(r.a.func.isRequired).isRequired
            }, l.propTypes = {
                children: r.a.func.isRequired
            };
            var c = function(e) {
                return e.then((function(e) {
                    return e.default
                }))
            };
            t.a = l
        },
        "./app/component/Loading.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/react/index.js"),
                i = a.n(n),
                r = a("./node_modules/prop-types/index.js"),
                o = a.n(r),
                s = function(e) {
                    return i.a.createElement("div", {
                        className: "spinner-loader"
                    }, e && e.children || null)
                };
            s.displayName = "Loading", s.propTypes = {
                children: o.a.node
            }, t.a = s
        },
        "./app/component/LoadingPage.js": function(e, t, a) {
            "use strict";
            a.d(t, "a", (function() {
                return o
            }));
            var n = a("./node_modules/react/index.js"),
                i = a.n(n),
                r = a("./app/component/Loading.js");

            function o() {
                return i.a.createElement("div", {
                    style: {
                        minHeight: 100
                    }
                }, i.a.createElement(r.a, null))
            }
        },
        "./app/component/MainMenuContainer.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/@babel/runtime/helpers/esm/extends.js"),
                i = a("./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js"),
                r = a("./node_modules/prop-types/index.js"),
                o = a.n(r),
                s = a("./node_modules/react/index.js"),
                l = a.n(s),
                c = a("./node_modules/react-intl/lib/index.es.js"),
                u = a("./node_modules/react-router/es/index.js"),
                d = a("./app/component/ComponentUsageExample.js"),
                p = a("./app/component/Icon.js"),
                m = a("./app/component/LazilyLoad.js"),
                f = function(e) {
                    function t() {
                        for (var t, i = arguments.length, r = new Array(i), o = 0; o < i; o++) r[o] = arguments[o];
                        return (t = e.call.apply(e, [this].concat(r)) || this).onRequestChange = function(e) {
                            return t.internalSetOffcanvas(e)
                        }, t.getOffcanvasState = function() {
                            return null != t.context.location.state && null != t.context.location.state.offcanvasVisible && t.context.location.state.offcanvasVisible
                        }, t.toggleOffcanvas = function() {
                            return t.internalSetOffcanvas(!t.getOffcanvasState())
                        }, t.internalSetOffcanvas = function(e) {
                            null != t.context.piwik && t.context.piwik.trackEvent("ItinerarySettings", "ExtraSettingsPanelClick", e ? "ExtraSettingsPanelOpen" : "ExtraSettingsPanelClose"), e ? t.context.router.push(Object(n.a)({}, t.context.location, {
                                state: Object(n.a)({}, t.context.location.state, {
                                    offcanvasVisible: e
                                })
                            })) : t.context.router.goBack()
                        }, t.mainMenuModules = {
                            Drawer: function() {
                                return Object(m.b)(a.e(0).then(a.t.bind(null, "./node_modules/material-ui/Drawer/index.js", 7)))
                            },
                            MainMenu: function() {
                                return Object(m.b)(a.e(4).then(a.bind(null, "./app/component/MainMenu.js")))
                            }
                        }, t.render = function() {
                            var e = t.getOffcanvasState() || t.props.isOpen,
                                a = t.props.isOpen;
                            return l.a.createElement(l.a.Fragment, null, l.a.createElement(m.a, {
                                modules: t.mainMenuModules
                            }, (function(n) {
                                var i = n.Drawer,
                                    r = n.MainMenu;
                                return l.a.createElement(i, {
                                    className: "offcanvas",
                                    disableSwipeToOpen: !0,
                                    docked: !1,
                                    open: e,
                                    openSecondary: !0,
                                    onRequestChange: t.onRequestChange,
                                    style: {
                                        position: "absolute"
                                    }
                                }, l.a.createElement(r, {
                                    toggleVisibility: t.toggleOffcanvas,
                                    showDisruptionInfo: e && !a,
                                    visible: e,
                                    homeUrl: t.props.homeUrl
                                }))
                            })), t.context.config.mainMenu.show ? l.a.createElement("div", {
                                className: "icon-holder cursor-pointer main-menu-toggle"
                            }, l.a.createElement("button", {
                                "aria-label": t.context.intl.formatMessage({
                                    id: "main-menu-label-open",
                                    defaultMessage: "Open the main menu"
                                }),
                                onClick: t.toggleOffcanvas,
                                className: "noborder cursor-pointer"
                            }, l.a.createElement(p.a, {
                                img: "icon-icon_menu",
                                className: "icon"
                            }))) : null)
                        }, t
                    }
                    return Object(i.a)(t, e), t
                }(s.Component);
            f.contextTypes = {
                executeAction: o.a.func.isRequired,
                location: o.a.object.isRequired,
                piwik: o.a.object,
                router: u.routerShape.isRequired,
                intl: c.d.isRequired,
                config: o.a.object.isRequired
            }, f.propTypes = {
                homeUrl: o.a.string.isRequired,
                isOpen: o.a.bool
            }, f.defaultProps = {
                isOpen: !1
            }, f.description = l.a.createElement(d.a, {
                isFullscreen: !0
            }, l.a.createElement(f, {
                homeUrl: "",
                isOpen: !0
            })), t.a = f
        },
        "./app/component/MessageBar.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js"),
                i = a("./node_modules/prop-types/index.js"),
                r = a.n(i),
                o = a("./node_modules/react/index.js"),
                s = a.n(o),
                l = a("./node_modules/fluxible-addons-react/connectToStores.js"),
                c = a.n(l),
                u = a("./node_modules/react-swipeable-views/lib/index.js"),
                d = a.n(u),
                p = a("./node_modules/material-ui/Tabs/index.js"),
                m = a("./node_modules/react-intl/lib/index.es.js");

            function f(e, t) {
                e.dispatch("MarkMessageAsRead", t)
            }
            var g = a("./app/util/browser.js"),
                h = a("./app/component/Icon.js"),
                b = [function(e, t) {
                    return "heading" === e.type ? s.a.createElement("h3", {
                        key: t + "-heading"
                    }, e.content) : null
                }, function(e, t) {
                    return "text" === e.type ? e.content : null
                }, function(e, t) {
                    return "a" === e.type ? s.a.createElement("a", {
                        key: t + "-link",
                        href: e.href
                    }, e.content) : null
                }],
                y = function(e) {
                    var t = e.content,
                        a = e.onMaximize;
                    return s.a.createElement("div", {
                        tabIndex: 0,
                        role: "button",
                        onClick: a
                    }, function(e) {
                        return e.map((function(e, t) {
                            return b.map((function(a) {
                                return a(e, t)
                            }))
                        }))
                    }(t))
                };
            y.propTypes = {
                content: r.a.array,
                onMaximize: r.a.func.isRequired
            };
            var v = y,
                k = function(e) {
                    function t() {
                        for (var t, a = arguments.length, n = new Array(a), i = 0; i < a; i++) n[i] = arguments[i];
                        return (t = e.call.apply(e, [this].concat(n)) || this).state = {
                            slideIndex: 0,
                            maximized: !1
                        }, t.componentDidMount = function() {
                            return t.setState({
                                ready: !0
                            })
                        }, t.getTabContent = function() {
                            return t.validMessages().map((function(e) {
                                return s.a.createElement(v, {
                                    key: e.id,
                                    onMaximize: t.maximize,
                                    content: e.content[t.props.lang] || e.content.fi
                                })
                            }))
                        }, t.getTabMarker = function(e) {
                            return s.a.createElement("span", {
                                style: {
                                    color: e === t.state.slideIndex ? "#007ac9" : "#ddd",
                                    height: "18px",
                                    position: "absolute"
                                },
                                title: t.context.intl.formatMessage({
                                    id: "messagebar-label-page",
                                    defaultMessage: "Page"
                                }) + " " + (e + 1)
                            }, "•")
                        }, t.getTabs = function() {
                            var e = t.validMessages();
                            return e.map((function(a, n) {
                                return s.a.createElement(p.Tab, {
                                    key: a.id,
                                    selected: n === t.state.slideIndex,
                                    icon: e.length > 1 ? t.getTabMarker(n) : null,
                                    value: n,
                                    style: {
                                        margin: "2px 0 0 0"
                                    },
                                    buttonStyle: {
                                        height: "18px"
                                    }
                                })
                            }))
                        }, t.maximize = function() {
                            t.setState({
                                maximized: !0
                            })
                        }, t.validMessages = function() {
                            return t.props.messages.filter((function(e) {
                                return !!(Array.isArray(e.content[t.props.lang]) && e.content[t.props.lang].length > 0 && e.content[t.props.lang][0].content) || (console.error("Message " + e.id + " has no translation for " + t.props.lang), !1)
                            }))
                        }, t.handleChange = function(e) {
                            t.setState({
                                slideIndex: e
                            })
                        }, t.handleClose = function() {
                            var e = t.validMessages(),
                                a = t.state.slideIndex,
                                n = e[a].id,
                                i = g.f ? 600 : 0;
                            setTimeout((function() {
                                return t.context.executeAction(f, n)
                            }), i), a > 0 && (a -= 1, t.handleChange(a))
                        }, t
                    }
                    return Object(n.a)(t, e), t.prototype.render = function() {
                        if (!this.state.ready) return null;
                        var e = this.validMessages();
                        if (e.length > 0) {
                            var t = Math.min(this.state.slideIndex, e.length - 1),
                                a = e[t],
                                n = a.type || "info",
                                i = "icon-icon_" + (a.icon || "info");
                            return s.a.createElement("section", {
                                id: "messageBar",
                                role: "banner",
                                className: "message-bar flex-horizontal"
                            }, s.a.createElement("div", {
                                className: "banner-container"
                            }, s.a.createElement(h.a, {
                                img: i,
                                className: "message-icon"
                            }), s.a.createElement("div", {
                                className: "flex-grow message-bar-" + n
                            }, s.a.createElement(d.a, {
                                index: t,
                                onChangeIndex: this.handleChange,
                                className: this.state.maximized ? "" : "message-bar-fade",
                                containerStyle: {
                                    maxHeight: this.state.maximized ? "400px" : "100px",
                                    transition: "max-height 300ms"
                                },
                                slideStyle: {
                                    maxHeight: this.state.maximized ? "400px" : "100px",
                                    transition: "max-height 300ms",
                                    padding: "10px 10px 0px 10px",
                                    overflow: "hidden",
                                    background: "#fff"
                                }
                            }, this.getTabContent()), s.a.createElement(p.Tabs, {
                                onChange: this.handleChange,
                                value: t,
                                tabItemContainerStyle: {
                                    backgroundColor: "#fff",
                                    height: "18px",
                                    width: "60px",
                                    marginLeft: "auto",
                                    marginRight: "auto"
                                },
                                inkBarStyle: {
                                    display: "none"
                                }
                            }, this.getTabs())), s.a.createElement("div", null, s.a.createElement("button", {
                                id: "close-message-bar",
                                title: this.context.intl.formatMessage({
                                    id: "messagebar-label-close-message-bar",
                                    defaultMessage: "Close banner"
                                }),
                                "aria-label": this.context.intl.formatMessage({
                                    id: "messagebar-label-close-message-bar",
                                    defaultMessage: "Close banner"
                                }),
                                onClick: this.handleClose,
                                className: "noborder close-button cursor-pointer"
                            }, s.a.createElement(h.a, {
                                img: "icon-icon_close",
                                className: "close"
                            })))))
                        }
                        return null
                    }, t
                }(o.Component);
            k.contextTypes = {
                getStore: r.a.func.isRequired,
                intl: m.d.isRequired,
                executeAction: r.a.func.isRequired
            }, k.propTypes = {
                lang: r.a.string.isRequired,
                messages: r.a.array.isRequired
            };
            t.a = c()(k, ["MessageStore", "PreferencesStore"], (function(e) {
                return {
                    lang: e.getStore("PreferencesStore").getLanguage(),
                    messages: e.getStore("MessageStore").getMessages()
                }
            }))
        },
        "./app/component/MobileView.js": function(e, t, a) {
            "use strict";
            a.d(t, "a", (function() {
                return s
            }));
            var n = a("./node_modules/prop-types/index.js"),
                i = a.n(n),
                r = a("./node_modules/react/index.js"),
                o = a.n(r);

            function s(e) {
                var t = e.header,
                    a = e.map,
                    n = e.content;
                return o.a.createElement("div", {
                    className: "mobile"
                }, t, a, n)
            }
            s.propTypes = {
                header: i.a.node,
                map: i.a.node,
                content: i.a.node
            }
        },
        "./app/component/Modal.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js"),
                i = a("./node_modules/prop-types/index.js"),
                r = a.n(i),
                o = a("./node_modules/react/index.js"),
                s = a.n(o),
                l = a("./node_modules/classnames/index.js"),
                c = a.n(l),
                u = a("./app/component/Icon.js"),
                d = function(e) {
                    function t() {
                        for (var t, a = arguments.length, n = new Array(a), i = 0; i < a; i++) n[i] = arguments[i];
                        return (t = e.call.apply(e, [this].concat(n)) || this).stopClickPropagation = function(e) {
                            !0 !== t.props.allowClicks && (e.preventDefault(), e.stopPropagation())
                        }, t
                    }
                    return Object(n.a)(t, e), t.prototype.render = function() {
                        var e = {
                            "is-active": this.props.open
                        };
                        return s.a.createElement("div", {
                            className: c()("modal-overlay", "cursor-pointer", e, this.props.className),
                            style: {
                                zIndex: 1400
                            },
                            onClick: this.props.toggleVisibility
                        }, s.a.createElement("div", {
                            "data-closable": !0,
                            className: c()({
                                modal: !0,
                                "small-11": !0,
                                column: !0
                            }, e),
                            onClick: this.stopClickPropagation
                        }, s.a.createElement("div", {
                            className: "row"
                        }, s.a.createElement("h3", {
                            className: "left"
                        }, this.props.title), s.a.createElement("div", {
                            className: "small-1 columns right text-right modal-top-nav"
                        }, s.a.createElement("a", {
                            onClick: this.props.toggleVisibility,
                            className: "close-button cursor-pointer"
                        }, s.a.createElement(u.a, {
                            img: "icon-icon_close",
                            pointerEvents: !0
                        })))), s.a.createElement("div", {
                            className: "modal-wrapper"
                        }, s.a.createElement("div", {
                            className: "modal-content momentum-scroll"
                        }, this.props.children))))
                    }, t
                }(s.a.Component);
            d.propTypes = {
                allowClicks: r.a.bool,
                children: r.a.node,
                open: r.a.bool,
                title: r.a.node,
                toggleVisibility: r.a.func.isRequired,
                className: r.a.string
            }, d.defaultProps = {
                className: ""
            }, t.a = d
        },
        "./app/component/NavbarLinks.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/prop-types/index.js"),
                i = a.n(n),
                r = a("./node_modules/react/index.js"),
                o = a.n(r),
                s = a("./node_modules/react-relay/classic.js"),
                l = a.n(s),
                c = a("./app/component/ComponentUsageExample.js"),
                u = a("./app/util/browser.js"),
                d = a("./node_modules/@babel/runtime/helpers/esm/extends.js"),
                p = a("./node_modules/react-router/es/index.js"),
                m = a("./node_modules/fluxible-addons-react/connectToStores.js"),
                f = a.n(m),
                g = a("./app/component/Modal.js");

            function h(e, t) {
                var a = e.currentLanguage,
                    n = e.root.linkMenu,
                    i = t.router,
                    r = t.location,
                    s = t.config.defaultLanguage,
                    l = function() {
                        return !!r.state && r.state.navbarLinksOpen
                    };
                if (!l()) return null;
                var c = function(e) {
                    window.open(e.target.href, e.target.target).focus()
                };
                return o.a.createElement(g.a, {
                    open: !0,
                    title: n.title[a] || n.title[s] || "",
                    toggleVisibility: function() {
                        l() ? i.goBack() : i.push(Object(d.a)({}, r, {
                            state: Object(d.a)({}, r.state, {
                                navbarLinksOpen: !0
                            })
                        }))
                    }
                }, n.body && o.a.createElement("p", null, n.body[a] || n.body[s] || ""), n.items && o.a.createElement("ul", {
                    className: "navbar-links-list"
                }, n.items.map((function(e) {
                    return o.a.createElement("li", {
                        key: e.menuItemId
                    }, o.a.createElement("a", {
                        href: e.url[a] || e.url[s] || "",
                        target: "_blank",
                        rel: "noopener noreferrer",
                        onClick: c
                    }, e.title[a] || e.title[s] || ""))
                }))))
            }
            h.propTypes = {
                currentLanguage: i.a.string,
                root: i.a.shape({
                    linkMenu: i.a.object
                })
            }, h.defaultProps = {
                currentLanguage: "",
                root: {
                    linkMenu: {}
                }
            }, h.contextTypes = {
                router: p.routerShape.isRequired,
                location: p.locationShape.isRequired,
                config: i.a.shape({
                    defaultLanguage: i.a.string
                }).isRequired
            };
            var b = l.a.createContainer(f()(h, ["PreferencesStore"], (function(e) {
                return {
                    currentLanguage: e.getStore("PreferencesStore").getLanguage()
                }
            })), {
                fragments: {
                    root: function() {
                        return {
                            children: [{
                                children: [{
                                    fieldName: "menuId",
                                    kind: "Field",
                                    metadata: {},
                                    type: "String"
                                }, {
                                    children: [{
                                        fieldName: "fi",
                                        kind: "Field",
                                        metadata: {},
                                        type: "String"
                                    }, {
                                        fieldName: "sv",
                                        kind: "Field",
                                        metadata: {},
                                        type: "String"
                                    }, {
                                        fieldName: "en",
                                        kind: "Field",
                                        metadata: {},
                                        type: "String"
                                    }],
                                    fieldName: "title",
                                    kind: "Field",
                                    metadata: {
                                        canHaveSubselections: !0
                                    },
                                    type: "LocalizedString"
                                }, {
                                    children: [{
                                        fieldName: "fi",
                                        kind: "Field",
                                        metadata: {},
                                        type: "String"
                                    }, {
                                        fieldName: "sv",
                                        kind: "Field",
                                        metadata: {},
                                        type: "String"
                                    }, {
                                        fieldName: "en",
                                        kind: "Field",
                                        metadata: {},
                                        type: "String"
                                    }],
                                    fieldName: "body",
                                    kind: "Field",
                                    metadata: {
                                        canHaveSubselections: !0
                                    },
                                    type: "LocalizedString"
                                }, {
                                    children: [{
                                        fieldName: "menuItemId",
                                        kind: "Field",
                                        metadata: {},
                                        type: "String"
                                    }, {
                                        children: [{
                                            fieldName: "fi",
                                            kind: "Field",
                                            metadata: {},
                                            type: "String"
                                        }, {
                                            fieldName: "sv",
                                            kind: "Field",
                                            metadata: {},
                                            type: "String"
                                        }, {
                                            fieldName: "en",
                                            kind: "Field",
                                            metadata: {},
                                            type: "String"
                                        }],
                                        fieldName: "title",
                                        kind: "Field",
                                        metadata: {
                                            canHaveSubselections: !0
                                        },
                                        type: "LocalizedString"
                                    }, {
                                        children: [{
                                            fieldName: "fi",
                                            kind: "Field",
                                            metadata: {},
                                            type: "String"
                                        }, {
                                            fieldName: "sv",
                                            kind: "Field",
                                            metadata: {},
                                            type: "String"
                                        }, {
                                            fieldName: "en",
                                            kind: "Field",
                                            metadata: {},
                                            type: "String"
                                        }],
                                        fieldName: "url",
                                        kind: "Field",
                                        metadata: {
                                            canHaveSubselections: !0
                                        },
                                        type: "LocalizedString"
                                    }, {
                                        fieldName: "id",
                                        kind: "Field",
                                        metadata: {
                                            isGenerated: !0,
                                            isRequisite: !0
                                        },
                                        type: "ID"
                                    }],
                                    fieldName: "items",
                                    kind: "Field",
                                    metadata: {
                                        canHaveSubselections: !0,
                                        isPlural: !0
                                    },
                                    type: "CmsMenuItem"
                                }, {
                                    fieldName: "id",
                                    kind: "Field",
                                    metadata: {
                                        isGenerated: !0,
                                        isRequisite: !0
                                    },
                                    type: "ID"
                                }],
                                fieldName: "linkMenu",
                                kind: "Field",
                                metadata: {
                                    canHaveSubselections: !0,
                                    inferredRootCallName: "node",
                                    inferredPrimaryKey: "id"
                                },
                                type: "CmsLinkMenu"
                            }],
                            id: l.a.QL.__id(),
                            kind: "Fragment",
                            metadata: {},
                            name: "NavbarLinksContent_RootRelayQL",
                            type: "Query"
                        }
                    }
                }
            });

            function y(e) {
                return e && e.isBrowser || u.c ? o.a.createElement(l.a.RootContainer, {
                    Component: b,
                    route: {
                        name: "NavbarLinksRoute",
                        queries: {
                            root: function(e) {
                                return t = e.getFragment("root"), {
                                    children: [].concat.apply([], [l.a.QL.__frag(t)]),
                                    fieldName: "viewer",
                                    kind: "Query",
                                    metadata: {},
                                    name: "NavbarLinks",
                                    type: "Query"
                                };
                                var t
                            }
                        },
                        params: {}
                    }
                }) : null
            }
            y.propTypes = {
                isBrowser: i.a.bool
            }, y.defaultProps = {
                isBrowser: !1
            }, y.description = function() {
                return o.a.createElement("div", null, o.a.createElement("p", null, "Modal that shows links."), o.a.createElement(c.a, null, o.a.createElement(y, null)))
            };
            t.a = y
        },
        "./app/component/NearbyTabLabel.js": function(e, t, a) {
            "use strict";
            a.d(t, "a", (function() {
                return c
            }));
            var n = a("./node_modules/prop-types/index.js"),
                i = a.n(n),
                r = a("./node_modules/react/index.js"),
                o = a.n(r),
                s = a("./node_modules/react-intl/lib/index.es.js"),
                l = a("./app/component/Icon.js");

            function c(e) {
                var t = e.classes,
                    a = e.onClick;
                return o.a.createElement("li", {
                    className: t,
                    onClick: a,
                    role: "button"
                }, o.a.createElement(l.a, {
                    className: "prefix-icon nearby-icon",
                    img: "icon-icon_nearby"
                }), o.a.createElement(s.a, {
                    id: "near-you",
                    defaultMessage: "Near you"
                }))
            }
            c.propTypes = {
                classes: i.a.string.isRequired,
                onClick: i.a.func.isRequired
            }
        },
        "./app/component/NetworkError.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/prop-types/index.js"),
                i = a.n(n),
                r = a("./node_modules/react/index.js"),
                o = a.n(r),
                s = a("./node_modules/react-intl/lib/index.es.js"),
                l = a("./node_modules/react-router/es/index.js"),
                c = a("./app/component/Icon.js"),
                u = function(e, t) {
                    var a = e.retry,
                        n = t.location;
                    return o.a.createElement("div", {
                        className: "page-not-found"
                    }, o.a.createElement(c.a, {
                        img: "icon-icon_error_page_not_found"
                    }), o.a.createElement("p", null, o.a.createElement(s.a, {
                        id: "network-error",
                        defaultMessage: "There was a network error"
                    })), o.a.createElement("p", null, o.a.createElement(l.Link, {
                        to: n,
                        onClick: a
                    }, o.a.createElement(s.a, {
                        id: "try-again",
                        defaultMessage: "Try again ›"
                    }))))
                };
            u.propTypes = {
                retry: i.a.func.isRequired
            }, u.contextTypes = {
                location: l.locationShape.isRequired
            }, t.a = u
        },
        "./app/component/NextDeparturesListHeader.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/react/index.js"),
                i = a.n(n),
                r = a("./node_modules/react-intl/lib/index.es.js"),
                o = a("./app/component/ComponentUsageExample.js"),
                s = function() {
                    return i.a.createElement("tr", {
                        className: "header-tr"
                    }, i.a.createElement("th", {
                        className: "th-to-stop"
                    }, i.a.createElement(r.a, {
                        id: "to-stop",
                        defaultMessage: "To stop"
                    })), i.a.createElement("th", {
                        className: "th-route"
                    }, i.a.createElement(r.a, {
                        id: "route",
                        defaultMessage: "Route"
                    })), i.a.createElement("th", {
                        className: "th-destination"
                    }, i.a.createElement(r.a, {
                        id: "destination",
                        defaultMessage: "Destination"
                    })), i.a.createElement("th", {
                        className: "th-leaves"
                    }, i.a.createElement(r.a, {
                        id: "leaves",
                        defaultMessage: "Leaves"
                    })), i.a.createElement("th", {
                        className: "th-next"
                    }, i.a.createElement(r.a, {
                        id: "next",
                        defaultMessage: "Next"
                    })))
                };
            s.displayName = "NextDeparturesListHeader", s.description = function() {
                return i.a.createElement("div", null, i.a.createElement(o.a, null, i.a.createElement(s, null)))
            }, t.a = s
        },
        "./app/component/NoFavouriteLocations.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/react/index.js"),
                i = a.n(n),
                r = a("./node_modules/react-intl/lib/index.es.js"),
                o = a("./app/component/ComponentUsageExample.js"),
                s = a("./app/component/EmptyFavouriteLocationSlot.js"),
                l = function() {
                    return i.a.createElement("div", {
                        id: "no-favourites-container",
                        className: "border-bottom"
                    }, i.a.createElement(s.a, {
                        index: 0
                    }), i.a.createElement("div", {
                        id: "no-favourites-container-text"
                    }, i.a.createElement(r.a, {
                        id: "no-favourite-locations",
                        defaultMessage: "Nothing here to see."
                    })))
                };
            l.displayName = "NoFavouriteLocations", l.description = function() {
                return i.a.createElement("div", null, i.a.createElement("p", null, "Display usage hint for users with no favourites saved"), i.a.createElement(o.a, null, i.a.createElement(l, null)))
            }, t.a = l
        },
        "./app/component/PageFooter.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/prop-types/index.js"),
                i = a.n(n),
                r = a("./node_modules/react/index.js"),
                o = a.n(r),
                s = a("./node_modules/fluxible-addons-react/connectToStores.js"),
                l = a.n(s),
                c = a("./app/component/ComponentUsageExample.js"),
                u = a("./app/component/FooterItem.js"),
                d = function(e) {
                    var t = e.content,
                        a = e.currentLanguage,
                        n = e.ariaLabel;
                    return o.a.createElement("nav", {
                        id: "page-footer",
                        "aria-label": n
                    }, t.map((function(e, t) {
                        return function(e, t, a) {
                            return e.languages && e.languages.length && !e.languages.includes(t) ? null : 0 === Object.keys(e).length ? o.a.createElement("span", {
                                className: "footer-separator",
                                key: a
                            }) : o.a.createElement(u.a, Object.assign({
                                key: e.label || e.name
                            }, e))
                        }(e, a, t)
                    })))
                };
            d.propTypes = {
                currentLanguage: i.a.string.isRequired,
                content: i.a.arrayOf(i.a.shape(u.a.propTypes)),
                ariaLabel: i.a.string
            }, d.defaultProps = {
                content: [],
                ariaLabel: ""
            }, d.displayName = "PageFooter", d.description = function() {
                return o.a.createElement("div", null, o.a.createElement("p", null, "Front page footer for large display"), o.a.createElement(c.a, {
                    description: ""
                }, o.a.createElement(d, {
                    currentLanguage: "en",
                    content: [{
                        name: "Feedback",
                        icon: "icon-icon_speech-bubble",
                        route: "/"
                    }, {}, {
                        name: "Print",
                        icon: "icon-icon_print",
                        route: "/"
                    }, {}, {
                        name: "Home",
                        icon: "icon-icon_place",
                        route: "/"
                    }]
                })))
            }, t.a = l()(d, ["PreferencesStore"], (function(e) {
                return {
                    currentLanguage: e.getStore("PreferencesStore").getLanguage()
                }
            }))
        },
        "./app/component/RouteDestination.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/prop-types/index.js"),
                i = a.n(n),
                r = a("./node_modules/react/index.js"),
                o = a.n(r),
                s = a("./node_modules/react-intl/lib/index.es.js"),
                l = a("./node_modules/classnames/index.js"),
                c = a.n(l),
                u = a("./app/component/ComponentUsageExample.js"),
                d = a("./app/component/ExampleData.js");

            function p(e, t) {
                var a;
                if (e.isArrival) {
                    var n = t.intl.formatMessage({
                        id: "route-destination-arrives",
                        defaultMessage: "Arrives / Terminus"
                    });
                    a = o.a.createElement("span", {
                        className: "destination arrival"
                    }, o.a.createElement("span", {
                        className: c()("last-stop-icon", e.mode.toLowerCase())
                    }), o.a.createElement("span", {
                        title: n
                    }, n))
                } else a = o.a.createElement("span", {
                    className: "destination",
                    title: e.destination
                }, e.destination);
                return o.a.createElement("span", {
                    className: c()("route-destination", e.className)
                }, a)
            }
            p.description = function() {
                return o.a.createElement("div", null, o.a.createElement("p", null, "Display the destination of the route (headsign)"), o.a.createElement(u.a, null, o.a.createElement(p, {
                    mode: d.g.pattern.route.mode,
                    destination: d.g.pattern.headsign || d.g.pattern.route.longName
                })), o.a.createElement(u.a, {
                    description: "isArrival true"
                }, o.a.createElement(p, {
                    mode: d.g.pattern.route.mode,
                    destination: d.g.pattern.headsign || d.g.pattern.route.longName,
                    isArrival: !0
                })))
            }, p.propTypes = {
                mode: i.a.string,
                destination: i.a.string,
                className: i.a.string,
                isArrival: i.a.bool
            }, p.contextTypes = {
                intl: s.d.isRequired
            }, p.displayName = "RouteDestination", t.a = p
        },
        "./app/component/RouteNumber.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/prop-types/index.js"),
                i = a.n(n),
                r = a("./node_modules/react/index.js"),
                o = a.n(r),
                s = a("./node_modules/classnames/index.js"),
                l = a.n(s),
                c = a("./node_modules/react-intl/lib/index.es.js"),
                u = a("./app/component/IconWithBigCaution.js"),
                d = a("./app/component/IconWithIcon.js"),
                p = a("./app/component/ComponentUsageExample.js"),
                m = a("./app/component/ExampleData.js");

            function f(e, t) {
                var a = e.mode.toLowerCase(),
                    n = e.color;
                "bicycle" !== a && "car" !== a || (a += "-withoutBox");
                var i = e.text && e.text.length >= 6,
                    r = function(e, t, i, r) {
                        return e ? o.a.createElement(d.a, {
                            color: n,
                            className: a + " call",
                            img: "icon-icon_" + a,
                            subIcon: "icon-icon_call"
                        }) : t ? o.a.createElement(u.a, {
                            color: n,
                            className: a,
                            img: "icon-icon_" + a
                        }) : o.a.createElement(d.a, {
                            badgeFill: i,
                            badgeText: r,
                            color: n,
                            className: a,
                            img: "icon-icon_" + a,
                            subIcon: ""
                        })
                    };
                return o.a.createElement("span", {
                    className: l()("route-number", {
                        "overflow-fade": i && e.fadeLong,
                        vertical: e.vertical
                    })
                }, o.a.createElement("span", {
                    className: l()("vcenter-children", e.className),
                    "aria-label": t.intl.formatMessage({
                        id: e.mode.toLowerCase(),
                        defaultMessage: "Vehicle"
                    })
                }, !0 === e.vertical ? o.a.createElement("div", {
                    className: "special-icon " + a
                }, r(e.isCallAgency, e.hasDisruption, e.badgeFill, e.badgeText)) : r(e.isCallAgency, e.hasDisruption), e.withBar && o.a.createElement("div", {
                    className: "bar-container"
                }, o.a.createElement("div", {
                    style: {
                        color: "call" === a ? "white" : n || "currentColor"
                    },
                    className: l()("bar", a)
                }, o.a.createElement("div", {
                    className: "bar-inner"
                })))), e.text && (!1 === e.vertical ? o.a.createElement("span", {
                    style: {
                        color: e.color ? e.color : null
                    },
                    className: l()("vehicle-number", a, {
                        "overflow-fade": i && e.fadeLong,
                        long: i
                    })
                }, e.text) : o.a.createElement("div", {
                    className: "vehicle-number-container-v"
                }, o.a.createElement("span", {
                    style: {
                        color: e.color ? e.color : null
                    },
                    className: l()("vehicle-number", a, {
                        "overflow-fade": i && e.fadeLong,
                        long: i
                    })
                }, e.text))))
            }
            f.description = function() {
                return o.a.createElement("div", null, o.a.createElement("p", null, "Display mode icon and route number with mode color"), o.a.createElement(p.a, null, o.a.createElement(f, {
                    mode: m.g.pattern.route.mode,
                    text: m.g.pattern.route.shortName
                })), o.a.createElement(p.a, {
                    description: "with disruption"
                }, o.a.createElement("div", {
                    style: {
                        paddingLeft: "5px"
                    }
                }, o.a.createElement(f, {
                    mode: m.g.pattern.route.mode,
                    text: m.g.pattern.route.shortName,
                    hasDisruption: !0
                }))), o.a.createElement(p.a, {
                    description: "with callAgency"
                }, o.a.createElement("div", {
                    style: {
                        paddingLeft: "5px"
                    }
                }, o.a.createElement(f, {
                    mode: m.g.pattern.route.mode,
                    text: m.g.pattern.route.shortName,
                    isCallAgency: !0
                }))), o.a.createElement(p.a, {
                    description: "in vertical configuration"
                }, o.a.createElement(f, {
                    mode: m.g.pattern.route.mode,
                    text: m.g.pattern.route.shortName,
                    vertical: !0
                })), o.a.createElement(p.a, {
                    description: "in vertical configuration with disruption"
                }, o.a.createElement("div", {
                    style: {
                        paddingLeft: "5px"
                    }
                }, o.a.createElement(f, {
                    mode: m.g.pattern.route.mode,
                    text: m.g.pattern.route.shortName,
                    hasDisruption: !0,
                    vertical: !0
                }))), o.a.createElement(p.a, {
                    description: "in vertical configuration with callAgency"
                }, o.a.createElement("div", {
                    style: {
                        paddingLeft: "5px"
                    }
                }, o.a.createElement(f, {
                    mode: m.g.pattern.route.mode,
                    text: m.g.pattern.route.shortName,
                    isCallAgency: !0,
                    vertical: !0
                }))))
            }, f.propTypes = {
                mode: i.a.string.isRequired,
                color: i.a.string,
                text: i.a.node,
                vertical: i.a.bool,
                className: i.a.string,
                hasDisruption: i.a.bool,
                fadeLong: i.a.bool,
                withBar: i.a.bool,
                isCallAgency: i.a.bool,
                badgeFill: i.a.string,
                badgeText: i.a.oneOfType([i.a.string, i.a.number])
            }, f.defaultProps = {
                badgeFill: void 0,
                badgeText: void 0,
                className: "",
                vertical: !1,
                hasDisruption: !1,
                fadeLong: !1,
                text: "",
                withBar: !1,
                isCallAgency: !1
            }, f.contextTypes = {
                intl: c.d.isRequired
            }, f.displayName = "RouteNumber", t.a = f
        },
        "./app/component/RouteNumberContainer.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"),
                i = a("./node_modules/prop-types/index.js"),
                r = a.n(i),
                o = a("./node_modules/react/index.js"),
                s = a.n(o),
                l = a("./node_modules/lodash-es/get.js"),
                c = a("./app/component/RouteNumber.js"),
                u = ["className", "route", "isCallAgency"],
                d = function(e, t) {
                    var a = Object(l.a)(t, "agency.show", !1);
                    return e.shortName ? e.shortName : a && e.agency ? e.agency.name : ""
                },
                p = function(e, t) {
                    var a = e.className,
                        i = e.route,
                        r = e.isCallAgency,
                        o = Object(n.a)(e, u),
                        l = t.config;
                    return i && s.a.createElement(c.a, Object.assign({
                        className: a,
                        isCallAgency: r || 715 === i.type,
                        color: i.color ? "#" + i.color : null,
                        hasDisruption: o.hasDisruption,
                        mode: i.mode,
                        text: d(i, l)
                    }, o))
                };
            p.propTypes = {
                route: r.a.object.isRequired,
                vertical: r.a.bool,
                className: r.a.string,
                hasDisruption: r.a.bool,
                fadeLong: r.a.bool
            }, p.defaultProps = {
                className: ""
            }, p.contextTypes = {
                config: r.a.object.isRequired
            }, p.displayName = "RouteNumberContainer", t.a = p
        },
        "./app/component/Select.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js"),
                i = a("./node_modules/prop-types/index.js"),
                r = a.n(i),
                o = a("./node_modules/react/index.js"),
                s = a.n(o),
                l = function(e) {
                    function t() {
                        return e.apply(this, arguments) || this
                    }
                    return Object(n.a)(t, e), t.getOptionTags = function(e) {
                        return e.map((function(e) {
                            return s.a.createElement("option", {
                                key: e.displayName + e.value,
                                value: e.value
                            }, e.displayNameObject ? e.displayNameObject : e.displayName)
                        }))
                    }, t.prototype.render = function() {
                        var e = this.props.headerText;
                        return s.a.createElement(s.a.Fragment, null, e && s.a.createElement("h5", null, e), s.a.createElement("select", {
                            onChange: this.props.onSelectChange,
                            value: this.props.selected,
                            "aria-label": this.props.ariaLabel
                        }, t.getOptionTags(this.props.options)))
                    }, t
                }(s.a.Component);
            l.propTypes = {
                onSelectChange: r.a.func.isRequired,
                headerText: r.a.string,
                selected: r.a.string,
                ariaLabel: r.a.string,
                options: r.a.arrayOf(r.a.shape({
                    displayName: r.a.string.isRequired,
                    displayNameObject: r.a.oneOfType([r.a.node, r.a.string]),
                    value: r.a.oneOfType([r.a.string, r.a.number]).isRequired
                }).isRequired).isRequired
            }, l.defaultProps = {
                headerText: void 0,
                selected: void 0,
                ariaLabel: ""
            }, t.a = l
        },
        "./app/component/SelectMapLayersDialog.js": function(e, t, a) {
            "use strict";
            a.d(t, "a", (function() {
                return M
            }));
            var n = a("./node_modules/@babel/runtime/helpers/esm/extends.js"),
                i = a("./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js"),
                r = a("./node_modules/fluxible-addons-react/connectToStores.js"),
                o = a.n(r),
                s = a("./node_modules/prop-types/index.js"),
                l = a.n(s),
                c = a("./node_modules/react/index.js"),
                u = a.n(c),
                d = a("./node_modules/react-intl/lib/index.es.js"),
                p = a("./node_modules/react-router/es/index.js"),
                m = a("./node_modules/lodash-es/get.js"),
                f = a("./node_modules/classnames/index.js"),
                g = a.n(f),
                h = a("./node_modules/material-ui/Toggle/index.js"),
                b = a.n(h),
                y = a("./app/component/BubbleDialog.js"),
                v = a("./app/component/Checkbox.js"),
                k = a("./app/action/MapLayerActions.js");

            function j(e, t) {
                e.dispatch("UpdateMapLayerOptions", t)
            }
            var S = a("./app/store/MapLayerStore.js"),
                E = a("./app/store/MapLayerOptionsStore.js"),
                N = a("./app/util/withBreakpoint.js"),
                R = a("./app/util/modeUtils.js"),
                w = a("./app/component/ComponentUsageExample.js");

            function T(e, t) {
                var a = t.config,
                    n = t.intl;
                return e.isVisible ? a.mapTrackingButtons && a.mapTrackingButtons.altPosition ? u.a.createElement(b.a, {
                    label: n.formatMessage({
                        id: e.labelId,
                        defaultMessage: e.defaultMessage
                    }),
                    toggled: e.checked,
                    className: "toggle-item",
                    onClick: e.onChange,
                    rippleStyle: e.checked ? {
                        opacity: .5
                    } : {
                        color: "black"
                    }
                }) : u.a.createElement(v.a, {
                    checked: e.checked,
                    labelId: e.labelId,
                    defaultMessage: e.defaultMessage,
                    onChange: e.onChange
                }) : null
            }
            T.defaultProps = {
                isVisible: !0
            }, T.propTypes = {
                checked: l.a.bool.isRequired,
                labelId: l.a.string.isRequired,
                defaultMessage: l.a.string.isRequired,
                onChange: l.a.func.isRequired,
                isVisible: l.a.bool
            }, T.contextTypes = {
                config: l.a.object.isRequired,
                intl: d.d.isRequired
            };
            var C = function(e) {
                    function t() {
                        for (var t, a = arguments.length, i = new Array(a), r = 0; r < a; r++) i[r] = arguments[r];
                        return (t = e.call.apply(e, [this].concat(i)) || this).componentDidMount = function() {
                            var e = t.props,
                                a = e.config,
                                n = e.location,
                                i = Object(R.h)(n, a);
                            t.props.executeAction(k.g, i)
                        }, t.getHeaderId = function() {
                            var e = t.props,
                                a = e.config,
                                n = e.location,
                                i = Object(R.h)(n, a);
                            return Object(m.a)(a, "mapTrackingButtons.layers.streetModeHeader", !1) && i ? "street-mode-" + i.toLowerCase() : Object(m.a)(a, "mapTrackingButtons.layers.headerId", "select-map-layers-header")
                        }, t.updateSetting = function(e) {
                            t.props.updateMapLayers(Object(n.a)({}, t.props.mapLayers, e))
                        }, t.updateMapLayerOptions = function(e) {
                            t.props.updateMapLayerOptions(Object(n.a)({}, t.props.mapLayerOptions, e))
                        }, t.updateTimeRangeSelection = function(e) {
                            var a = Number(e),
                                i = 43200 === a,
                                r = Object(n.a)({}, t.props.mapLayerOptions.maintenanceVehicles, {
                                    brushingFor30days: i,
                                    timeRange: a
                                });
                            t.props.updateMapLayerOptions(Object(n.a)({}, t.props.mapLayerOptions, {
                                maintenanceVehicles: Object(n.a)({}, r)
                            }))
                        }, t.updateStopAndTerminalSetting = function(e) {
                            var a = t.props.mapLayers,
                                i = Object(n.a)({}, a.stop, e),
                                r = Object(n.a)({}, a.terminal, e);
                            t.updateSetting({
                                stop: i,
                                terminal: r
                            })
                        }, t.updateStopSetting = function(e) {
                            var a = Object(n.a)({}, t.props.mapLayers.stop, e);
                            t.updateSetting({
                                stop: a
                            })
                        }, t.updateTerminalSetting = function(e) {
                            var a = Object(n.a)({}, t.props.mapLayers.terminal, e);
                            t.updateSetting({
                                terminal: a
                            })
                        }, t.updateTicketSalesSetting = function(e) {
                            var a = Object(n.a)({}, t.props.mapLayers.ticketSales, e);
                            t.updateSetting({
                                ticketSales: a
                            })
                        }, t.updateBicycleRoutesSetting = function(e) {
                            var a = Object(n.a)({}, t.props.mapLayers.bicycleRoutes, e);
                            t.updateSetting({
                                bicycleRoutes: a
                            })
                        }, t.getToggleButtonTitle = function(e) {
                            var a = t.context,
                                n = a.intl,
                                i = (0, a.getStore)("PreferencesStore").getLanguage(),
                                r = n.formatMessage({
                                    id: e,
                                    defaultMessage: ""
                                }),
                                o = n.formatMessage({
                                    id: "settings",
                                    defaultMessage: "settings"
                                }).toLowerCase();
                            return "fi" === i && r.includes(" ") ? o = " -" + o : "fi" === i && r.endsWith(o.charAt(0)) ? o = "-" + o : "fi" !== i && (o = " " + o), r + o
                        }, t.renderContents = function() {
                            var e = t.props.mapLayers,
                                a = e.citybike,
                                n = e.parkAndRide,
                                i = e.stop,
                                r = e.terminal,
                                o = e.ticketSales,
                                s = e.parkingStations,
                                l = e.disorders,
                                c = e.roadworks,
                                p = e.cameraStations,
                                f = e.cityWeatherStations,
                                h = e.weatherStations,
                                b = e.tmsStations,
                                y = e.roadConditions,
                                v = e.fluencies,
                                k = e.ecoCounters,
                                j = e.bicycleRoutesMainContract,
                                S = e.maintenanceVehicles,
                                E = e.realtimeMaintenanceVehicles,
                                N = e.roadInspectionVehicles,
                                R = e.roadSigns,
                                w = e.bicycleRoutes,
                                C = e.bicycleRoutesMainRegional,
                                x = e.bicycleRoutesBaana,
                                L = e.bicycleRoutesBrand,
                                O = t.props,
                                M = O.config,
                                _ = O.mapLayerOptions,
                                P = function(e) {
                                    return e && e.availableForSelection
                                },
                                A = M.transportModes || {},
                                I = function(e) {
                                    return null !== Object(m.a)(t.props.mapLayers, e, null)
                                };
                            return u.a.createElement(u.a.Fragment, null, u.a.createElement("div", {
                                className: "checkbox-grouping"
                            }, P(A.bus) && u.a.createElement(u.a.Fragment, null, I("stop.bus") && u.a.createElement(T, {
                                checked: i.bus,
                                labelId: "map-layer-stop-bus",
                                defaultMessage: "Bus stop",
                                onChange: function(e) {
                                    return t.updateStopSetting({
                                        bus: e.target.checked
                                    })
                                }
                            }), I("terminal.bus") && u.a.createElement(T, {
                                checked: r.bus,
                                labelId: "map-layer-terminal-bus",
                                defaultMessage: "Bus terminal",
                                onChange: function(e) {
                                    return t.updateTerminalSetting({
                                        bus: e.target.checked
                                    })
                                }
                            })), P(A.tram) && I("stop.tram") && u.a.createElement(T, {
                                checked: i.tram,
                                labelId: "map-layer-stop-tram",
                                defaultMessage: "Tram stop",
                                onChange: function(e) {
                                    return t.updateStopSetting({
                                        tram: e.target.checked
                                    })
                                }
                            }), P(A.rail) && I("terminal.rail") && u.a.createElement(T, {
                                checked: r.rail,
                                labelId: "map-layer-terminal-rail",
                                defaultMessage: "Railway station",
                                onChange: function(e) {
                                    return t.updateStopAndTerminalSetting({
                                        rail: e.target.checked
                                    })
                                }
                            }), P(A.subway) && I("terminal.subway") && u.a.createElement(T, {
                                checked: r.subway,
                                labelId: "map-layer-terminal-subway",
                                defaultMessage: "Subway station",
                                onChange: function(e) {
                                    return t.updateStopAndTerminalSetting({
                                        subway: e.target.checked
                                    })
                                }
                            }), P(A.ferry) && I("stop.ferry") && u.a.createElement(T, {
                                checked: i.ferry,
                                labelId: "map-layer-stop-ferry",
                                defaultMessage: "Ferries",
                                onChange: function(e) {
                                    return t.updateStopSetting({
                                        ferry: e.target.checked
                                    })
                                }
                            }), M.cityBike && M.cityBike.showCityBikes && I("citybike") && u.a.createElement(T, {
                                checked: a,
                                labelId: "map-layer-citybike",
                                defaultMessage: "Citybike station",
                                onChange: function(e) {
                                    return t.updateSetting({
                                        citybike: e.target.checked
                                    })
                                }
                            }), M.parkAndRide && M.parkAndRide.showParkAndRide && I("parkAndRide") && u.a.createElement(T, {
                                checked: n,
                                labelId: "map-layer-park-and-ride",
                                defaultMessage: "Park & ride",
                                onChange: function(e) {
                                    return t.updateSetting({
                                        parkAndRide: e.target.checked
                                    })
                                }
                            }), M.parkingStations && M.parkingStations.showParkingStations && I("parkingStations") && u.a.createElement(T, {
                                checked: s,
                                labelId: "parking",
                                defaultMessage: "Parking",
                                onChange: function(e) {
                                    return t.updateSetting({
                                        parkingStations: e.target.checked
                                    })
                                }
                            }), M.fluencies && M.fluencies.showFluencies && I("fluencies") && u.a.createElement(T, {
                                checked: v,
                                labelId: "fluency",
                                defaultMessage: "Fluency",
                                onChange: function(e) {
                                    return t.updateSetting({
                                        fluencies: e.target.checked
                                    })
                                }
                            }), M.roadworks && M.roadworks.showRoadworks && I("roadworks") && u.a.createElement(T, {
                                checked: c,
                                labelId: "roadworks",
                                defaultMessage: "Roadworks",
                                onChange: function(e) {
                                    return t.updateSetting({
                                        roadworks: e.target.checked
                                    })
                                }
                            }), M.disorders && M.disorders.showDisorders && I("disorders") && u.a.createElement(T, {
                                checked: l,
                                labelId: "disruptions",
                                defaultMessage: "Disruptions",
                                onChange: function(e) {
                                    return t.updateSetting({
                                        disorders: e.target.checked
                                    })
                                }
                            }), M.roadSigns && M.roadSigns.showRoadSigns && I("roadSigns") && u.a.createElement(T, {
                                checked: R,
                                labelId: "road-signs",
                                defaultMessage: "Road signs",
                                onChange: function(e) {
                                    return t.updateSetting({
                                        roadSigns: e.target.checked
                                    })
                                }
                            }), M.tmsStations && M.tmsStations.showTmsStations && I("tmsStations") && u.a.createElement(T, {
                                checked: b,
                                labelId: "traffic-monitoring",
                                defaultMessage: "Traffic monitoring",
                                onChange: function(e) {
                                    return t.updateSetting({
                                        tmsStations: e.target.checked
                                    })
                                }
                            }), M.ecoCounters && M.ecoCounters.showEcoCounters && I("ecoCounters") && u.a.createElement(T, {
                                checked: k,
                                labelId: "eco-counter",
                                defaultMessage: "Eco Counters",
                                onChange: function(e) {
                                    return t.updateSetting({
                                        ecoCounters: e.target.checked
                                    })
                                }
                            }), M.cameraStations && M.cameraStations.showCameraStations && I("cameraStations") && u.a.createElement(T, {
                                checked: p,
                                labelId: "cameras",
                                defaultMessage: "Cameras",
                                onChange: function(e) {
                                    return t.updateSetting({
                                        cameraStations: e.target.checked
                                    })
                                }
                            }), M.weatherStations && M.weatherStations.showWeatherStations && I("weatherStations") && u.a.createElement(T, {
                                checked: h,
                                labelId: "weather-stations",
                                defaultMessage: "Weather stations",
                                onChange: function(e) {
                                    return t.updateSetting({
                                        weatherStations: e.target.checked
                                    })
                                },
                                isVisible: "street-mode-car" === t.getHeaderId() || "street-mode-public_transport" === t.getHeaderId()
                            }), M.cityWeatherStations && M.cityWeatherStations.showCityWeatherStations && I("cityWeatherStations") && u.a.createElement(T, {
                                checked: f,
                                labelId: "weather-stations",
                                defaultMessage: "Weather stations",
                                onChange: function(e) {
                                    t.updateSetting({
                                        cityWeatherStations: e.target.checked
                                    })
                                },
                                isVisible: "street-mode-bicycle" === t.getHeaderId() || "street-mode-walk" === t.getHeaderId()
                            }), M.roadConditions && M.roadConditions.showRoadConditions && I("roadConditions") && u.a.createElement(T, {
                                checked: y,
                                labelId: "road-condition",
                                defaultMessage: "Road condition",
                                onChange: function(e) {
                                    return t.updateSetting({
                                        roadConditions: e.target.checked
                                    })
                                }
                            })), M.ticketSales && M.ticketSales.showTicketSales && (I("ticketSales.ticketMachine") || I("ticketSales.salesPoint")) && u.a.createElement("div", {
                                className: "checkbox-grouping"
                            }, I("ticketSales.ticketMachine") && u.a.createElement(T, {
                                checked: o.ticketMachine,
                                labelId: "map-layer-ticket-sales-machine",
                                defaultMessage: "Ticket machine",
                                onChange: function(e) {
                                    return t.updateTicketSalesSetting({
                                        ticketMachine: e.target.checked
                                    })
                                }
                            }), I("ticketSales.salesPoint") && u.a.createElement(T, {
                                checked: o.salesPoint,
                                labelId: "map-layer-ticket-sales-point",
                                defaultMessage: "Travel Card top up",
                                onChange: function(e) {
                                    return t.updateTicketSalesSetting({
                                        salesPoint: e.target.checked,
                                        servicePoint: e.target.checked
                                    })
                                }
                            })), M.maintenanceVehicles && M.maintenanceVehicles.showMaintenanceVehicles && I("maintenanceVehicles") && u.a.createElement(u.a.Fragment, null, u.a.createElement(T, {
                                checked: S,
                                labelId: "maintenance",
                                defaultMessage: "Maintenance",
                                onChange: function(e) {
                                    return t.updateSetting({
                                        maintenanceVehicles: e.target.checked,
                                        roadInspectionVehicles: !1
                                    })
                                }
                            }), S && M.realtimeMaintenanceVehicles && M.realtimeMaintenanceVehicles.showRealtimeMaintenanceVehicles && I("realtimeMaintenanceVehicles") && u.a.createElement("div", {
                                className: "maintenance-vehicles-container"
                            }, u.a.createElement("div", {
                                className: "maintenance-vehicles-time-range"
                            }, u.a.createElement("p", {
                                className: "maintenance-vehicles-time-range-label"
                            }, u.a.createElement(d.a, {
                                id: "maintenance-vehicle-time-range"
                            })), u.a.createElement("ul", {
                                className: "maintenance-vehicles-time-range-buttons"
                            }, Object.keys(M.maintenanceVehicles.timeRanges).map((function(e) {
                                var a = Object(m.a)(_, "maintenanceVehicles.timeRange", null) === Number(e);
                                return u.a.createElement("li", {
                                    key: e
                                }, u.a.createElement("button", {
                                    className: g()("standalone-btn maintenance-vehicles-time-range-btn", {
                                        "maintenance-vehicles-time-range-btn--active": a
                                    }),
                                    onClick: function() {
                                        return t.updateTimeRangeSelection(e)
                                    }
                                }, u.a.createElement(d.a, {
                                    id: M.maintenanceVehicles.timeRanges[e]
                                })))
                            })))), u.a.createElement(T, {
                                checked: E,
                                labelId: "realtime-maintenance-vehicles",
                                defaultMessage: "Realtime maintenance vehicles",
                                onChange: function(e) {
                                    return t.updateSetting({
                                        realtimeMaintenanceVehicles: e.target.checked
                                    })
                                }
                            }), u.a.createElement(T, {
                                checked: j,
                                labelId: "main-bicycle-route-contract",
                                defaultMessage: "Main bicycle route contract",
                                onChange: function(e) {
                                    return t.updateSetting({
                                        bicycleRoutesMainContract: e.target.checked
                                    })
                                },
                                isVisible: "street-mode-bicycle" === t.getHeaderId()
                            }))), M.roadInspectionVehicles && M.roadInspectionVehicles.showRoadInspectionVehicles && I("roadInspectionVehicles") && u.a.createElement(u.a.Fragment, null, u.a.createElement(T, {
                                checked: N,
                                labelId: "roadinspection",
                                defaultMessage: "Road inspection",
                                onChange: function(e) {
                                    return t.updateSetting({
                                        roadInspectionVehicles: e.target.checked,
                                        maintenanceVehicles: !1,
                                        realtimeMaintenanceVehicles: !1,
                                        bicycleRoutesMainContract: !1
                                    })
                                }
                            }), N && M.realtimeMaintenanceVehicles && M.realtimeMaintenanceVehicles.showRealtimeMaintenanceVehicles && I("realtimeMaintenanceVehicles") && u.a.createElement("div", {
                                className: "roadinspection-vehicles-container"
                            }, u.a.createElement("div", {
                                className: "roadinspection-vehicles-time-range"
                            }, u.a.createElement("p", {
                                className: "roadinspection-vehicles-time-range-label"
                            }, u.a.createElement(d.a, {
                                id: "roadinspection-vehicle-time-range"
                            }))), u.a.createElement(T, {
                                checked: E,
                                labelId: "realtime-roadinspection-vehicles",
                                defaultMessage: "Realtime road inspection vehicles",
                                onChange: function(e) {
                                    return t.updateSetting({
                                        realtimeMaintenanceVehicles: e.target.checked
                                    })
                                }
                            }))), M.bicycleRoutes && M.bicycleRoutes.showBicycleRoutes && I("bicycleRoutes") && u.a.createElement(u.a.Fragment, null, u.a.createElement(T, {
                                checked: w,
                                labelId: "bicycle-routes",
                                defaultMessage: "Bicycle routes",
                                onChange: function(e) {
                                    return t.updateSetting({
                                        bicycleRoutes: e.target.checked
                                    })
                                }
                            }), w && u.a.createElement("div", {
                                className: "bicycle-routes-container"
                            }, I("bicycleRoutesBaana") && u.a.createElement(T, {
                                checked: x,
                                labelId: "bicycle-routes-BAANA",
                                defaultMessage: "Baanat",
                                onChange: function(e) {
                                    return t.updateSetting({
                                        bicycleRoutesBaana: e.target.checked
                                    })
                                }
                            }), I("bicycleRoutesBrand") && u.a.createElement(T, {
                                checked: L,
                                labelId: "bicycle-routes-BRAND",
                                defaultMessage: "Brand routes",
                                onChange: function(e) {
                                    return t.updateSetting({
                                        bicycleRoutesBrand: e.target.checked
                                    })
                                }
                            }), I("bicycleRoutesMainRegional") && u.a.createElement(T, {
                                checked: C,
                                labelId: "bicycle-routes-MAIN_REGIONAL",
                                defaultMessage: "Main and regional routes",
                                onChange: function(e) {
                                    return t.updateSetting({
                                        bicycleRoutesMainRegional: e.target.checked
                                    })
                                }
                            }))), u.a.createElement("button", {
                                className: "standalone-btn dialog-clear-button",
                                onClick: t.props.clearMapLayers
                            }, u.a.createElement(d.a, {
                                id: "clear-selected-options",
                                defaultMessage: "Clear options"
                            })))
                        }, t
                    }
                    return Object(i.a)(t, e), t.prototype.render = function() {
                        var e = this.props,
                            t = e.config,
                            a = e.breakpoint,
                            n = this.getHeaderId(),
                            i = this.getToggleButtonTitle(n);
                        return u.a.createElement(y.a, {
                            containerClassName: Object(m.a)(t, "mapTrackingButtons.layers.containerClassName", void 0),
                            contentClassName: "select-map-layers-dialog-content",
                            header: n,
                            id: "mapLayerSelector",
                            icon: Object(m.a)(t, "mapTrackingButtons.layers.icon", "map-layers"),
                            buttonText: "large" !== a ? null : Object(m.a)(t, "mapTrackingButtons.layers.buttonText", void 0),
                            isOpen: this.props.isOpen,
                            isFullscreenOnMobile: !0,
                            toggleButtonTitle: i
                        }, this.renderContents())
                    }, t
                }(u.a.Component),
                x = l.a.shape({
                    availableForSelection: l.a.bool
                }),
                L = l.a.shape({
                    cityBike: l.a.shape({
                        showCityBikes: l.a.bool
                    }),
                    parkAndRide: l.a.shape({
                        showParkAndRide: l.a.bool
                    }),
                    tmsStations: l.a.shape({
                        showTmsStations: l.a.bool
                    }),
                    cityWeatherStations: l.a.shape({
                        showCityWeatherStations: l.a.bool
                    }),
                    weatherStations: l.a.shape({
                        showWeatherStations: l.a.bool
                    }),
                    parkingStations: l.a.shape({
                        showParkingStations: l.a.bool
                    }),
                    cameraStations: l.a.shape({
                        showCameraStations: l.a.bool
                    }),
                    roadworks: l.a.shape({
                        showRoadworks: l.a.bool
                    }),
                    disorders: l.a.shape({
                        showDisorders: l.a.bool
                    }),
                    roadConditions: l.a.shape({
                        showRoadConditions: l.a.bool
                    }),
                    fluencies: l.a.shape({
                        showFluencies: l.a.bool
                    }),
                    ticketSales: l.a.shape({
                        showTicketSales: l.a.bool
                    }),
                    maintenanceVehicles: l.a.shape({
                        showMaintenanceVehicles: l.a.bool
                    }),
                    roadInspectionVehicles: l.a.shape({
                        showRoadInspectionVehicles: l.a.bool
                    }),
                    bicycleRoutes: l.a.shape({
                        showBicycleRoutes: l.a.bool
                    }),
                    transportModes: l.a.shape({
                        bus: x,
                        citybike: x,
                        ferry: x,
                        rail: x,
                        subway: x,
                        tram: x
                    })
                });
            C.propTypes = {
                config: L,
                location: p.locationShape,
                isOpen: l.a.bool,
                mapLayers: S.b.isRequired,
                mapLayerOptions: E.b.isRequired,
                updateMapLayers: l.a.func.isRequired,
                updateMapLayerOptions: l.a.func.isRequired,
                clearMapLayers: l.a.func.isRequired,
                breakpoint: l.a.string,
                executeAction: l.a.func
            }, C.contextTypes = {
                intl: d.d.isRequired,
                getStore: l.a.func.isRequired
            }, C.defaultProps = {
                config: {},
                location: null,
                isOpen: !1,
                breakpoint: "large",
                executeAction: null
            }, C.description = u.a.createElement(w.a, {
                isFullscreen: !0
            }, u.a.createElement("div", {
                style: {
                    bottom: 0,
                    left: 0,
                    position: "absolute"
                }
            }, u.a.createElement(C, {
                config: {
                    parkAndRide: {
                        showParkAndRide: !0
                    },
                    ticketSales: {
                        showTicketSales: !0
                    },
                    transportModes: {
                        bus: {
                            availableForSelection: !0
                        },
                        ferry: {
                            availableForSelection: !0
                        },
                        rail: {
                            availableForSelection: !0
                        },
                        subway: {
                            availableForSelection: !0
                        },
                        tram: {
                            availableForSelection: !0
                        }
                    }
                },
                isOpen: !0,
                mapLayers: {
                    stop: {
                        bus: !0
                    },
                    terminal: {
                        subway: !0
                    },
                    ticketSales: {
                        ticketMachine: !0
                    }
                },
                mapLayerOptions: {
                    maintenanceVehicles: {
                        timeRange: 1440
                    }
                },
                updateMapLayers: function() {},
                clearMapLayers: function() {},
                updateMapLayerOptions: function() {}
            })));
            var O = Object(N.d)(C),
                M = o()(O, [S.a, E.a], (function(e) {
                    return {
                        config: e.config,
                        location: e.location,
                        mapLayers: e.getStore(S.a).getMapLayers(),
                        updateMapLayers: function(t) {
                            return e.executeAction(k.f, Object(n.a)({}, t))
                        },
                        clearMapLayers: function() {
                            return e.executeAction(k.a)
                        },
                        mapLayerOptions: e.getStore(E.a).getMapLayerOptions(),
                        updateMapLayerOptions: function(t) {
                            return e.executeAction(j, Object(n.a)({}, t))
                        },
                        executeAction: e.executeAction
                    }
                }), {
                    config: L,
                    location: p.locationShape,
                    executeAction: l.a.func
                })
        },
        "./app/component/SelectStreetModeDialog.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js"),
                i = a("./node_modules/lodash-es/find.js"),
                r = a("./node_modules/prop-types/index.js"),
                o = a.n(r),
                s = a("./node_modules/react/index.js"),
                l = a.n(s),
                c = a("./node_modules/react-intl/lib/index.es.js"),
                u = a("./app/component/BubbleDialog.js"),
                d = a("./app/component/ToggleButton.js"),
                p = a("./app/util/browser.js"),
                m = a("./app/component/ComponentUsageExample.js"),
                f = function(e) {
                    function t(t) {
                        var a;
                        return (a = e.call(this, t) || this).onDialogOpen = a.onDialogOpen.bind(a), a.state = {
                            defaultSelectedStreetMode: a.props.streetModeConfigs.find((function(e) {
                                return e.defaultValue
                            })).name
                        }, a
                    }
                    Object(n.a)(t, e);
                    var a = t.prototype;
                    return a.onDialogOpen = function(e) {
                        void 0 === e && (e = !1), e && this.selectedStreetModeButton && this.selectedStreetModeButton.focus()
                    }, a.getStreetModeSelectButtons = function() {
                        var e = this,
                            t = this.props.streetModeConfigs,
                            a = this.state.defaultSelectedStreetMode,
                            n = this.props.selectedStreetMode || a;
                        return t.length ? t.map((function(t) {
                            var a = t.exclusive,
                                i = t.icon,
                                r = t.name,
                                o = r === n,
                                s = "street-mode-" + r.toLowerCase();
                            return l.a.createElement(d.a, {
                                buttonRef: function(t) {
                                    t && o && (e.selectedStreetModeButton = t)
                                },
                                checkedClass: "selected",
                                icon: i,
                                key: r,
                                label: s,
                                onBtnClick: function() {
                                    return e.selectStreetMode(r, a)
                                },
                                onKeyDown: function(t) {
                                    return Object(p.h)(t) && e.selectStreetMode(r, a, !0)
                                },
                                showButtonTitle: !0,
                                state: o
                            })
                        })) : null
                    }, a.selectStreetMode = function(e, t, a) {
                        void 0 === a && (a = !1), this.props.selectStreetMode(e.toUpperCase(), t), a && this.dialogRef && this.dialogRef.closeDialog(a)
                    }, a.render = function() {
                        var e = this,
                            t = this.props,
                            a = t.isOpen,
                            n = t.streetModeConfigs,
                            r = this.state.defaultSelectedStreetMode,
                            o = this.props.selectedStreetMode || r;
                        return l.a.createElement(u.a, {
                            header: "main-mode",
                            id: "streetModeSelector",
                            icon: Object(i.a)(n, (function(e) {
                                return e.name === o
                            })).icon,
                            isOpen: a,
                            onDialogOpen: this.onDialogOpen,
                            wrappedRef: function(t) {
                                e.dialogRef = t
                            }
                        }, l.a.createElement("div", {
                            className: "select-street-mode-dialog-buttons"
                        }, this.getStreetModeSelectButtons()))
                    }, t
                }(l.a.Component);
            f.propTypes = {
                isOpen: o.a.bool,
                selectStreetMode: o.a.func.isRequired,
                selectedStreetMode: o.a.string,
                streetModeConfigs: o.a.arrayOf(o.a.shape({
                    defaultValue: o.a.bool.isRequired,
                    icon: o.a.string.isRequired,
                    name: o.a.string.isRequired
                }))
            }, f.defaultProps = {
                isOpen: !1,
                selectedStreetMode: void 0,
                streetModeConfigs: []
            }, f.contextTypes = {
                intl: c.d.isRequired
            }, f.description = l.a.createElement(m.a, null, l.a.createElement("div", {
                style: {
                    height: "200px",
                    position: "relative"
                }
            }, l.a.createElement("div", {
                style: {
                    bottom: 0,
                    position: "absolute"
                }
            }, l.a.createElement(f, {
                isOpen: !0,
                selectStreetMode: function() {},
                streetModeConfigs: [{
                    defaultValue: !0,
                    icon: "public_transport",
                    name: "PUBLIC_TRANSPORT"
                }, {
                    defaultValue: !1,
                    icon: "walk",
                    name: "WALK"
                }, {
                    defaultValue: !1,
                    icon: "biking",
                    name: "BICYCLE"
                }, {
                    defaultValue: !1,
                    icon: "car-withoutBox",
                    name: "CAR_PARK"
                }]
            })))), t.a = f
        },
        "./app/component/SplitBars.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/prop-types/index.js"),
                i = a.n(n),
                r = a("./node_modules/react/index.js"),
                o = a.n(r),
                s = a("./app/component/ComponentUsageExample.js"),
                l = function(e) {
                    var t = e.children,
                        a = [];
                    return t.forEach((function(e) {
                        a.push(o.a.createElement("div", {
                            className: "split-bar"
                        }, e)), a.push(o.a.createElement("div", {
                            className: "split-bar--bar"
                        }))
                    })), a = a.splice(0, a.length - 1), o.a.createElement("div", {
                        className: "split-bars"
                    }, a)
                };
            l.displayName = "SplitBars", l.propTypes = {
                children: i.a.node.isRequired
            }, l.description = function() {
                return o.a.createElement("div", null, o.a.createElement("p", null, "Splits its children with a vertical bar."), o.a.createElement(s.a, null, o.a.createElement(l, null, o.a.createElement("span", null, "1"), o.a.createElement("span", null, "2"), o.a.createElement("span", null, "3"))))
            }, t.a = l
        },
        "./app/component/StopCode.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/prop-types/index.js"),
                i = a.n(n),
                r = a("./node_modules/react/index.js"),
                o = a.n(r),
                s = function(e) {
                    var t = e.code;
                    return t && o.a.createElement("span", {
                        className: "itinerary-stop-code"
                    }, t)
                };
            s.displayName = "StopCode", s.propTypes = {
                code: i.a.string.isRequired
            }, t.a = s
        },
        "./app/component/SuggestionItem.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/prop-types/index.js"),
                i = a.n(n),
                r = a("./node_modules/react/index.js"),
                o = a.n(r),
                s = a("./node_modules/classnames/index.js"),
                l = a.n(s),
                c = a("./node_modules/recompose/pure.js"),
                u = a.n(c),
                d = a("./node_modules/react-router/es/index.js"),
                p = a("./node_modules/react-intl/lib/index.es.js"),
                m = a("./node_modules/lodash-es/get.js"),
                f = a("./app/component/Icon.js"),
                g = a("./app/util/suggestionUtils.js"),
                h = a("./app/component/ComponentUsageExample.js"),
                b = u()((function(e) {
                    var t, a = e.item,
                        n = e.useTransportIcons,
                        i = e.doNotShowLinkToStop,
                        r = e.loading;
                    t = a.properties.mode && n ? o.a.createElement(f.a, {
                        img: "icon-icon_" + a.properties.mode,
                        className: a.properties.mode
                    }) : o.a.createElement(f.a, {
                        img: Object(g.b)(a.properties.layer),
                        className: a.iconClass || ""
                    });
                    var s = Object(g.d)(a.properties, !1),
                        c = s[0],
                        u = s[1],
                        h = o.a.createElement("div", {
                            className: l()("search-result", a.type, {
                                favourite: a.type.startsWith("Favourite"),
                                loading: r
                            })
                        }, o.a.createElement("span", {
                            className: "autosuggestIcon"
                        }, t), o.a.createElement("div", null, o.a.createElement("p", {
                            className: "suggestion-name"
                        }, c), o.a.createElement("p", {
                            className: "suggestion-label"
                        }, u)));
                    return !1 === i && (Object(g.e)(a.properties) || Object(g.f)(a.properties)) && void 0 !== Object(g.a)(a.properties) && void 0 !== (Object(m.a)(a, "properties.id") || Object(m.a)(a, "properties.code")) ? o.a.createElement("div", {
                        className: "suggestion-item-stop"
                    }, o.a.createElement("div", null, o.a.createElement(d.Link, {
                        onClick: function() {
                            a.timetableClicked = !1
                        }
                    }, h)), o.a.createElement("div", {
                        className: "suggestion-item-timetable"
                    }, o.a.createElement(d.Link, {
                        onClick: function() {
                            a.timetableClicked = !0
                        }
                    }, o.a.createElement(f.a, {
                        img: "icon-icon_schedule"
                    }), o.a.createElement("div", {
                        className: "suggestion-item-timetable-label"
                    }, o.a.createElement(p.a, {
                        id: "timetable",
                        defaultMessage: "Timetable"
                    }))))) : h
                }));
            b.propTypes = {
                item: i.a.object,
                useTransportIcons: i.a.bool,
                doNotShowLInkToStop: i.a.bool
            }, b.displayName = "SuggestionItem";
            var y = {
                    type: "FavouritePlace",
                    properties: {
                        locationName: "HSL",
                        address: "Opastinsilta 6, Helsinki",
                        layer: "favouritePlace"
                    }
                },
                v = {
                    type: "Feature",
                    properties: {
                        id: "fi/uusimaa:103267060F-3",
                        layer: "address",
                        source: "openaddresses",
                        name: "Opastinsilta 6",
                        housenumber: "6",
                        street: "Opastinsilta",
                        postalcode: "00520",
                        confidence: 1,
                        accuracy: "point",
                        region: "Uusimaa",
                        localadmin: "Helsinki",
                        locality: "Helsinki",
                        neighbourhood: "Itä-Pasila",
                        label: "Opastinsilta 6, Helsinki"
                    }
                },
                k = {
                    type: "Route",
                    properties: {
                        gtfsId: "HSL:1019",
                        agency: {
                            name: "Helsingin seudun liikenne"
                        },
                        shortName: "19",
                        mode: "FERRY",
                        longName: "Kauppatori - Suomenlinna",
                        layer: "route-FERRY",
                        link: "/linjat/HSL:1019"
                    }
                },
                j = {
                    type: "Stop",
                    properties: {
                        source: "gtfsHSL",
                        gtfsId: "HSL:1130446",
                        id: "HSL:1130446#0221",
                        name: "Caloniuksenkatu",
                        desc: "Mechelininkatu 21",
                        code: "0221",
                        mode: "tram",
                        layer: "stop",
                        link: "/pysakit/HSL:1130446"
                    }
                };
            b.description = function() {
                return o.a.createElement("div", null, o.a.createElement(h.a, {
                    description: "Favourite"
                }, o.a.createElement(b, {
                    item: y
                })), o.a.createElement(h.a, {
                    description: "Address"
                }, o.a.createElement(b, {
                    item: v
                })), o.a.createElement(h.a, {
                    description: "Route"
                }, o.a.createElement(b, {
                    item: k
                })), o.a.createElement(h.a, {
                    description: "Stop"
                }, o.a.createElement(b, {
                    item: j,
                    doNotShowLinkToStop: !1
                })), o.a.createElement(h.a, {
                    description: "Stop"
                }, o.a.createElement(b, {
                    item: j,
                    doNotShowLinkToStop: !0
                })))
            }, t.a = b
        },
        "./app/component/ToggleButton.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"),
                i = a("./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js"),
                r = a("./node_modules/prop-types/index.js"),
                o = a.n(r),
                s = a("./node_modules/react/index.js"),
                l = a.n(s),
                c = a("./node_modules/classnames/index.js"),
                u = a.n(c),
                d = a("./node_modules/react-intl/lib/index.es.js"),
                p = a("./app/component/Icon.js"),
                m = ["checkedClass", "state", "icon", "className", "onBtnClick", "style", "label", "children", "buttonRef", "showButtonTitle"],
                f = function(e) {
                    function t() {
                        return e.apply(this, arguments) || this
                    }
                    return Object(i.a)(t, e), t.prototype.render = function() {
                        var e = this.context.intl,
                            t = this.props,
                            a = t.checkedClass,
                            i = t.state,
                            r = t.icon,
                            o = t.className,
                            s = t.onBtnClick,
                            c = t.style,
                            f = t.label,
                            g = t.children,
                            h = t.buttonRef,
                            b = t.showButtonTitle,
                            y = Object(n.a)(t, m),
                            v = {
                                btn: !0
                            };
                        return i && (v[a] = i), l.a.createElement("button", Object.assign({
                            className: u()("cursor-pointer", v, o),
                            onClick: s,
                            style: c,
                            title: e.formatMessage({
                                id: f
                            }),
                            "aria-label": e.formatMessage({
                                id: f
                            }),
                            ref: h ? function(e) {
                                return h(e)
                            } : null
                        }, y), r && l.a.createElement("div", {
                            className: "icon-holder"
                        }, l.a.createElement(p.a, {
                            img: "icon-icon_" + r,
                            className: ""
                        })), b && l.a.createElement("div", {
                            className: "toggle-button-title"
                        }, l.a.createElement(d.a, {
                            id: f
                        })), g && l.a.createElement(l.a.Fragment, null, g))
                    }, t
                }(l.a.Component);
            f.contextTypes = {
                intl: d.d.isRequired
            }, f.propTypes = {
                onBtnClick: o.a.func.isRequired,
                checkedClass: o.a.string,
                state: o.a.bool,
                icon: o.a.string,
                className: o.a.string,
                label: o.a.string.isRequired,
                style: o.a.object,
                children: o.a.node,
                buttonRef: o.a.func,
                showButtonTitle: o.a.bool
            }, f.defaultProps = {
                showButtonTitle: !1
            }, t.a = f
        },
        "./app/component/map/IconMarker.js": function(e, t, a) {
            "use strict";
            a.r(t), a.d(t, "default", (function() {
                return d
            }));
            var n, i, r = a("./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js"),
                o = a("./node_modules/prop-types/index.js"),
                s = a.n(o),
                l = a("./node_modules/react/index.js"),
                c = a.n(l),
                u = a("./node_modules/react-dom/index.js");
            a("./app/util/browser.js").c && (n = a("./node_modules/leaflet/dist/leaflet-src.js"), i = a("./node_modules/react-leaflet/es/Marker.js").default);
            var d = function(e) {
                function t(t) {
                    for (var a, i = arguments.length, r = new Array(i > 1 ? i - 1 : 0), o = 1; o < i; o++) r[o - 1] = arguments[o];
                    var s = a = e.call.apply(e, [this, t].concat(r)) || this;
                    return a.Icon = n.Icon.extend({
                        options: {
                            iconSize: [12, 12],
                            element: !1,
                            className: "leaflet-div-icon"
                        },
                        createIcon: function(e) {
                            var t = e && "DIV" === e.tagName ? e : document.createElement("div");
                            return s.setState({
                                div: t
                            }), this._setIconStyles(t, "icon"), t
                        },
                        createShadow: function() {
                            return null
                        }
                    }), a.state = {
                        icon: new a.Icon(t.icon)
                    }, a
                }
                Object(r.a)(t, e);
                var a = t.prototype;
                return a.componentDidUpdate = function() {
                    this.state.icon.initialize(this.props.icon)
                }, a.render = function() {
                    return [this.state.div && Object(u.createPortal)(this.props.icon.element, this.state.div, "icon"), c.a.createElement(i, Object.assign({
                        key: "marker"
                    }, this.props, {
                        icon: this.state.icon
                    }))]
                }, t
            }(c.a.Component);
            d.propTypes = {
                position: s.a.shape({
                    lat: s.a.number.isRequired,
                    lon: s.a.number.isRequired
                }).isRequired,
                icon: s.a.shape({
                    element: s.a.node.isRequired
                }).isRequired
            }
        },
        "./app/component/map/MapContainer.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"),
                i = a("./node_modules/prop-types/index.js"),
                r = a.n(i),
                o = a("./node_modules/react/index.js"),
                s = a.n(o),
                l = a("./node_modules/fluxible-addons-react/connectToStores.js"),
                c = a.n(l),
                u = a("./app/component/LazilyLoad.js"),
                d = ["className", "children"],
                p = {
                    Map: function() {
                        return Object(u.b)(Promise.all([a.e("vendors~map"), a.e("itinerary~map~route~styleguide"), a.e("map~styleguide"), a.e("map")]).then(a.bind(null, "./app/component/map/Map.js")))
                    }
                };

            function m(e) {
                var t = e.className,
                    a = e.children,
                    i = Object(n.a)(e, d);
                return s.a.createElement("div", {
                    className: "map " + t
                }, s.a.createElement(u.a, {
                    modules: p
                }, (function(e) {
                    var t = e.Map;
                    return s.a.createElement(t, i)
                })), s.a.createElement("div", {
                    className: "background-gradient"
                }), a)
            }
            m.propTypes = {
                className: r.a.string,
                children: r.a.node
            }, m.defaultProps = {
                className: "",
                children: void 0
            }, t.a = c()(m, ["PreferencesStore"], (function(e) {
                return {
                    lang: e.getStore("PreferencesStore").getLanguage()
                }
            }))
        },
        "./app/component/map/VehicleMarkerContainer.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/@babel/runtime/helpers/esm/extends.js"),
                i = a("./node_modules/prop-types/index.js"),
                r = a.n(i),
                o = a("./node_modules/react/index.js"),
                s = a.n(o),
                l = a("./node_modules/react-relay/classic.js"),
                c = a.n(l),
                u = a("./node_modules/fluxible-addons-react/connectToStores.js"),
                d = a.n(u),
                p = a("./node_modules/classnames/index.js"),
                m = a.n(p),
                f = a("./node_modules/react-router/es/index.js"),
                g = a("./node_modules/react-intl/lib/index.es.js"),
                h = a("./app/util/path.js"),
                b = a("./app/component/RouteNumber.js");

            function y(e) {
                var t = e.route.mode.toLowerCase(),
                    a = e.trip ? s.a.createElement("span", {
                        className: "route-header-trip"
                    }, e.trip.substring(0, 2), ":", e.trip.substring(2, 4), " →") : "",
                    n = " " + (e.route.shortName || ""),
                    i = e.trip && e.pattern ? s.a.createElement(f.Link, {
                        to: "/" + h.b + "/" + e.route.gtfsId + "/pysakit/" + e.pattern.code
                    }, n) : n;
                return s.a.createElement("div", {
                    className: m()("route-header", e.className)
                }, s.a.createElement("h2", {
                    className: t
                }, s.a.createElement(b.a, {
                    mode: t,
                    text: i
                }), a))
            }
            y.propTypes = {
                route: r.a.shape({
                    gtfsId: r.a.string.isRequired,
                    mode: r.a.string.isRequired,
                    shortName: r.a.string
                }).isRequired,
                trip: r.a.string,
                pattern: r.a.shape({
                    code: r.a.string.isRequired
                }),
                className: r.a.string
            };
            var v = a("./app/action/FavouriteActions.js");

            function k(e) {
                var t = "/" + h.b + "/" + e.trip.route.gtfsId + "/pysakit",
                    a = t;
                return e.trip.trip && (a = (t += "/" + e.trip.trip.pattern.code) + "/" + e.trip.trip.gtfsId), s.a.createElement("div", {
                    className: "card"
                }, s.a.createElement(y, {
                    route: e.trip.route,
                    pattern: e.trip.trip && e.trip.trip.pattern,
                    trip: e.message.tripStartTime,
                    favourite: e.favourite,
                    addFavouriteRoute: e.addAsFavouriteRoute
                }), s.a.createElement("div", {
                    className: "bottom location"
                }, s.a.createElement(f.Link, {
                    to: a
                }, s.a.createElement(g.a, {
                    id: "trip-information",
                    defaultMessage: "Trip Information"
                })), s.a.createElement("br", null), s.a.createElement(f.Link, {
                    to: t,
                    className: "route"
                }, s.a.createElement(g.a, {
                    id: "view-route",
                    defaultMessage: "View Route"
                }))))
            }
            k.propTypes = {
                trip: r.a.shape({
                    route: r.a.shape({
                        gtfsId: r.a.string.isRequired
                    }).isRequired,
                    fuzzyTrip: r.a.shape({
                        gtfsId: r.a.string,
                        pattern: r.a.shape({
                            code: r.a.string.isRequired
                        })
                    }),
                    trip: r.a.shape({
                        gtfsId: r.a.string,
                        pattern: r.a.shape({
                            code: r.a.string.isRequired
                        })
                    })
                }).isRequired,
                favourite: r.a.bool.isRequired,
                addAsFavouriteRoute: r.a.func.isRequired,
                message: r.a.shape({
                    mode: r.a.string.isRequired,
                    tripStartTime: r.a.string.isRequired
                }).isRequired
            };
            var j, S = d()(k, ["FavouriteRoutesStore"], (function(e, t) {
                    return {
                        favourite: e.getStore("FavouriteRoutesStore").isFavourite(t.trip.route.gtfsId),
                        addAsFavouriteRoute: function(a) {
                            a.stopPropagation(), e.executeAction(v.b, t.trip.route.gtfsId)
                        }
                    }
                })),
                E = c.a.createContainer(S, {
                    fragments: {
                        trip: function() {
                            return {
                                children: [{
                                    calls: [{
                                        kind: "Call",
                                        metadata: {},
                                        name: "route",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "route"
                                        }
                                    }, {
                                        kind: "Call",
                                        metadata: {
                                            type: "Int"
                                        },
                                        name: "direction",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "direction"
                                        }
                                    }, {
                                        kind: "Call",
                                        metadata: {
                                            type: "Int!"
                                        },
                                        name: "time",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "time"
                                        }
                                    }, {
                                        kind: "Call",
                                        metadata: {},
                                        name: "date",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "date"
                                        }
                                    }],
                                    children: [{
                                        fieldName: "gtfsId",
                                        kind: "Field",
                                        metadata: {},
                                        type: "String"
                                    }, {
                                        children: [{
                                            fieldName: "code",
                                            kind: "Field",
                                            metadata: {},
                                            type: "String"
                                        }, {
                                            fieldName: "headsign",
                                            kind: "Field",
                                            metadata: {},
                                            type: "String"
                                        }, {
                                            children: [{
                                                fieldName: "name",
                                                kind: "Field",
                                                metadata: {},
                                                type: "String"
                                            }, {
                                                fieldName: "id",
                                                kind: "Field",
                                                metadata: {
                                                    isGenerated: !0,
                                                    isRequisite: !0
                                                },
                                                type: "ID"
                                            }],
                                            fieldName: "stops",
                                            kind: "Field",
                                            metadata: {
                                                canHaveSubselections: !0,
                                                inferredRootCallName: "node",
                                                inferredPrimaryKey: "id",
                                                isPlural: !0
                                            },
                                            type: "Stop"
                                        }, {
                                            fieldName: "id",
                                            kind: "Field",
                                            metadata: {
                                                isGenerated: !0,
                                                isRequisite: !0
                                            },
                                            type: "ID"
                                        }],
                                        fieldName: "pattern",
                                        kind: "Field",
                                        metadata: {
                                            canHaveSubselections: !0,
                                            inferredRootCallName: "node",
                                            inferredPrimaryKey: "id"
                                        },
                                        type: "Pattern"
                                    }, {
                                        fieldName: "id",
                                        kind: "Field",
                                        metadata: {
                                            isGenerated: !0,
                                            isRequisite: !0
                                        },
                                        type: "ID"
                                    }],
                                    fieldName: "fuzzyTrip",
                                    kind: "Field",
                                    metadata: {
                                        canHaveSubselections: !0,
                                        inferredRootCallName: "node",
                                        inferredPrimaryKey: "id"
                                    },
                                    type: "Trip"
                                }, {
                                    calls: [{
                                        kind: "Call",
                                        metadata: {},
                                        name: "id",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "tripId"
                                        }
                                    }],
                                    children: [{
                                        fieldName: "gtfsId",
                                        kind: "Field",
                                        metadata: {},
                                        type: "String"
                                    }, {
                                        children: [{
                                            fieldName: "code",
                                            kind: "Field",
                                            metadata: {},
                                            type: "String"
                                        }, {
                                            fieldName: "headsign",
                                            kind: "Field",
                                            metadata: {},
                                            type: "String"
                                        }, {
                                            children: [{
                                                fieldName: "name",
                                                kind: "Field",
                                                metadata: {},
                                                type: "String"
                                            }, {
                                                fieldName: "id",
                                                kind: "Field",
                                                metadata: {
                                                    isGenerated: !0,
                                                    isRequisite: !0
                                                },
                                                type: "ID"
                                            }],
                                            fieldName: "stops",
                                            kind: "Field",
                                            metadata: {
                                                canHaveSubselections: !0,
                                                inferredRootCallName: "node",
                                                inferredPrimaryKey: "id",
                                                isPlural: !0
                                            },
                                            type: "Stop"
                                        }, {
                                            fieldName: "id",
                                            kind: "Field",
                                            metadata: {
                                                isGenerated: !0,
                                                isRequisite: !0
                                            },
                                            type: "ID"
                                        }],
                                        fieldName: "pattern",
                                        kind: "Field",
                                        metadata: {
                                            canHaveSubselections: !0,
                                            inferredRootCallName: "node",
                                            inferredPrimaryKey: "id"
                                        },
                                        type: "Pattern"
                                    }, {
                                        fieldName: "id",
                                        kind: "Field",
                                        metadata: {
                                            isGenerated: !0,
                                            isRequisite: !0
                                        },
                                        type: "ID"
                                    }],
                                    fieldName: "trip",
                                    kind: "Field",
                                    metadata: {
                                        canHaveSubselections: !0,
                                        inferredRootCallName: "node",
                                        inferredPrimaryKey: "id"
                                    },
                                    type: "Trip"
                                }, {
                                    calls: [{
                                        kind: "Call",
                                        metadata: {},
                                        name: "id",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "route"
                                        }
                                    }],
                                    children: [{
                                        fieldName: "gtfsId",
                                        kind: "Field",
                                        metadata: {},
                                        type: "String"
                                    }, {
                                        fieldName: "mode",
                                        kind: "Field",
                                        metadata: {},
                                        type: "TransitMode"
                                    }, {
                                        fieldName: "shortName",
                                        kind: "Field",
                                        metadata: {},
                                        type: "String"
                                    }, {
                                        fieldName: "longName",
                                        kind: "Field",
                                        metadata: {},
                                        type: "String"
                                    }, {
                                        fieldName: "id",
                                        kind: "Field",
                                        metadata: {
                                            isGenerated: !0,
                                            isRequisite: !0
                                        },
                                        type: "ID"
                                    }],
                                    fieldName: "route",
                                    kind: "Field",
                                    metadata: {
                                        canHaveSubselections: !0,
                                        inferredRootCallName: "node",
                                        inferredPrimaryKey: "id"
                                    },
                                    type: "Route"
                                }],
                                id: c.a.QL.__id(),
                                kind: "Fragment",
                                metadata: {},
                                name: "RouteMarkerPopup_TripRelayQL",
                                type: "Query"
                            }
                        }
                    },
                    initialVariables: {
                        tripId: null,
                        route: null,
                        direction: null,
                        date: null,
                        time: null
                    }
                }),
                N = a("./app/route/FuzzyTripRoute.js"),
                R = a("./app/component/IconWithTail.js"),
                w = a("./app/component/map/IconMarker.js"),
                T = a("./app/component/Loading.js"),
                C = a("./app/util/browser.js"),
                x = ["bus", "tram", "rail", "subway", "ferry"];

            function L(e, t, a, n) {
                if (!C.c) return null;
                var i = x.includes(e) ? e : "bus";
                return {
                    element: s.a.createElement(R.a, {
                        img: "icon-icon_" + i + (a ? "_text" : "") + "-live",
                        rotate: t
                    }, a && s.a.createElement("text", {
                        x: "50%",
                        y: "50%",
                        dy: ".3em",
                        className: m()("icon-text", {
                            medium: a.length > 2,
                            long: a.length > 3
                        })
                    }, a)),
                    className: (n || "vehicle-icon") + " " + i,
                    iconSize: [20, 20],
                    iconAnchor: [10, 10]
                }
            }

            function O(e, t) {
                return (e || []).find((function(e) {
                    return e.pattern.code.split(":")[1] === t.route.split(":")[1]
                }))
            }

            function M(e, t) {
                var a = t.config;
                return Object.entries(e.vehicles).filter((function(e) {
                    var t = e[1];
                    return t.lat && t.long
                })).filter((function(t) {
                    var n = t[1];
                    return e.departures ? function(e, t, a, n) {
                        var i = O(t, e);
                        if (!i) return !1;
                        var r = i.pattern,
                            o = r.direction,
                            s = r.stops;
                        return e.lat && e.long && (void 0 === o || e.direction === o) && (void 0 === a || e.tripStartTime === a) && (void 0 === s || s.map((function(e) {
                            return e.gtfsId
                        })).includes(n.routePrefix + ":" + e.next_stop))
                    }(n, e.departures, e.tripStart, a) : function(e, t, a, n) {
                        var i = t.direction,
                            r = t.code,
                            o = t.stops;
                        return e.lat && e.long && r.split(":")[1] === e.route.split(":")[1] && (void 0 === i || e.direction === i) && (void 0 === a || e.tripStartTime === a) && (void 0 === o || o.map((function(e) {
                            return e.gtfsId
                        })).includes(n.routePrefix + ":" + e.next_stop))
                    }(n, e.pattern, e.tripStart, a)
                })).map((function(t) {
                    var a = t[0],
                        n = t[1],
                        i = O(e.departures, n),
                        r = i ? i.shortName : e.shortName;
                    return s.a.createElement(w.default, {
                        key: a,
                        position: {
                            lat: n.lat,
                            lon: n.long
                        },
                        icon: L(n.mode, n.heading, r, e.className)
                    }, s.a.createElement(j, {
                        offset: [106, 16],
                        maxWidth: 250,
                        minWidth: 250,
                        className: "popup"
                    }, s.a.createElement(c.a.RootContainer, {
                        Component: E,
                        route: new N.a({
                            tripId: n.tripId,
                            route: n.route,
                            direction: n.direction,
                            date: n.operatingDay,
                            time: 60 * n.tripStartTime.substring(0, 2) * 60 + 60 * n.tripStartTime.substring(2, 4)
                        }),
                        renderLoading: function() {
                            return s.a.createElement("div", {
                                className: "card",
                                style: {
                                    height: "12rem"
                                }
                            }, s.a.createElement(T.a, null))
                        },
                        renderFetched: function(e) {
                            return s.a.createElement(E, Object.assign({}, e, {
                                message: n
                            }))
                        }
                    })))
                }))
            }
            C.c && (j = a("./node_modules/react-leaflet/es/Popup.js").default), M.contextTypes = {
                config: r.a.object.isRequired
            }, M.propTypes = {
                tripStart: r.a.string,
                pattern: r.a.object,
                vehicles: r.a.objectOf(r.a.shape({
                    direction: r.a.number,
                    tripStartTime: r.a.string.isRequired,
                    mode: r.a.string.isRequired,
                    heading: r.a.number,
                    lat: r.a.number,
                    long: r.a.number
                }).isRequired).isRequired,
                shortName: r.a.string,
                className: r.a.string,
                departures: r.a.array
            }, M.defaultProps = {
                tripStart: void 0,
                pattern: void 0,
                shortName: void 0,
                className: void 0,
                departures: void 0
            };
            t.a = d()(M, ["RealTimeInformationStore"], (function(e, t) {
                return Object(n.a)({}, t, {
                    vehicles: e.getStore("RealTimeInformationStore").vehicles
                })
            }))
        },
        "./app/component/map/popups/EcoCounterPopup.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/@babel/runtime/helpers/esm/extends.js"),
                i = a("./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js"),
                r = a("./node_modules/prop-types/index.js"),
                o = a.n(r),
                s = a("./node_modules/react/index.js"),
                l = a.n(s),
                c = a("./node_modules/react-relay/classic.js"),
                u = a.n(c),
                d = a("./node_modules/lodash-es/uniq.js"),
                p = a("./node_modules/moment/moment.js"),
                m = a.n(p),
                f = a("./node_modules/lodash-es/get.js"),
                g = a("./node_modules/react-intl/lib/index.es.js"),
                h = a("./node_modules/react-router/es/index.js"),
                b = a("./app/component/Card.js"),
                y = a("./app/component/CardHeader.js"),
                v = a("./app/component/ComponentUsageExample.js"),
                k = a("./node_modules/classnames/index.js"),
                j = a.n(k),
                S = a("./node_modules/react-dates/index.js"),
                E = a("./node_modules/chart.js/auto/auto.mjs"),
                N = a("./node_modules/lodash-es/isEqual.js"),
                R = a("./node_modules/lodash-es/omit.js"),
                w = function(e) {
                    function t(t) {
                        var a;
                        return (a = e.call(this, t) || this).chartRef = l.a.createRef(), a
                    }
                    Object(i.a)(t, e);
                    var a = t.prototype;
                    return a.componentDidMount = function() {
                        this.chart = new E.a(this.chartRef.current, {
                            type: "line",
                            data: {
                                labels: this.props.labels,
                                datasets: this.props.datasets
                            },
                            options: {
                                scales: {
                                    y: {
                                        beginAtZero: !0
                                    }
                                }
                            }
                        })
                    }, a.componentDidUpdate = function(e) {
                        var t = function(e) {
                                return e.map((function(e) {
                                    return Object(R.a)(e, "_meta")
                                }))
                            },
                            a = t(this.props.datasets),
                            n = t(e.datasets);
                        this.props.datasets && this.chart && !Object(N.a)(a, n) && (this.chart.data.datasets = function(e, t) {
                            if (e.data.datasets && e.data.datasets.length)
                                for (var a = 0; a < e.data.datasets.length; a++) {
                                    var n = e.isDatasetVisible(a),
                                        i = t[a];
                                    i && (i.hidden = !n)
                                }
                            return t
                        }(this.chart, this.props.datasets), this.chart.data.labels = this.props.labels, this.chart.update())
                    }, a.render = function() {
                        return l.a.createElement("canvas", {
                            ref: this.chartRef
                        })
                    }, t
                }(l.a.Component);
            w.propTypes = {
                labels: o.a.array.isRequired,
                datasets: o.a.array.isRequired
            };
            var T = w,
                C = a("./app/component/Icon.js");

            function x(e) {
                return !e || e.length < 0 ? [] : 1 === e.length ? e[0] : e.reduce((function(e, t) {
                    return t.forEach((function(t, a) {
                        e[a] || (e[a] = 0), e[a] += t
                    })), e
                }), [])
            }

            function L(e, t) {
                var a = "ecocounter-export.csv",
                    n = ["Date"].concat(e.map((function(e) {
                        return e.label
                    }))).join(","),
                    i = t.map((function(t, a) {
                        return [t].concat(e.map((function(e) {
                            return e.data[a] || 0
                        }))).join(",")
                    })),
                    r = [n].concat(i).join("\r\n"),
                    o = new Blob([r], {
                        type: "text/csv;charset=utf-8;"
                    });
                if (navigator.msSaveBlob) navigator.msSaveBlob(o, a);
                else {
                    var s = document.createElement("a");
                    s.href = window.URL.createObjectURL(o), s.setAttribute("download", a), document.body.appendChild(s), s.click(), document.body.removeChild(s)
                }
            }
            var O = "hour",
                M = "day",
                _ = "week",
                P = "month",
                A = o.a.shape({
                    date: o.a.string,
                    counts: o.a.number,
                    status: o.a.number
                }),
                I = o.a.shape({
                    siteData: o.a.arrayOf(A)
                }),
                D = function(e) {
                    function t() {
                        for (var t, a = arguments.length, n = new Array(a), i = 0; i < a; i++) n[i] = arguments[i];
                        return (t = e.call.apply(e, [this].concat(n)) || this).state = {
                            isDatePickerOpen: !1
                        }, t.onTitleClick = function() {
                            t.setState({
                                isDatePickerOpen: !t.state.isDatePickerOpen
                            })
                        }, t.getChannelDirection = function(e) {
                            var a = t.props.channels.find((function(t) {
                                return t.id === e
                            }));
                            return a ? Object(f.a)(a, "direction", 5) : 5
                        }, t.getTitle = function() {
                            var e = t.props,
                                a = e.step,
                                n = e.date,
                                i = e.formatMessage;
                            switch (a) {
                                case O:
                                    return n.format("D.M.Y");
                                case M:
                                    return i({
                                        id: "eco-counter-week-title"
                                    }, {
                                        date: n.format("GG, YYYY")
                                    });
                                case _:
                                    return n.format("MMMM, YYYY");
                                case P:
                                    return n.format("YYYY");
                                default:
                                    return ""
                            }
                        }, t.formatDateByStep = function(e) {
                            var a = t.props.step,
                                n = m()(e);
                            return a === O ? n.format("HH:mm") : a === M || a === _ ? n.format("DD.MM.") : n.format("MMM")
                        }, t
                    }
                    return Object(i.a)(t, e), t.prototype.render = function() {
                        var e = this,
                            t = this.props,
                            a = t.channel1,
                            n = t.channel2,
                            i = t.channel1Id,
                            r = t.channel2Id,
                            o = t.changeDate,
                            s = t.changeUserType,
                            c = t.changeStep,
                            u = t.date,
                            d = t.userType,
                            p = t.step,
                            m = t.formatMessage,
                            g = t.availableUserTypes,
                            h = t.openComparison,
                            b = t.renderMonthElement,
                            y = t.analyticsUrl,
                            v = this.state.isDatePickerOpen,
                            k = Object(f.a)(a, "siteData", []).map((function(t) {
                                return e.formatDateByStep(t.date)
                            })),
                            j = Object(f.a)(a, "siteData", []).map((function(e) {
                                var t = e.counts;
                                return t || 0
                            })),
                            E = [{
                                label: m({
                                    id: "eco-counter-direction-" + this.getChannelDirection(i)
                                }),
                                data: j,
                                borderColor: "#dc3545",
                                backgroundColor: "rgba(0,0,0,0)",
                                hidden: !0
                            }],
                            N = [];
                        n && (N = Object(f.a)(n, "siteData", []).map((function(e) {
                            var t = e.counts;
                            return t || 0
                        })), E.push({
                            label: m({
                                id: "eco-counter-direction-" + this.getChannelDirection(r)
                            }),
                            data: N,
                            borderColor: "#00AFFF",
                            backgroundColor: "rgba(0,0,0,0)",
                            hidden: !0
                        }));
                        var R = x([j, N]);
                        R && R.length > 0 && E.push({
                            label: m({
                                id: "eco-counter-total"
                            }),
                            data: R,
                            borderColor: "#FFC107",
                            backgroundColor: "rgba(0,0,0,0)",
                            hidden: !1
                        });
                        return l.a.createElement("div", {
                            className: "eco-counter-content"
                        }, l.a.createElement("div", {
                            className: "eco-counter-content__title"
                        }, l.a.createElement("h6", null, l.a.createElement("button", {
                            onClick: this.onTitleClick
                        }, this.getTitle()), l.a.createElement("button", {
                            onClick: h
                        }, m({
                            id: "compare"
                        }), l.a.createElement(C.a, {
                            img: "icon-icon_arrow-collapse--right",
                            viewBox: "0 0 25 25"
                        }))), v && l.a.createElement("div", {
                            className: "eco-counter-content__date-picker"
                        }, l.a.createElement(S.DayPickerSingleDateController, {
                            date: u,
                            onDateChange: function(t) {
                                o(t), e.setState({
                                    isDatePickerOpen: !1
                                })
                            },
                            numberOfMonths: 1,
                            renderMonthElement: b
                        }))), l.a.createElement(T, {
                            datasets: E,
                            labels: k,
                            title: "Test"
                        }), l.a.createElement("div", {
                            className: "button-row"
                        }, g.includes(1) && l.a.createElement(F, {
                            condition: 1 === d,
                            onClick: function() {
                                return s(1)
                            }
                        }, l.a.createElement(C.a, {
                            img: "icon-icon_walk",
                            viewBox: "0 0 25 25"
                        })), g.includes(2) && l.a.createElement(F, {
                            condition: 2 === d,
                            onClick: function() {
                                return s(2)
                            }
                        }, l.a.createElement(C.a, {
                            img: "icon-icon_bicycle-withoutBox",
                            viewBox: "0 0 25 25"
                        }))), l.a.createElement("div", {
                            className: "button-row"
                        }, l.a.createElement(F, {
                            condition: p === O,
                            onClick: function() {
                                return c(O)
                            },
                            isSmall: !0
                        }, m({
                            id: "hourly"
                        })), l.a.createElement(F, {
                            condition: p === M,
                            onClick: function() {
                                return c(M)
                            },
                            isSmall: !0
                        }, m({
                            id: "daily"
                        })), l.a.createElement(F, {
                            condition: p === _,
                            onClick: function() {
                                return c(_)
                            },
                            isSmall: !0
                        }, m({
                            id: "weekly"
                        })), l.a.createElement(F, {
                            condition: p === P,
                            onClick: function() {
                                return c(P)
                            },
                            isSmall: !0
                        }, m({
                            id: "monthly"
                        }))), l.a.createElement("div", {
                            className: "analytics-row"
                        }, l.a.createElement("button", {
                            onClick: function() {
                                window.open(y, "_blank").focus()
                            },
                            "aria-label": m({
                                id: "additional-analytics"
                            })
                        }, m({
                            id: "additional-analytics"
                        }), l.a.createElement(C.a, {
                            img: "icon-icon_arrow-collapse--right",
                            viewBox: "0 0 25 25"
                        }))))
                    }, t
                }(l.a.Component);
            D.propTypes = {
                date: o.a.object.isRequired,
                channel1: I.isRequired,
                channel2: I,
                channel1Id: o.a.string.isRequired,
                channel2Id: o.a.string,
                channels: o.a.array.isRequired,
                changeDate: o.a.func.isRequired,
                changeUserType: o.a.func.isRequired,
                changeStep: o.a.func.isRequired,
                userType: o.a.number.isRequired,
                step: o.a.string.isRequired,
                formatMessage: o.a.func.isRequired,
                availableUserTypes: o.a.array.isRequired,
                toggleView: o.a.func.isRequired,
                renderMonthElement: o.a.func,
                openComparison: o.a.func,
                analyticsUrl: o.a.string.isRequired
            }, D.contextTypes = {
                router: h.routerShape.isRequired,
                location: h.locationShape.isRequired
            }, D.defaultProps = {
                channel2: null,
                channel2Id: null,
                renderMonthElement: null
            };
            var F = function(e) {
                var t = e.condition,
                    a = e.isSmall,
                    n = e.children,
                    i = e.onClick;
                return l.a.createElement("button", {
                    className: j()("eco-counter-button", {
                        "eco-counter-button--small": a,
                        "eco-counter-button--active": t
                    }),
                    onClick: i
                }, n)
            };
            F.propTypes = {
                condition: o.a.bool.isRequired,
                children: o.a.node.isRequired,
                onClick: o.a.func.isRequired,
                isSmall: o.a.bool
            }, F.defaultProps = {
                isSmall: !1
            };
            var q = u.a.createContainer(D, {
                    initialVariables: {
                        channel1Id: null,
                        channel2Id: null,
                        domain: null,
                        step: null,
                        begin: null,
                        end: null
                    },
                    fragments: {
                        channel1: function() {
                            return {
                                children: [{
                                    alias: "siteData",
                                    calls: [{
                                        kind: "Call",
                                        metadata: {},
                                        name: "id",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "channel1Id"
                                        }
                                    }, {
                                        kind: "Call",
                                        metadata: {
                                            type: "EcoCounterDomain!"
                                        },
                                        name: "domain",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "domain"
                                        }
                                    }, {
                                        kind: "Call",
                                        metadata: {
                                            type: "EcoCounterSiteDataStep"
                                        },
                                        name: "step",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "step"
                                        }
                                    }, {
                                        kind: "Call",
                                        metadata: {
                                            type: "GraphQLDateTime"
                                        },
                                        name: "begin",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "begin"
                                        }
                                    }, {
                                        kind: "Call",
                                        metadata: {
                                            type: "GraphQLDateTime"
                                        },
                                        name: "end",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "end"
                                        }
                                    }],
                                    children: [{
                                        fieldName: "date",
                                        kind: "Field",
                                        metadata: {},
                                        type: "GraphQLDateTime"
                                    }, {
                                        fieldName: "counts",
                                        kind: "Field",
                                        metadata: {},
                                        type: "Int"
                                    }, {
                                        fieldName: "status",
                                        kind: "Field",
                                        metadata: {},
                                        type: "Int"
                                    }],
                                    fieldName: "ecoCounterSiteData",
                                    kind: "Field",
                                    metadata: {
                                        canHaveSubselections: !0,
                                        isPlural: !0
                                    },
                                    type: "EcoCounterSiteData"
                                }],
                                id: u.a.QL.__id(),
                                kind: "Fragment",
                                metadata: {},
                                name: "EcoCounterContent_Channel1RelayQL",
                                type: "Query"
                            }
                        },
                        channel2: function() {
                            return {
                                children: [{
                                    alias: "siteData",
                                    calls: [{
                                        kind: "Call",
                                        metadata: {},
                                        name: "id",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "channel2Id"
                                        }
                                    }, {
                                        kind: "Call",
                                        metadata: {
                                            type: "EcoCounterDomain!"
                                        },
                                        name: "domain",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "domain"
                                        }
                                    }, {
                                        kind: "Call",
                                        metadata: {
                                            type: "EcoCounterSiteDataStep"
                                        },
                                        name: "step",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "step"
                                        }
                                    }, {
                                        kind: "Call",
                                        metadata: {
                                            type: "GraphQLDateTime"
                                        },
                                        name: "begin",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "begin"
                                        }
                                    }, {
                                        kind: "Call",
                                        metadata: {
                                            type: "GraphQLDateTime"
                                        },
                                        name: "end",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "end"
                                        }
                                    }],
                                    children: [{
                                        fieldName: "date",
                                        kind: "Field",
                                        metadata: {},
                                        type: "GraphQLDateTime"
                                    }, {
                                        fieldName: "counts",
                                        kind: "Field",
                                        metadata: {},
                                        type: "Int"
                                    }, {
                                        fieldName: "status",
                                        kind: "Field",
                                        metadata: {},
                                        type: "Int"
                                    }],
                                    fieldName: "ecoCounterSiteData",
                                    kind: "Field",
                                    metadata: {
                                        canHaveSubselections: !0,
                                        isPlural: !0
                                    },
                                    type: "EcoCounterSiteData"
                                }],
                                id: u.a.QL.__id(),
                                kind: "Fragment",
                                metadata: {},
                                name: "EcoCounterContent_Channel2RelayQL",
                                type: "Query"
                            }
                        }
                    }
                }),
                B = "RANGE1_START",
                V = "RANGE1_END",
                U = "RANGE2_START",
                H = "RANGE2_END",
                W = function(e) {
                    function t() {
                        for (var t, a = arguments.length, n = new Array(a), i = 0; i < a; i++) n[i] = arguments[i];
                        return (t = e.call.apply(e, [this].concat(n)) || this).state = {
                            isDatePickerOpen: !1,
                            openDatePicker: null,
                            range1HasError: !1,
                            range1ErrorRange: null,
                            range2HasError: !1,
                            range2ErrorRange: null
                        }, t.onTitleClick = function() {
                            t.setState({
                                isDatePickerOpen: !t.state.isDatePickerOpen
                            })
                        }, t.onDateChange = function(e) {
                            return function(a) {
                                var n;
                                switch (a.set("hour", 0), t.setState({
                                        isDatePickerOpen: !1,
                                        openDatePicker: null
                                    }), e) {
                                    case B:
                                        n = [a, t.props.range1[1]];
                                        break;
                                    case V:
                                        n = [t.props.range1[0], a];
                                        break;
                                    case U:
                                        n = [a, t.props.range2[1]];
                                        break;
                                    case H:
                                        n = [t.props.range2[0], a]
                                }
                                var i = t.isAllowedRange(n),
                                    r = e === B || e === V;
                                r ? t.setState({
                                    range1HasError: !i,
                                    range1ErrorRange: i ? null : n,
                                    range2HasError: t.state.range2HasError,
                                    range2ErrorRange: t.state.range2ErrorRange
                                }) : t.setState({
                                    range1HasError: t.state.range1HasError,
                                    range1ErrorRange: t.state.range1ErrorRange,
                                    range2HasError: !i,
                                    range2ErrorRange: i ? null : n
                                }), i && (r ? t.props.onRange1Change(n) : t.props.onRange2Change(n))
                            }
                        }, t.isAllowedRange = function(e) {
                            return e[1].diff(e[0], "days") > 0
                        }, t.toggleDatePicker = function(e) {
                            return function() {
                                t.state.openDatePicker === e ? t.setState({
                                    isDatePickerOpen: !1,
                                    openDatePicker: null
                                }) : t.setState({
                                    isDatePickerOpen: !0,
                                    openDatePicker: e
                                })
                            }
                        }, t
                    }
                    return Object(i.a)(t, e), t.prototype.render = function() {
                        var e = this.props,
                            t = e.range1,
                            a = e.range2,
                            n = e.renderMonthElement,
                            i = this.state,
                            r = i.isDatePickerOpen,
                            o = i.openDatePicker,
                            s = i.range1HasError,
                            c = i.range1ErrorRange,
                            u = i.range2ErrorRange,
                            d = i.range2HasError,
                            p = t[0],
                            m = t[1],
                            f = a[0],
                            g = a[1],
                            h = l.a.createElement("span", {
                                className: "icon-container"
                            }, l.a.createElement(C.a, {
                                img: "icon-icon_calendar",
                                viewBox: "0 0 25 25"
                            }));
                        return l.a.createElement("div", {
                            className: "eco-counter-content__comparison-dates"
                        }, l.a.createElement("div", {
                            className: "date-row"
                        }, l.a.createElement("div", {
                            className: "date-row__label"
                        }, this.props.formatMessage({
                            id: "1. time range"
                        })), l.a.createElement("div", {
                            className: "date-row__input-group"
                        }, l.a.createElement("div", {
                            className: "date-row__input-group__input-container"
                        }, l.a.createElement("button", {
                            className: "date-row__input-group__input",
                            onClick: this.toggleDatePicker(B),
                            "aria-label": this.props.formatMessage({
                                id: "choose-date",
                                defaultMessage: "Choose date"
                            }) + ", " + t[0].format("D.M.Y")
                        }, l.a.createElement("span", {
                            className: "value"
                        }, s ? c[0].format("D.M.Y") : t[0].format("D.M.Y")), h)), l.a.createElement("div", {
                            className: "date-row__input-group__separator"
                        }, "-"), l.a.createElement("div", {
                            className: "date-row__input-group__input-container"
                        }, l.a.createElement("button", {
                            className: "date-row__input-group__input",
                            onClick: this.toggleDatePicker(V),
                            "aria-label": this.props.formatMessage({
                                id: "choose-date",
                                defaultMessage: "Choose date"
                            }) + ", " + t[1].format("D.M.Y")
                        }, l.a.createElement("span", {
                            className: "value"
                        }, s ? c[1].format("D.M.Y") : t[1].format("D.M.Y")), h)), l.a.createElement("div", {
                            className: j()("datepicker-error", {
                                "is-visible": s
                            })
                        }, l.a.createElement("small", null, "" + this.props.formatMessage({
                            id: "choose-date-error",
                            defaultMessage: "The end date must be greater than the start date."
                        }))), l.a.createElement("div", {
                            className: j()("datepicker-container", {
                                "is-visible": r && o === B
                            })
                        }, l.a.createElement(S.DayPickerSingleDateController, {
                            date: p,
                            onDateChange: this.onDateChange(B),
                            numberOfMonths: 1,
                            renderMonthElement: n
                        })), l.a.createElement("div", {
                            className: j()("datepicker-container", {
                                "is-visible": r && o === V
                            })
                        }, l.a.createElement(S.DayPickerSingleDateController, {
                            date: m,
                            onDateChange: this.onDateChange(V),
                            numberOfMonths: 1,
                            renderMonthElement: n
                        })))), l.a.createElement("div", {
                            className: "date-row"
                        }, l.a.createElement("div", {
                            className: "date-row__label"
                        }, this.props.formatMessage({
                            id: "2. time range"
                        })), l.a.createElement("div", {
                            className: "date-row__input-group"
                        }, l.a.createElement("div", {
                            className: "date-row__input-group__input-container"
                        }, l.a.createElement("button", {
                            className: "date-row__input-group__input",
                            onClick: this.toggleDatePicker(U),
                            "aria-label": this.props.formatMessage({
                                id: "choose-date",
                                defaultMessage: "Choose date"
                            }) + ", " + a[0].format("D.M.Y")
                        }, l.a.createElement("span", {
                            className: "value"
                        }, d ? u[0].format("D.M.Y") : a[0].format("D.M.Y")), h)), l.a.createElement("div", {
                            className: "date-row__input-group__separator"
                        }, "-"), l.a.createElement("div", {
                            className: "date-row__input-group__input-container"
                        }, l.a.createElement("button", {
                            className: "date-row__input-group__input",
                            onClick: this.toggleDatePicker(H),
                            "aria-label": this.props.formatMessage({
                                id: "choose-date",
                                defaultMessage: "Choose date"
                            }) + ", " + a[1].format("D.M.Y")
                        }, l.a.createElement("span", {
                            className: "value"
                        }, d ? u[1].format("D.M.Y") : a[1].format("D.M.Y")), h)), l.a.createElement("div", {
                            className: j()("datepicker-error", {
                                "is-visible": d
                            })
                        }, l.a.createElement("small", null, "" + this.props.formatMessage({
                            id: "choose-date-error",
                            defaultMessage: "The end date must be greater than the start date."
                        }))), l.a.createElement("div", {
                            className: j()("datepicker-container", {
                                "is-visible": r && o === U
                            })
                        }, l.a.createElement(S.DayPickerSingleDateController, {
                            date: f,
                            onDateChange: this.onDateChange(U),
                            numberOfMonths: 1,
                            renderMonthElement: n
                        })), l.a.createElement("div", {
                            className: j()("datepicker-container", {
                                "is-visible": r && o === H
                            })
                        }, l.a.createElement(S.DayPickerSingleDateController, {
                            date: g,
                            onDateChange: this.onDateChange(H),
                            numberOfMonths: 1,
                            renderMonthElement: n
                        })))))
                    }, t
                }(l.a.Component);
            W.propTypes = {
                range1: o.a.arrayOf(o.a.object).isRequired,
                range2: o.a.arrayOf(o.a.object).isRequired,
                onRange1Change: o.a.func.isRequired,
                onRange2Change: o.a.func.isRequired,
                formatMessage: o.a.func.isRequired,
                toggleView: o.a.func.isRequired,
                renderMonthElement: o.a.func
            }, W.defaultProps = {
                renderMonthElement: null
            };
            var K = "hour",
                G = "day",
                z = "week",
                Y = "month",
                Q = o.a.shape({
                    date: o.a.string,
                    counts: o.a.number,
                    status: o.a.number
                }),
                J = o.a.shape({
                    siteData: o.a.arrayOf(Q)
                }),
                Z = function(e) {
                    function t() {
                        for (var t, a = arguments.length, n = new Array(a), i = 0; i < a; i++) n[i] = arguments[i];
                        return (t = e.call.apply(e, [this].concat(n)) || this).onTitleClick = function() {
                            t.setState({
                                isDatePickerOpen: !t.state.isDatePickerOpen
                            })
                        }, t.getChannelDirection = function(e) {
                            var a = t.props.channels.find((function(t) {
                                return t.id === e
                            }));
                            return a ? Object(f.a)(a, "direction", 5) : 5
                        }, t.getExportLabels = function(e) {
                            return Object(f.a)(e, "siteData", []).map((function(e) {
                                return t.formatExportDateByStep(e.date)
                            }))
                        }, t.formatDateByStep = function(e) {
                            var a = t.props.step,
                                n = m()(e);
                            return a === K ? n.format("HH:mm") : a === G || a === z ? n.format("DD.MM.") : n.format("MMM")
                        }, t.formatExportDateByStep = function(e) {
                            var a = t.props.step,
                                n = m()(e);
                            return a === K ? n.format("DD.MM.YYYY HH:mm") : a === G || a === z ? n.format("DD.MM.YYYY") : n.format("MMM YYYY")
                        }, t
                    }
                    return Object(i.a)(t, e), t.prototype.render = function() {
                        var e = this,
                            t = this.props,
                            a = t.range1channel1,
                            n = t.range1channel2,
                            i = t.range2channel1,
                            r = t.range2channel2,
                            o = t.channel1Id,
                            s = t.channel2Id,
                            c = t.changeUserType,
                            u = t.changeStep,
                            d = t.userType,
                            p = t.step,
                            m = t.formatMessage,
                            g = t.availableUserTypes,
                            h = t.range1,
                            b = t.range2,
                            y = t.changeRange1,
                            v = t.changeRange2,
                            k = t.allowedSteps,
                            j = t.renderMonthElement,
                            S = Object(f.a)(a, "siteData", []).map((function(t) {
                                return e.formatDateByStep(t.date)
                            })),
                            E = Object(f.a)(i, "siteData", []).map((function(t) {
                                return e.formatDateByStep(t.date)
                            })),
                            N = Object(f.a)(a, "siteData", []).map((function(e) {
                                var t = e.counts;
                                return t || 0
                            })),
                            R = Object(f.a)(i, "siteData", []).map((function(e) {
                                var t = e.counts;
                                return t || 0
                            })),
                            w = [{
                                label: m({
                                    id: "eco-counter-direction-" + this.getChannelDirection(o)
                                }),
                                data: N,
                                borderColor: "#dc3545",
                                backgroundColor: "rgba(0,0,0,0)",
                                hidden: !0
                            }],
                            O = [{
                                label: m({
                                    id: "eco-counter-direction-" + this.getChannelDirection(o)
                                }),
                                data: R,
                                borderColor: "#dc3545",
                                backgroundColor: "rgba(0,0,0,0)",
                                hidden: !0
                            }],
                            M = Object(f.a)(n, "siteData", []).map((function(e) {
                                var t = e.counts;
                                return t || 0
                            })),
                            _ = Object(f.a)(r, "siteData", []).map((function(e) {
                                var t = e.counts;
                                return t || 0
                            }));
                        n && (w.push({
                            label: m({
                                id: "eco-counter-direction-" + this.getChannelDirection(s)
                            }),
                            data: M,
                            borderColor: "#00AFFF",
                            backgroundColor: "rgba(0,0,0,0)",
                            hidden: !0
                        }), O.push({
                            label: m({
                                id: "eco-counter-direction-" + this.getChannelDirection(s)
                            }),
                            data: _,
                            borderColor: "#00AFFF",
                            backgroundColor: "rgba(0,0,0,0)",
                            hidden: !0
                        }));
                        var P = x([N, M]),
                            A = x([R, _]);
                        return P && P.length > 0 && w.push({
                            label: m({
                                id: "eco-counter-total"
                            }),
                            data: P,
                            borderColor: "#FFC107",
                            backgroundColor: "rgba(0,0,0,0)",
                            hidden: !1
                        }), A && A.length > 0 && O.push({
                            label: m({
                                id: "eco-counter-total"
                            }),
                            data: A,
                            borderColor: "#FFC107",
                            backgroundColor: "rgba(0,0,0,0)",
                            hidden: !1
                        }), l.a.createElement("div", {
                            className: "eco-counter-content"
                        }, l.a.createElement(W, {
                            range1: h,
                            range2: b,
                            onRange1Change: function(e) {
                                y(e)
                            },
                            onRange2Change: function(e) {
                                v(e)
                            },
                            onComparisonToggleClick: function() {
                                console.log("comparison toggle clicked")
                            },
                            formatMessage: m,
                            toggleView: this.props.toggleView,
                            renderMonthElement: j
                        }), l.a.createElement(T, {
                            datasets: w,
                            labels: S,
                            title: "Test"
                        }), l.a.createElement(T, {
                            datasets: O,
                            labels: E,
                            title: "Test"
                        }), l.a.createElement("div", {
                            className: "ecocounter-bottom"
                        }, l.a.createElement("div", {
                            className: "button-rows"
                        }, l.a.createElement("div", {
                            className: "button-row"
                        }, g.includes(1) && l.a.createElement($, {
                            condition: 1 === d,
                            onClick: function() {
                                return c(1)
                            }
                        }, l.a.createElement(C.a, {
                            img: "icon-icon_walk",
                            viewBox: "0 0 25 25"
                        })), g.includes(2) && l.a.createElement($, {
                            condition: 2 === d,
                            onClick: function() {
                                return c(2)
                            }
                        }, l.a.createElement(C.a, {
                            img: "icon-icon_bicycle-withoutBox",
                            viewBox: "0 0 25 25"
                        }))), l.a.createElement("div", {
                            className: "button-row"
                        }, l.a.createElement($, {
                            condition: p === K,
                            onClick: function() {
                                return u(K)
                            },
                            disabled: !k.includes(K),
                            isSmall: !0
                        }, m({
                            id: "hourly"
                        })), l.a.createElement($, {
                            condition: p === G,
                            onClick: function() {
                                return u(G)
                            },
                            disabled: !k.includes(G),
                            isSmall: !0
                        }, m({
                            id: "daily"
                        })), l.a.createElement($, {
                            condition: p === z,
                            onClick: function() {
                                return u(z)
                            },
                            disabled: !k.includes(z),
                            isSmall: !0
                        }, m({
                            id: "weekly"
                        })), l.a.createElement($, {
                            condition: p === Y,
                            onClick: function() {
                                return u(Y)
                            },
                            disabled: !k.includes(Y),
                            isSmall: !0
                        }, m({
                            id: "monthly"
                        }))), l.a.createElement("div", {
                            className: "button-row"
                        }, l.a.createElement("button", {
                            onClick: function() {
                                return L(w, e.getExportLabels(a))
                            },
                            className: "eco-counter-button eco-counter-button--small export-button"
                        }, l.a.createElement(C.a, {
                            img: "icon-icon_export",
                            viewBox: "0 0 384 512"
                        }), m({
                            id: "export-time-range-1"
                        })), l.a.createElement("button", {
                            onClick: function() {
                                return L(O, e.getExportLabels(i))
                            },
                            className: "eco-counter-button eco-counter-button--small export-button"
                        }, l.a.createElement(C.a, {
                            img: "icon-icon_export",
                            viewBox: "0 0 384 512"
                        }), m({
                            id: "export-time-range-2"
                        }))))))
                    }, t
                }(l.a.Component);
            Z.propTypes = {
                range1: o.a.arrayOf(o.a.object).isRequired,
                range2: o.a.arrayOf(o.a.object).isRequired,
                range1channel1: J.isRequired,
                range1channel2: J,
                range2channel1: J.isRequired,
                range2channel2: J,
                channel1Id: o.a.string.isRequired,
                channel2Id: o.a.string,
                channels: o.a.array.isRequired,
                changeUserType: o.a.func.isRequired,
                changeStep: o.a.func.isRequired,
                userType: o.a.number.isRequired,
                step: o.a.string.isRequired,
                formatMessage: o.a.func.isRequired,
                availableUserTypes: o.a.array.isRequired,
                changeRange1: o.a.func.isRequired,
                changeRange2: o.a.func.isRequired,
                toggleView: o.a.func.isRequired,
                allowedSteps: o.a.arrayOf(o.a.string),
                renderMonthElement: o.a.func
            }, Z.defaultProps = {
                range1channel2: null,
                range2channel2: null,
                channel2Id: null,
                renderMonthElement: null
            };
            var $ = function(e) {
                var t = e.condition,
                    a = e.isSmall,
                    n = e.children,
                    i = e.onClick,
                    r = e.disabled;
                return l.a.createElement("button", {
                    className: j()("eco-counter-button", {
                        "eco-counter-button--small": a,
                        "eco-counter-button--active": t,
                        "eco-counter-button--disabled": r
                    }),
                    onClick: i
                }, n)
            };
            $.propTypes = {
                condition: o.a.bool.isRequired,
                children: o.a.node.isRequired,
                onClick: o.a.func.isRequired,
                isSmall: o.a.bool,
                disabled: o.a.bool
            }, $.defaultProps = {
                isSmall: !1,
                disabled: !1
            };
            var X = u.a.createContainer(Z, {
                    initialVariables: {
                        channel1Id: null,
                        channel2Id: null,
                        domain: null,
                        step: null,
                        range1begin: null,
                        range1end: null,
                        range2begin: null,
                        range2end: null
                    },
                    fragments: {
                        range1channel1: function() {
                            return {
                                children: [{
                                    alias: "siteData",
                                    calls: [{
                                        kind: "Call",
                                        metadata: {},
                                        name: "id",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "channel1Id"
                                        }
                                    }, {
                                        kind: "Call",
                                        metadata: {
                                            type: "EcoCounterDomain!"
                                        },
                                        name: "domain",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "domain"
                                        }
                                    }, {
                                        kind: "Call",
                                        metadata: {
                                            type: "EcoCounterSiteDataStep"
                                        },
                                        name: "step",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "step"
                                        }
                                    }, {
                                        kind: "Call",
                                        metadata: {
                                            type: "GraphQLDateTime"
                                        },
                                        name: "begin",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "range1begin"
                                        }
                                    }, {
                                        kind: "Call",
                                        metadata: {
                                            type: "GraphQLDateTime"
                                        },
                                        name: "end",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "range1end"
                                        }
                                    }],
                                    children: [{
                                        fieldName: "date",
                                        kind: "Field",
                                        metadata: {},
                                        type: "GraphQLDateTime"
                                    }, {
                                        fieldName: "counts",
                                        kind: "Field",
                                        metadata: {},
                                        type: "Int"
                                    }, {
                                        fieldName: "status",
                                        kind: "Field",
                                        metadata: {},
                                        type: "Int"
                                    }],
                                    fieldName: "ecoCounterSiteData",
                                    kind: "Field",
                                    metadata: {
                                        canHaveSubselections: !0,
                                        isPlural: !0
                                    },
                                    type: "EcoCounterSiteData"
                                }],
                                id: u.a.QL.__id(),
                                kind: "Fragment",
                                metadata: {},
                                name: "EcoCounterComparisonContent_Range1channel1RelayQL",
                                type: "Query"
                            }
                        },
                        range1channel2: function() {
                            return {
                                children: [{
                                    alias: "siteData",
                                    calls: [{
                                        kind: "Call",
                                        metadata: {},
                                        name: "id",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "channel2Id"
                                        }
                                    }, {
                                        kind: "Call",
                                        metadata: {
                                            type: "EcoCounterDomain!"
                                        },
                                        name: "domain",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "domain"
                                        }
                                    }, {
                                        kind: "Call",
                                        metadata: {
                                            type: "EcoCounterSiteDataStep"
                                        },
                                        name: "step",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "step"
                                        }
                                    }, {
                                        kind: "Call",
                                        metadata: {
                                            type: "GraphQLDateTime"
                                        },
                                        name: "begin",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "range1begin"
                                        }
                                    }, {
                                        kind: "Call",
                                        metadata: {
                                            type: "GraphQLDateTime"
                                        },
                                        name: "end",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "range1end"
                                        }
                                    }],
                                    children: [{
                                        fieldName: "date",
                                        kind: "Field",
                                        metadata: {},
                                        type: "GraphQLDateTime"
                                    }, {
                                        fieldName: "counts",
                                        kind: "Field",
                                        metadata: {},
                                        type: "Int"
                                    }, {
                                        fieldName: "status",
                                        kind: "Field",
                                        metadata: {},
                                        type: "Int"
                                    }],
                                    fieldName: "ecoCounterSiteData",
                                    kind: "Field",
                                    metadata: {
                                        canHaveSubselections: !0,
                                        isPlural: !0
                                    },
                                    type: "EcoCounterSiteData"
                                }],
                                id: u.a.QL.__id(),
                                kind: "Fragment",
                                metadata: {},
                                name: "EcoCounterComparisonContent_Range1channel2RelayQL",
                                type: "Query"
                            }
                        },
                        range2channel1: function() {
                            return {
                                children: [{
                                    alias: "siteData",
                                    calls: [{
                                        kind: "Call",
                                        metadata: {},
                                        name: "id",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "channel1Id"
                                        }
                                    }, {
                                        kind: "Call",
                                        metadata: {
                                            type: "EcoCounterDomain!"
                                        },
                                        name: "domain",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "domain"
                                        }
                                    }, {
                                        kind: "Call",
                                        metadata: {
                                            type: "EcoCounterSiteDataStep"
                                        },
                                        name: "step",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "step"
                                        }
                                    }, {
                                        kind: "Call",
                                        metadata: {
                                            type: "GraphQLDateTime"
                                        },
                                        name: "begin",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "range2begin"
                                        }
                                    }, {
                                        kind: "Call",
                                        metadata: {
                                            type: "GraphQLDateTime"
                                        },
                                        name: "end",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "range2end"
                                        }
                                    }],
                                    children: [{
                                        fieldName: "date",
                                        kind: "Field",
                                        metadata: {},
                                        type: "GraphQLDateTime"
                                    }, {
                                        fieldName: "counts",
                                        kind: "Field",
                                        metadata: {},
                                        type: "Int"
                                    }, {
                                        fieldName: "status",
                                        kind: "Field",
                                        metadata: {},
                                        type: "Int"
                                    }],
                                    fieldName: "ecoCounterSiteData",
                                    kind: "Field",
                                    metadata: {
                                        canHaveSubselections: !0,
                                        isPlural: !0
                                    },
                                    type: "EcoCounterSiteData"
                                }],
                                id: u.a.QL.__id(),
                                kind: "Fragment",
                                metadata: {},
                                name: "EcoCounterComparisonContent_Range2channel1RelayQL",
                                type: "Query"
                            }
                        },
                        range2channel2: function() {
                            return {
                                children: [{
                                    alias: "siteData",
                                    calls: [{
                                        kind: "Call",
                                        metadata: {},
                                        name: "id",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "channel2Id"
                                        }
                                    }, {
                                        kind: "Call",
                                        metadata: {
                                            type: "EcoCounterDomain!"
                                        },
                                        name: "domain",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "domain"
                                        }
                                    }, {
                                        kind: "Call",
                                        metadata: {
                                            type: "EcoCounterSiteDataStep"
                                        },
                                        name: "step",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "step"
                                        }
                                    }, {
                                        kind: "Call",
                                        metadata: {
                                            type: "GraphQLDateTime"
                                        },
                                        name: "begin",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "range2begin"
                                        }
                                    }, {
                                        kind: "Call",
                                        metadata: {
                                            type: "GraphQLDateTime"
                                        },
                                        name: "end",
                                        value: {
                                            kind: "CallVariable",
                                            callVariableName: "range2end"
                                        }
                                    }],
                                    children: [{
                                        fieldName: "date",
                                        kind: "Field",
                                        metadata: {},
                                        type: "GraphQLDateTime"
                                    }, {
                                        fieldName: "counts",
                                        kind: "Field",
                                        metadata: {},
                                        type: "Int"
                                    }, {
                                        fieldName: "status",
                                        kind: "Field",
                                        metadata: {},
                                        type: "Int"
                                    }],
                                    fieldName: "ecoCounterSiteData",
                                    kind: "Field",
                                    metadata: {
                                        canHaveSubselections: !0,
                                        isPlural: !0
                                    },
                                    type: "EcoCounterSiteData"
                                }],
                                id: u.a.QL.__id(),
                                kind: "Fragment",
                                metadata: {},
                                name: "EcoCounterComparisonContent_Range2channel2RelayQL",
                                type: "Query"
                            }
                        }
                    }
                }),
                ee = function(e) {
                    function t() {
                        return e.apply(this, arguments) || this
                    }
                    return Object(i.a)(t, e), t
                }(u.a.Route);
            ee.queries = {
                channel1: function(e, t) {
                    return a = e.getFragment("channel1", t), {
                        children: [].concat.apply([], [u.a.QL.__frag(a)]),
                        fieldName: "viewer",
                        kind: "Query",
                        metadata: {},
                        name: "EcoCounterDualChannelRoute",
                        type: "Query"
                    };
                    var a
                },
                channel2: function(e, t) {
                    return a = e.getFragment("channel2", t), {
                        children: [].concat.apply([], [u.a.QL.__frag(a)]),
                        fieldName: "viewer",
                        kind: "Query",
                        metadata: {},
                        name: "EcoCounterDualChannelRoute",
                        type: "Query"
                    };
                    var a
                }
            }, ee.paramDefinitions = {
                domain: {
                    required: !0
                },
                channel1Id: {
                    required: !0
                },
                channel2Id: {
                    required: !0
                },
                step: {
                    required: !1
                },
                begin: {
                    required: !1
                },
                end: {
                    required: !1
                }
            }, ee.routeName = "EcoCounterDualChannelRoute";
            var te = ee,
                ae = function(e) {
                    function t() {
                        return e.apply(this, arguments) || this
                    }
                    return Object(i.a)(t, e), t
                }(u.a.Route);
            ae.queries = {
                channel1: function(e, t) {
                    return a = e.getFragment("channel1", t), {
                        children: [].concat.apply([], [u.a.QL.__frag(a)]),
                        fieldName: "viewer",
                        kind: "Query",
                        metadata: {},
                        name: "EcoCounterSingleChannelRoute",
                        type: "Query"
                    };
                    var a
                }
            }, ae.paramDefinitions = {
                domain: {
                    required: !0
                },
                channel1Id: {
                    required: !0
                },
                step: {
                    required: !1
                },
                begin: {
                    required: !1
                },
                end: {
                    required: !1
                }
            }, ae.routeName = "EcoCounterSingleChannelRoute";
            var ne = ae,
                ie = function(e) {
                    function t() {
                        return e.apply(this, arguments) || this
                    }
                    return Object(i.a)(t, e), t
                }(u.a.Route);
            ie.queries = {
                range1channel1: function(e, t) {
                    return a = e.getFragment("range1channel1", t), {
                        children: [].concat.apply([], [u.a.QL.__frag(a)]),
                        fieldName: "viewer",
                        kind: "Query",
                        metadata: {},
                        name: "EcoCounterComparisonDualChannelRoute",
                        type: "Query"
                    };
                    var a
                },
                range1channel2: function(e, t) {
                    return a = e.getFragment("range1channel2", t), {
                        children: [].concat.apply([], [u.a.QL.__frag(a)]),
                        fieldName: "viewer",
                        kind: "Query",
                        metadata: {},
                        name: "EcoCounterComparisonDualChannelRoute",
                        type: "Query"
                    };
                    var a
                },
                range2channel1: function(e, t) {
                    return a = e.getFragment("range2channel1", t), {
                        children: [].concat.apply([], [u.a.QL.__frag(a)]),
                        fieldName: "viewer",
                        kind: "Query",
                        metadata: {},
                        name: "EcoCounterComparisonDualChannelRoute",
                        type: "Query"
                    };
                    var a
                },
                range2channel2: function(e, t) {
                    return a = e.getFragment("range2channel2", t), {
                        children: [].concat.apply([], [u.a.QL.__frag(a)]),
                        fieldName: "viewer",
                        kind: "Query",
                        metadata: {},
                        name: "EcoCounterComparisonDualChannelRoute",
                        type: "Query"
                    };
                    var a
                }
            }, ie.paramDefinitions = {
                domain: {
                    required: !0
                },
                channel1Id: {
                    required: !0
                },
                channel2Id: {
                    required: !0
                },
                step: {
                    required: !1
                },
                range1begin: {
                    required: !1
                },
                range1end: {
                    required: !1
                },
                range2begin: {
                    required: !1
                },
                range2end: {
                    required: !1
                }
            }, ie.routeName = "EcoCounterComparisonDualChannelRoute";
            var re = ie,
                oe = function(e) {
                    function t() {
                        return e.apply(this, arguments) || this
                    }
                    return Object(i.a)(t, e), t
                }(u.a.Route);
            oe.queries = {
                range1channel1: function(e, t) {
                    return a = e.getFragment("range1channel1", t), {
                        children: [].concat.apply([], [u.a.QL.__frag(a)]),
                        fieldName: "viewer",
                        kind: "Query",
                        metadata: {},
                        name: "EcoCounterComparisonSingleChannelRoute",
                        type: "Query"
                    };
                    var a
                },
                range2channel1: function(e, t) {
                    return a = e.getFragment("range2channel1", t), {
                        children: [].concat.apply([], [u.a.QL.__frag(a)]),
                        fieldName: "viewer",
                        kind: "Query",
                        metadata: {},
                        name: "EcoCounterComparisonSingleChannelRoute",
                        type: "Query"
                    };
                    var a
                }
            }, oe.paramDefinitions = {
                domain: {
                    required: !0
                },
                channel1Id: {
                    required: !0
                },
                step: {
                    required: !1
                },
                range1begin: {
                    required: !1
                },
                range1end: {
                    required: !1
                },
                range2begin: {
                    required: !1
                },
                range2end: {
                    required: !1
                }
            }, oe.routeName = "EcoCounterComparisonSingleChannelRoute";
            var se, le = oe,
                ce = a("./app/component/LoadingPage.js"),
                ue = a("./app/component/NetworkError.js"),
                de = "hour",
                pe = "day",
                me = "week",
                fe = "month",
                ge = "single",
                he = "comparison",
                be = function(e) {
                    function t(t, a) {
                        var i;
                        (i = e.call(this, t, a) || this).availableUserTypes = Object(d.a)(i.props.channels.map((function(e) {
                            return e.userType
                        }))), i.getRange1Begin = function() {
                            return i.state.comparisonRange1[0]
                        }, i.getRange1End = function() {
                            return i.state.comparisonRange1[1]
                        }, i.getRange2Begin = function() {
                            return i.state.comparisonRange2[0]
                        }, i.getRange2End = function() {
                            return i.state.comparisonRange2[1]
                        }, i.getBegin = function() {
                            var e = i.state.step,
                                t = i.state.date.clone();
                            switch (e) {
                                case fe:
                                    return t.startOf("year");
                                case me:
                                    return t.startOf("month");
                                case pe:
                                    return t.startOf("week");
                                default:
                                    return t.startOf("day")
                            }
                        }, i.getEnd = function() {
                            var e = i.state.step,
                                t = i.state.date.clone();
                            switch (e) {
                                case fe:
                                    return t.endOf("year");
                                case me:
                                    return t.endOf("month");
                                case pe:
                                    return t.endOf("week");
                                default:
                                    return t.add(1, "day").startOf("day")
                            }
                        }, i.formatDate = function(e) {
                            return e.utc().format("YYYY-MM-DDTHH:mm:ssZ")
                        }, i.getChannelsByUserType = function() {
                            return (i.props.channels || []).filter((function(e) {
                                return e.userType === i.state.userType
                            }))
                        }, i.changeStep = function(e) {
                            i.setState({
                                step: e
                            })
                        }, i.changeUserType = function(e) {
                            i.setState({
                                userType: e
                            })
                        }, i.changeDate = function(e) {
                            i.setState({
                                date: e
                            })
                        }, i.toggleView = function() {
                            var e = i.state.view,
                                t = i.state.step,
                                a = e === ge ? he : ge;
                            if (a === he) {
                                var n = i.getAllowedSteps(i.state.comparisonRange1, i.state.comparisonRange2);
                                !1 === n.includes(t) && (t = n[0])
                            }
                            i.setState({
                                step: t,
                                view: a
                            })
                        }, i.openComparison = function(e) {
                            e.preventDefault();
                            var t = i.context,
                                a = t.router,
                                r = t.location;
                            a.push(Object(n.a)({}, r, {
                                state: Object(n.a)({}, r.state, {
                                    ecoCounterComparisonOpen: !0,
                                    ecoCounterProps: {
                                        channels: i.props.channels,
                                        domain: i.props.domain,
                                        name: i.props.name,
                                        initialBegin: i.getBegin(),
                                        initialEnd: i.getEnd(),
                                        initialStep: i.state.step
                                    }
                                })
                            }))
                        }, i.getAllowedSteps = function(e, t) {
                            var a = e[0],
                                n = e[1],
                                i = t[0],
                                r = t[1],
                                o = Math.max(n.diff(a, "days"), r.diff(i, "days"));
                            return o <= 7 ? [de, pe] : o <= 31 ? [pe, me] : [me, fe]
                        }, i.changeComparisonRange = function(e, t) {
                            var a = i.getAllowedSteps(e, t);
                            i.setState({
                                comparisonRange1: e,
                                comparisonRange2: t,
                                step: a.includes(i.state.step) ? i.state.step : a[0]
                            })
                        }, i.getYears = function() {
                            for (var e = [], t = m()().year(); t >= 2010; t--) e.push(l.a.createElement("option", {
                                key: "_" + t,
                                value: t
                            }, t));
                            return e
                        }, i.getMonths = function() {
                            return m.a.months().map((function(e, t) {
                                return l.a.createElement("option", {
                                    key: e,
                                    value: t
                                }, e)
                            }))
                        }, i.renderMonthElement = function(e) {
                            var t = e.month,
                                a = e.onYearSelect,
                                n = e.onMonthSelect;
                            return l.a.createElement("div", {
                                className: "eco-counter-popup-month-element"
                            }, l.a.createElement("select", {
                                value: t.month(),
                                onChange: function(e) {
                                    return n(t, parseInt(e.target.value, 10))
                                }
                            }, i.getMonths()), l.a.createElement("select", {
                                value: t.year(),
                                onChange: function(e) {
                                    return a(t, e.target.value)
                                }
                            }, i.getYears()))
                        };
                        var r = t.initialBegin && t.initialBegin._isValid ? t.initialBegin : m()().subtract(1, "day"),
                            o = t.initialEnd && t.initialEnd._isValid ? t.initialEnd : m()(),
                            s = t.initialStep || de;
                        return i.state = {
                            view: t.isComparison ? he : ge,
                            date: r,
                            userType: i.availableUserTypes.includes(2) ? 2 : i.availableUserTypes[0],
                            step: s,
                            comparisonRange1: [r, o],
                            comparisonRange2: [r, o]
                        }, i
                    }
                    return Object(i.a)(t, e), t.prototype.render = function() {
                        var e, t = this,
                            a = this.getChannelsByUserType(),
                            n = this.state,
                            i = n.view,
                            r = n.comparisonRange1,
                            o = n.comparisonRange2;
                        if (i === he) {
                            var s = this.state.comparisonRange1,
                                c = s[0],
                                d = s[1],
                                p = this.state.comparisonRange2,
                                m = p[0],
                                g = p[1];
                            e = a.length > 1 ? new re({
                                channel1Id: Object(f.a)(a, "[0].id"),
                                channel2Id: Object(f.a)(a, "[1].id"),
                                domain: this.props.domain,
                                range1begin: c,
                                range1end: d,
                                range2begin: m,
                                range2end: g,
                                step: this.state.step
                            }) : new le({
                                channel1Id: Object(f.a)(a, "[0].id"),
                                domain: this.props.domain,
                                range1begin: c,
                                range1end: d,
                                range2begin: m,
                                range2end: g,
                                step: this.state.step
                            })
                        } else {
                            var h = this.formatDate(this.getBegin()),
                                v = this.formatDate(this.getEnd());
                            e = a.length > 1 ? new te({
                                channel1Id: Object(f.a)(a, "[0].id"),
                                channel2Id: Object(f.a)(a, "[1].id"),
                                domain: this.props.domain,
                                begin: h,
                                step: this.state.step,
                                end: v
                            }) : new ne({
                                channel1Id: Object(f.a)(a, "[0].id"),
                                domain: this.props.domain,
                                begin: h,
                                step: this.state.step,
                                end: v
                            })
                        }
                        return l.a.createElement("div", {
                            className: "card " + i
                        }, l.a.createElement(b.a, {
                            className: "padding-small"
                        }, l.a.createElement(y.a, {
                            name: this.context.intl.formatMessage({
                                id: "eco-counter",
                                defaultMessage: "Eco counter"
                            }),
                            description: this.props.name,
                            icon: "icon-icon_eco-counter",
                            unlinked: !0
                        }), l.a.createElement(u.a.Renderer, {
                            Container: i === ge ? q : X,
                            queryConfig: e,
                            environment: u.a.Store,
                            render: function(e) {
                                var n = e.done,
                                    s = e.error,
                                    c = e.loading,
                                    u = e.retry,
                                    d = e.props;
                                return n ? i === ge ? l.a.createElement(q, Object.assign({}, d, {
                                    date: t.state.date,
                                    channels: a,
                                    changeUserType: t.changeUserType,
                                    changeStep: t.changeStep,
                                    changeDate: t.changeDate,
                                    userType: t.state.userType,
                                    step: t.state.step,
                                    formatMessage: t.context.intl.formatMessage,
                                    availableUserTypes: t.availableUserTypes,
                                    toggleView: t.toggleView,
                                    renderMonthElement: t.renderMonthElement,
                                    openComparison: t.openComparison,
                                    analyticsUrl: t.context.config.URL.ANALYTICS
                                })) : l.a.createElement(X, Object.assign({}, d, {
                                    channels: a,
                                    changeUserType: t.changeUserType,
                                    changeStep: t.changeStep,
                                    userType: t.state.userType,
                                    step: t.state.step,
                                    formatMessage: t.context.intl.formatMessage,
                                    availableUserTypes: t.availableUserTypes,
                                    toggleView: t.toggleView,
                                    range1: r,
                                    range2: o,
                                    changeRange1: function(e) {
                                        t.changeComparisonRange(e, o)
                                    },
                                    changeRange2: function(e) {
                                        t.changeComparisonRange(r, e)
                                    },
                                    allowedSteps: t.getAllowedSteps(r, o),
                                    renderMonthElement: t.renderMonthElement
                                })) : c ? l.a.createElement(ce.a, null) : s ? l.a.createElement(ue.a, {
                                    retry: u
                                }) : void 0
                            }
                        })))
                    }, t
                }(l.a.Component);
            se = be, be.displayName = "EcoCounterPopup", be.propTypes = {
                domain: o.a.string.isRequired,
                name: o.a.string.isRequired,
                channels: o.a.array.isRequired,
                isComparison: o.a.bool,
                initialBegin: o.a.object,
                initialEnd: o.a.object,
                initialStep: o.a.string
            }, be.defaultProps = {
                isComparison: !1,
                initialBegin: void 0,
                initialEnd: void 0,
                initialStep: void 0
            }, be.contextTypes = {
                intl: g.d.isRequired,
                router: h.routerShape.isRequired,
                location: h.locationShape.isRequired,
                config: o.a.object.isRequired
            }, be.description = l.a.createElement("div", null, l.a.createElement("p", null, "Renders an eco counter popup."), l.a.createElement(v.a, {
                description: ""
            }, l.a.createElement(se, {
                domain: "",
                name: "",
                channels: [],
                context: "context object here"
            })));
            t.a = be
        },
        "./app/configurations/images lazy recursive ^\\.\\/.*$": function(e, t, a) {
            var n = {
                "./default/digitransit-logo.png": ["./app/configurations/images/default/digitransit-logo.png", "main0"],
                "./default/dotted-line-bg.png": ["./app/configurations/images/default/dotted-line-bg.png", "main1"],
                "./default/dotted-line-bg2.png": ["./app/configurations/images/default/dotted-line-bg2.png", "main2"],
                "./default/favicon.png": ["./app/configurations/images/default/favicon.png", "main3"],
                "./default/favourites_empty_tip.png": ["./app/configurations/images/default/favourites_empty_tip.png"],
                "./hameenlinna/favicon.png": ["./app/configurations/images/hameenlinna/favicon.png", "main5"],
                "./hameenlinna/logo.png": ["./app/configurations/images/hameenlinna/logo.png", "main6"],
                "./hsl/icon_favicon-reittiopas.svg": ["./app/configurations/images/hsl/icon_favicon-reittiopas.svg", "main7"],
                "./hsl/reittiopas-logo.svg": ["./app/configurations/images/hsl/reittiopas-logo.svg", "main8"],
                "./joensuu/favicon.png": ["./app/configurations/images/joensuu/favicon.png", "main9"],
                "./joensuu/jojo-logo.png": ["./app/configurations/images/joensuu/jojo-logo.png", "main10"],
                "./jyvaskyla/favicon.png": ["./app/configurations/images/jyvaskyla/favicon.png", "main11"],
                "./kotka/ksjl.png": ["./app/configurations/images/kotka/ksjl.png", "main12"],
                "./kouvola/favicon.png": ["./app/configurations/images/kouvola/favicon.png", "main13"],
                "./kouvola/logo.png": ["./app/configurations/images/kouvola/logo.png", "main14"],
                "./kuopio/favicon.png": ["./app/configurations/images/kuopio/favicon.png", "main15"],
                "./kuopio/logo.png": ["./app/configurations/images/kuopio/logo.png", "main16"],
                "./lahti/favicon.png": ["./app/configurations/images/lahti/favicon.png", "main17"],
                "./lahti/lahti-logo.png": ["./app/configurations/images/lahti/lahti-logo.png", "main18"],
                "./lappeenranta/bussi_fin.jpeg": ["./app/configurations/images/lappeenranta/bussi_fin.jpeg", "main19"],
                "./matka/icon_favicon-matkafi.svg": ["./app/configurations/images/matka/icon_favicon-matkafi.svg", "main20"],
                "./matka/matka-logo.png": ["./app/configurations/images/matka/matka-logo.png", "main21"],
                "./oulu/favicon.png": ["./app/configurations/images/oulu/favicon.png", "main22"],
                "./oulu/oulu-logo.png": ["./app/configurations/images/oulu/oulu-logo.png", "main23"],
                "./rovaniemi/favicon.png": ["./app/configurations/images/rovaniemi/favicon.png", "main24"],
                "./rovaniemi/rovaniemi-logo.svg": ["./app/configurations/images/rovaniemi/rovaniemi-logo.svg", "main25"],
                "./tampere/favicon.png": ["./app/configurations/images/tampere/favicon.png", "main26"],
                "./tampere/tampere-logo.png": ["./app/configurations/images/tampere/tampere-logo.png", "main27"],
                "./turku/favicon.png": ["./app/configurations/images/turku/favicon.png", "main28"],
                "./turku/foli-logo.png": ["./app/configurations/images/turku/foli-logo.png", "main29"]
            };

            function i(e) {
                if (!a.o(n, e)) return Promise.resolve().then((function() {
                    var t = new Error("Cannot find module '" + e + "'");
                    throw t.code = "MODULE_NOT_FOUND", t
                }));
                var t = n[e],
                    i = t[0];
                return Promise.all(t.slice(1).map(a.e)).then((function() {
                    return a(i)
                }))
            }
            i.keys = function() {
                return Object.keys(n)
            }, i.id = "./app/configurations/images lazy recursive ^\\.\\/.*$", e.exports = i
        },
        "./app/configurations/images/default/favourites_empty_tip.png": function(e, t, a) {
            "use strict";
            a.r(t), t.default = a.p + "1e231c09a170a3b6607bcac47330cbdb.png"
        },
        "./app/constants.js": function(e, t, a) {
            "use strict";
            a.d(t, "q", (function() {
                return i
            })), a.d(t, "r", (function() {
                return r
            })), a.d(t, "n", (function() {
                return o
            })), a.d(t, "o", (function() {
                return s
            })), a.d(t, "h", (function() {
                return l
            })), a.d(t, "f", (function() {
                return c
            })), a.d(t, "p", (function() {
                return u
            })), a.d(t, "m", (function() {
                return d
            })), a.d(t, "i", (function() {
                return p
            })), a.d(t, "j", (function() {
                return m
            })), a.d(t, "k", (function() {
                return f
            })), a.d(t, "e", (function() {
                return g
            })), a.d(t, "a", (function() {
                return h
            })), a.d(t, "b", (function() {
                return b
            })), a.d(t, "d", (function() {
                return y
            })), a.d(t, "c", (function() {
                return v
            })), a.d(t, "l", (function() {
                return k
            })), a.d(t, "g", (function() {
                return j
            }));
            var n = a("./node_modules/@babel/runtime/helpers/esm/extends.js"),
                i = {
                    Bicycle: "BICYCLE",
                    Car: "CAR",
                    ParkAndRide: "CAR_PARK",
                    Walk: "WALK"
                },
                r = {
                    Airplane: "AIRPLANE",
                    Bus: "BUS",
                    Citybike: "CITYBIKE",
                    Ferry: "FERRY",
                    Rail: "RAIL",
                    Subway: "Subway",
                    Tram: "TRAM"
                },
                o = (Object(n.a)({}, i, r), {
                    Flat: "FLAT",
                    Greenways: "GREENWAYS",
                    Quick: "QUICK",
                    Safe: "SAFE",
                    Triangle: "TRIANGLE"
                }),
                s = {
                    DefaultRoute: "default-route",
                    LeastElevationChanges: "least-elevation-changes",
                    LeastTransfers: "least-transfers",
                    LeastWalking: "least-walking",
                    PreferGreenways: "prefer-greenways",
                    PreferWalkingRoutes: "prefer-walking-routes",
                    SavedSettings: "saved-settings"
                },
                l = {
                    1370: "#582403",
                    1367: "#ff5600",
                    1368: "#ff5600",
                    1369: "#ff5600",
                    1366: "#F347E8",
                    2864: "#F347E8",
                    1357: "#9073ac",
                    99901: "#9073ac",
                    0: "#1C95F2",
                    "99902-car": "#582403",
                    "99902-bicycle": "#ff5600"
                },
                c = [99901, 1357],
                u = 99902,
                d = [1370, 1367, 1368, 1369, 1366, 2864, 1357, 99901],
                p = [1370, 1369, 1366, 1357, 0],
                m = {
                    1370: 1,
                    1367: 2,
                    1368: 3,
                    1369: 4,
                    1366: 5,
                    2864: 6,
                    1357: 7,
                    99901: 8,
                    99902: 9,
                    0: 10
                },
                f = 120,
                g = {
                    "MAIN_REGIONAL-MAIN": {
                        color: "#FF4B00",
                        dashed: !1
                    },
                    "MAIN_REGIONAL-REGIONAL": {
                        color: "#0065FF",
                        dashed: !1
                    },
                    "MAIN_REGIONAL-PLANNED_MAIN": {
                        color: "#FF4B00",
                        dashed: !0
                    },
                    "MAIN_REGIONAL-PLANNED_REGIONAL": {
                        color: "#0065FF",
                        dashed: !0
                    }
                },
                h = {
                    "BAANA-PLANNED": {
                        color: "#191919",
                        dashed: !0
                    },
                    "BAANA-CURRENT": {
                        color: "#191919",
                        dashed: !1
                    }
                },
                b = {
                    "BRAND-MAIN": {
                        color: "#FF06BE",
                        dashed: !1
                    },
                    "BRAND-PERIMETER": {
                        color: "#FFA000",
                        dashed: !1
                    }
                },
                y = Object(n.a)({}, g, {
                    "TYPES-2_WAY": {
                        color: "#FF06BE",
                        dashed: !1
                    },
                    "TYPES-SLOW_STREET": {
                        color: "#FFA000",
                        dashed: !1
                    },
                    "TYPES-BICYCLE_LANE": {
                        color: "#9F08E2",
                        dashed: !1
                    },
                    "TYPES-SHARED_SPACE": {
                        color: "#FFFF00",
                        dashed: !1
                    },
                    "TYPES-4MW_SHARED": {
                        color: "#0065FF",
                        dashed: !1
                    },
                    "TYPES-35MW_SHARED": {
                        color: "#00BEFF",
                        dashed: !1
                    },
                    "TYPES-ACCESS_ROAD": {
                        color: "#9E3100",
                        dashed: !1
                    },
                    "TYPES-WIDE_SHOULDER": {
                        color: "#42E200",
                        dashed: !1
                    }
                }, h, b),
                v = {
                    "BAANA-CURRENT": 1,
                    "BAANA-PLANNED": 2,
                    "BRAND-MAIN": 3,
                    "BRAND-PERIMETER": 4,
                    "MAIN_REGIONAL-MAIN": 5,
                    "MAIN_REGIONAL-PLANNED_MAIN": 6,
                    "MAIN_REGIONAL-REGIONAL": 7,
                    "MAIN_REGIONAL-PLANNED_REGIONAL": 8,
                    "TYPES-2_WAY": 9,
                    "TYPES-4MW_SHARED": 10,
                    "TYPES-35MW_SHARED": 11,
                    "TYPES-SLOW_STREET": 12,
                    "TYPES-BICYCLE_LANE": 13,
                    "TYPES-SHARED_SPACE": 14,
                    "TYPES-ACCESS_ROAD": 15,
                    "TYPES-WIDE_SHOULDER": 16
                },
                k = {
                    Bicycle: "BICYCLE",
                    Car: "CAR",
                    RoarRoller: "ROAD_ROLLER",
                    Excavator: "EXCAVATOR",
                    Truck: "TRUCK",
                    SnowPlow: "SNOW_PLOW",
                    Van: "VAN",
                    WheelLoader: "WHEEL_LOADER",
                    RoadGrader: "ROAD_GRADER",
                    Tractor: "TRACTOR"
                },
                j = {
                    Oulu: "OULU",
                    Ely: "ELY",
                    Unknown: "UNKNOWN"
                }
        },
        "./app/localStorageHistory.js": function(e, t, a) {
            "use strict";
            a.d(t, "a", (function() {
                return p
            })), a.d(t, "b", (function() {
                return u
            }));
            var n = a("./node_modules/@babel/runtime/helpers/esm/extends.js"),
                i = a("./node_modules/history/lib/index.js"),
                r = a("./app/store/localStorage.js"),
                o = void 0;
            var s = function() {
                    var e = Object(r.f)();
                    return e.time > Date.now() - 36e5 ? e : {
                        entries: ["/"],
                        index: 0,
                        time: 0
                    }
                }(),
                l = !1,
                c = function() {
                    Object(r.w)(Object(n.a)({}, s, {
                        time: Date.now()
                    }))
                },
                u = function() {
                    return s.index
                },
                d = function() {
                    return function(e) {
                        switch (e.action) {
                            case "POP":
                                l && s.index > 0 ? (s.index -= 1, c()) : l || (l = !0);
                                break;
                            case "REPLACE":
                                t = e, s.entries.splice(s.index), s.entries.push(t), c();
                                break;
                            case "PUSH":
                                ! function(e) {
                                    s.entries.splice(s.index + 1), s.entries.push(e), s.index += 1, c()
                                }(e);
                                break;
                            default:
                                console.error("unhandled history event:", e)
                        }
                        var t;
                        o && void 0 !== o[e.action] && o[e.action](e)
                    }
                },
                p = function() {
                    var e = Object(i.createMemoryHistory)({
                        current: u(),
                        entries: s.entries
                    });
                    return e.listen(d()), e
                }
        },
        "./app/route/FuzzyTripRoute.js": function(e, t, a) {
            "use strict";
            a.d(t, "a", (function() {
                return o
            }));
            var n = a("./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js"),
                i = a("./node_modules/react-relay/classic.js"),
                r = a.n(i),
                o = function(e) {
                    function t() {
                        return e.apply(this, arguments) || this
                    }
                    return Object(n.a)(t, e), t
                }(r.a.Route);
            o.queries = {
                trip: function(e, t) {
                    return a = e.getFragment("trip", {
                        tripId: t.tripId,
                        route: t.route,
                        direction: t.direction,
                        date: t.date,
                        time: t.time
                    }), {
                        children: [].concat.apply([], [r.a.QL.__frag(a)]),
                        fieldName: "viewer",
                        kind: "Query",
                        metadata: {},
                        name: "FuzzyTripRoute",
                        type: "Query"
                    };
                    var a
                }
            }, o.paramDefinitions = {
                tripId: {
                    required: !0
                },
                route: {
                    required: !0
                },
                direction: {
                    required: !0
                },
                time: {
                    required: !0
                },
                date: {
                    required: !0
                }
            }, o.routeName = "FuzzyTripRoute"
        },
        "./app/store/MaintenanceVehicleRealTimeInformationStore.js": function(e, t, a) {
            "use strict";
            a.d(t, "b", (function() {
                return u
            }));
            var n = a("./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js"),
                i = a("./node_modules/fluxible/addons/BaseStore.js"),
                r = a.n(i),
                o = a("./node_modules/prop-types/index.js"),
                s = a.n(o),
                l = a("./app/util/maintenanceUtils.js"),
                c = function(e) {
                    function t(t) {
                        var a;
                        return (a = e.call(this, t) || this).maintenanceVehicles = {}, a.subscriptions = [], a
                    }
                    Object(n.a)(t, e);
                    var a = t.prototype;
                    return a.storeClient = function(e) {
                        this.client = e.client, this.subscriptions = e.topics, this.emitChange()
                    }, a.clearClient = function() {
                        this.client = void 0, this.maintenanceVehicles = {}, this.subscriptions = [], this.emitChange()
                    }, a.updateSubscriptions = function(e) {
                        this.subscriptions = e, this.maintenanceVehicles = {}, this.emitChange()
                    }, a.handleMessage = function(e) {
                        this.maintenanceVehicles[e.id] = e.message, this.emitChange()
                    }, a.clearStaleVehicles = function() {
                        this.maintenanceVehicles = Object(l.a)(this.maintenanceVehicles), this.emitChange()
                    }, t
                }(r.a);
            c.storeName = "MaintenanceVehicleRealTimeInformationStore", c.handlers = {
                MaintenanceVehicleRealTimeClientStarted: "storeClient",
                MaintenanceVehicleRealTimeClientStopped: "clearClient",
                MaintenanceVehicleRealTimeClientInactive: "clearStaleVehicles",
                MaintenanceVehicleRealTimeClientMessage: "handleMessage",
                MaintenanceVehicleRealTimeClientTopicChanged: "updateSubscriptions"
            };
            var u = s.a.shape({
                id: s.a.number,
                jobIds: s.a.arrayOf(s.a.number),
                timestamp: s.a.number,
                lat: s.a.number,
                long: s.a.number,
                dir: s.a.number
            });
            t.a = c
        },
        "./app/store/MaintenanceVehicleTailStore.js": function(e, t, a) {
            "use strict";
            a.d(t, "b", (function() {
                return u
            }));
            var n = a("./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js"),
                i = a("./node_modules/fluxible/addons/BaseStore.js"),
                r = a.n(i),
                o = a("./node_modules/prop-types/index.js"),
                s = a.n(o),
                l = a("./app/store/MaintenanceVehicleRealTimeInformationStore.js"),
                c = function(e) {
                    function t(t) {
                        var a;
                        return (a = e.call(this, t) || this).startTail = function(e) {
                            a.vehicleId = e, a.tail = [], a.emitChange()
                        }, a.endTail = function() {
                            a.vehicleId = null, a.tail = [], a.emitChange()
                        }, a.tailAdd = function(e) {
                            e.id === a.vehicleId && (a.tail.push(e), a.emitChange())
                        }, a.getTail = function() {
                            return [].concat(a.tail)
                        }, a.getVehicleId = function() {
                            return a.vehicleId
                        }, a.vehicleId = null, a.tail = [], a
                    }
                    return Object(n.a)(t, e), t
                }(r.a);
            c.storeName = "MaintenanceVehicleTailStore", c.handlers = {
                MaintenanceVehicleTailStart: "startTail",
                MaintenanceVehicleTailAdd: "tailAdd",
                MaintenanceVehicleTailEnd: "endTail"
            };
            var u = s.a.arrayOf(l.b);
            t.a = c
        },
        "./app/store/MapLayerOptionsStore.js": function(e, t, a) {
            "use strict";
            a.d(t, "b", (function() {
                return d
            }));
            var n = a("./node_modules/@babel/runtime/helpers/esm/extends.js"),
                i = a("./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js"),
                r = a("./node_modules/fluxible/addons/BaseStore.js"),
                o = a.n(r),
                s = a("./node_modules/prop-types/index.js"),
                l = a.n(s),
                c = a("./app/store/localStorage.js"),
                u = function(e) {
                    function t(a) {
                        var i;
                        return (i = e.call(this, a) || this).mapLayerOptions = Object(n.a)({}, t.defaultMapLayerOptions), i.initLayerOptions = function() {
                            var e = Object(c.h)();
                            i.mapLayerOptions = Object(n.a)({}, t.defaultMapLayerOptions), Object.keys(e).length > 0 && (i.mapLayerOptions = Object.keys(e).reduce((function(t, a) {
                                var i;
                                return Object.keys(t).includes(a) ? Object(n.a)({}, t, ((i = {})[a] = e[a], i)) : t
                            }), i.mapLayerOptions)), i.emitChange()
                        }, i.getMapLayerOptions = function() {
                            return Object(n.a)({}, i.mapLayerOptions)
                        }, i.updateMapLayerOptions = function(e) {
                            i.mapLayerOptions = Object(n.a)({}, i.mapLayerOptions, e), Object(c.y)(Object(n.a)({}, i.mapLayerOptions)), i.emitChange()
                        }, i.resetMapLayerOptions = function() {
                            i.mapLayerOptions = Object(n.a)({}, t.defaultMapLayerOptions), Object(c.y)(Object(n.a)({}, i.mapLayerOptions)), i.emitChange()
                        }, i.initLayerOptions(), i
                    }
                    return Object(i.a)(t, e), t
                }(o.a);
            u.defaultMapLayerOptions = {
                maintenanceVehicles: {
                    timeRange: 1440,
                    brushingFor30days: !1
                }
            }, u.handlers = {
                UpdateMapLayerOptions: "updateMapLayerOptions",
                ResetMapLayerOptions: "resetMapLayerOptions"
            }, u.storeName = "MapLayerOptionsStore";
            var d = l.a.shape({
                maintenanceVehicles: l.a.shape({
                    timeRange: l.a.number
                })
            });
            t.a = u
        },
        "./app/store/MapLayerStore.js": function(e, t, a) {
            "use strict";
            a.d(t, "b", (function() {
                return m
            }));
            var n = a("./node_modules/@babel/runtime/helpers/esm/extends.js"),
                i = a("./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js"),
                r = a("./node_modules/fluxible/addons/BaseStore.js"),
                o = a.n(r),
                s = a("./node_modules/prop-types/index.js"),
                l = a.n(s),
                c = a("./node_modules/lodash-es/get.js"),
                u = a("./app/store/localStorage.js"),
                d = a("./app/util/modeUtils.js"),
                p = function(e) {
                    function t(a) {
                        var i;
                        (i = e.call(this, a) || this).mapLayers = Object(n.a)({}, t.defaultLayers), i.mode = null, i.highlightedStop = null, i.highlightedFluency = null, i.initLayers = function() {
                            var e = i.getContext().config;
                            e.useModeSpecificMapLayers && i.mode && (i.mapLayers = Object(n.a)({}, Object(c.a)(e, "mapLayerDefaultsModeSpecific[" + i.mode + "]", i.mapLayers))), i.mapLayers.citybike = e.transportModes.citybike && e.transportModes.citybike.availableForSelection;
                            var t = e.useModeSpecificMapLayers && i.mode ? Object(u.g)(i.mode) : Object(u.i)();
                            Object.keys(t).length > 0 && (i.mapLayers = Object.keys(t).reduce((function(e, a) {
                                var i;
                                return Object.keys(e).includes(a) ? Object(n.a)({}, e, ((i = {})[a] = t[a], i)) : e
                            }), i.mapLayers)), i.emitChange()
                        }, i.getMapLayers = function() {
                            return Object(n.a)({}, i.mapLayers)
                        }, i.updateMapLayers = function(e) {
                            var t = i.getContext().config;
                            i.mapLayers = Object(n.a)({}, i.mapLayers, e), t.useModeSpecificMapLayers && i.mode ? Object(u.x)(i.mode, Object(n.a)({}, i.mapLayers)) : Object(u.z)(Object(n.a)({}, i.mapLayers)), i.emitChange()
                        }, i.clearMapLayers = function() {
                            var e = Object.keys(i.mapLayers).reduce((function(e, t) {
                                var a;
                                if ("stop" === t) {
                                    var i, r = ((i = {})[t] = {
                                        bus: !1
                                    }, i);
                                    return Object(n.a)({}, e, r)
                                }
                                return Object(n.a)({}, e, ((a = {})[t] = !1, a))
                            }), {});
                            i.updateMapLayers(e)
                        }, i.updateMapLayersMode = function(e) {
                            i.mode !== e && (i.mode = e, i.initLayers())
                        }, i.setHighlightedStop = function(e) {
                            i.highlightedStop = e, i.emitChange()
                        }, i.removeHighlightedStop = function() {
                            i.highlightedStop = null, i.emitChange()
                        }, i.getHighlightedStop = function() {
                            return i.highlightedStop
                        }, i.setHighlightedFluency = function(e) {
                            i.highlightedFluency = e, i.emitChange()
                        }, i.removeHighlightedFluency = function() {
                            i.highlightedFluency = null, i.emitChange()
                        }, i.getHighlightedFluency = function() {
                            return i.highlightedFluency
                        };
                        var r = a.getContext().config;
                        return i.mode = Object(d.h)(null, r), i.initLayers(), i
                    }
                    return Object(i.a)(t, e), t
                }(o.a);
            p.defaultLayers = {
                parkAndRide: !0,
                stop: {
                    bus: !0,
                    ferry: !0,
                    rail: !0,
                    subway: !0,
                    tram: !0
                },
                terminal: {
                    bus: !0,
                    rail: !0,
                    subway: !0
                },
                ticketSales: {
                    salesPoint: !0,
                    servicePoint: !0,
                    ticketMachine: !0
                },
                parkingStations: !0,
                disorders: !0,
                roadworks: !0,
                cameraStations: !0,
                weatherStations: !0,
                cityWeatherStations: !0,
                tmsStations: !0,
                roadConditions: !0,
                fluencies: !0,
                maintenanceVehicles: !0,
                realtimeMaintenanceVehicles: !0,
                roadInspectionVehicles: !0,
                roadSigns: !0,
                bicycleRoutes: !0,
                bicycleRoutesMainContract: !0,
                bicycleRoutesMainRegional: !0,
                bicycleRouteTypes: !0,
                bicycleRoutesBaana: !0,
                bicycleRoutesBrand: !0
            }, p.handlers = {
                UpdateMapLayers: "updateMapLayers",
                ClearMapLayers: "clearMapLayers",
                UpdateMapLayersMode: "updateMapLayersMode",
                SetHighlightedStop: "setHighlightedStop",
                RemoveHighlightedStop: "removeHighlightedStop",
                SetHighlightedFluency: "setHighlightedFluency",
                RemoveHighlightedFluency: "removeHighlightedFluency"
            }, p.storeName = "MapLayerStore";
            var m = l.a.shape({
                citybike: l.a.bool,
                parkAndRide: l.a.bool,
                stop: l.a.shape({
                    bus: l.a.bool,
                    ferry: l.a.bool,
                    rail: l.a.bool,
                    subway: l.a.bool,
                    tram: l.a.bool
                }),
                terminal: l.a.shape({
                    bus: l.a.bool,
                    rail: l.a.bool,
                    subway: l.a.bool
                }),
                ticketSales: l.a.shape({
                    salesPoint: l.a.bool,
                    servicePoint: l.a.bool,
                    ticketMachine: l.a.bool
                }),
                parkingStations: l.a.bool,
                disorders: l.a.bool,
                roadworks: l.a.bool,
                cameraStations: l.a.bool,
                weatherStations: l.a.bool,
                cityWeatherStations: l.a.bool,
                tmsStations: l.a.bool,
                roadConditions: l.a.bool,
                fluencies: l.a.bool,
                maintenanceVehicles: l.a.bool,
                realtimeMaintenanceVehicles: l.a.bool,
                roadInspectionVehicles: l.a.bool,
                roadSigns: l.a.bool,
                bicycleRoutes: l.a.bool,
                bicycleRoutesMainContract: l.a.bool,
                bicycleRoutesMainRegional: l.a.bool,
                bicycleRouteTypes: l.a.bool,
                bicycleRoutesBaana: l.a.bool,
                bicycleRoutesBrand: l.a.bool
            });
            t.a = p
        },
        "./app/store/PositionStore.js": function(e, t, a) {
            "use strict";
            a.d(t, "a", (function() {
                return g
            }));
            var n = a("./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js"),
                i = a("./node_modules/fluxible/addons/BaseStore.js"),
                r = a.n(i),
                o = a("./node_modules/debug/src/browser.js"),
                s = a.n(o),
                l = a("./node_modules/lodash-es/range.js"),
                c = s()("MockGeolocationApi.js");
            var u = {
                    watchPosition: function(e) {
                        c("setting mock interval");
                        var t = 0;
                        setInterval((function() {
                            window.mock ? (c("broadcasting position", window.mock.data.position), window.mock.permission = "granted", e(window.mock.data.position, t % 10 == 0), t += 1) : c("window.mock is undefined")
                        }), 500)
                    }
                },
                d = a("./app/util/browser.js"),
                p = a("./app/util/otpStrings.js"),
                m = a("./app/store/localStorage.js"),
                f = s()("PositionStore.js"),
                g = function(e) {
                    function t(t) {
                        var a;
                        if (d.c && window.location && -1 !== window.location.search.indexOf("mock")) {
                            var n, i, r = window.location.search.substring(window.location.search.indexOf("mock") + 5);
                            if (r.length > 1) {
                                var o = Object(p.d)(r);
                                o && (r = "granted", n = o.lat, i = o.lon)
                            } else r = "granted";
                            f("replacing geolocation api with mock"), navigator.geoapi = u,
                                function(e, t, a) {
                                    c("Position mock activated"), window.mock = {
                                        permission: e,
                                        data: {}
                                    }, window.mock.data.position = {
                                        coords: {
                                            latitude: t || 60.1992,
                                            longitude: a || 24.9402,
                                            heading: 0
                                        }
                                    };
                                    var n = !1;
                                    window.mock.geolocation = {
                                        demo: function() {
                                            var e = window.mock.data.position.coords,
                                                t = 60.1716,
                                                a = 24.9406,
                                                i = Object(l.a)(180).map((function(n) {
                                                    var i = n / 180,
                                                        r = 1e-4 * Math.random() - 5e-5;
                                                    return {
                                                        latitude: i * t + (1 - i) * e.latitude + r,
                                                        longitude: i * a + (1 - i) * e.longitude + r
                                                    }
                                                }));
                                            n = {
                                                track: i,
                                                index: 0,
                                                interval: setInterval(window.mock.geolocation.followTrack, 1e3)
                                            }
                                        },
                                        followTrack: function() {
                                            var e, t = n.index || 0;
                                            n.track && t < n.track.length ? (e = n.track[t], n.index += 1, window.mock.geolocation.setCurrentPosition(e.latitude, e.longitude)) : (clearInterval(n.interval), n = !1)
                                        },
                                        move: function(e, t, a) {
                                            window.mock.data.position.coords.latitude += e, window.mock.data.position.coords.longitude += t, a && (window.mock.data.position.coords.heading = a)
                                        },
                                        setCurrentPosition: function(e, t, a) {
                                            window.mock.data.position.coords.latitude = e, window.mock.data.position.coords.longitude = t, a && (window.mock.data.position.coords.heading = a)
                                        }
                                    }
                                }(r, n, i)
                        } else navigator.geoapi = navigator.geolocation;
                        return (a = e.call(this, t) || this).getWatchId = function() {
                            return a.watchId
                        }, a.removeLocation(), a.positioningHasSucceeded = Object(m.k)(), a
                    }
                    Object(n.a)(t, e);
                    var a = t.prototype;
                    return a.removeLocation = function() {
                        this.lat = 0, this.lon = 0, this.heading = null, this.address = void 0, this.status = t.STATUS_NO_LOCATION, this.emitChange()
                    }, a.geolocationSearch = function() {
                        this.status = t.STATUS_SEARCHING_LOCATION, this.address = void 0, this.emitChange()
                    }, a.geolocationNotSupported = function() {
                        this.status = t.STATUS_GEOLOCATION_NOT_SUPPORTED, this.emitChange()
                    }, a.geolocationDenied = function() {
                        this.status = t.STATUS_GEOLOCATION_DENIED, this.emitChange()
                    }, a.geolocationTimeout = function() {
                        this.status = t.STATUS_GEOLOCATION_TIMEOUT, this.emitChange()
                    }, a.geolocationWatchTimeout = function() {
                        this.status = t.STATUS_GEOLOCATION_WATCH_TIMEOUT, this.emitChange()
                    }, a.geolocationPrompt = function() {
                        this.status = t.STATUS_GEOLOCATION_PROMPT, this.emitChange()
                    }, a.storeLocation = function(e) {
                        this.positioningHasSucceeded || (Object(m.B)(!0), this.positioningHasSucceeded = !0), e && !0 !== e.disableFiltering && Math.abs(this.lat - e.lat) < .001 && Math.abs(this.lon - e.lon) < .001 ? (this.lat = (this.lat + e.lat) / 2, this.lon = (this.lon + e.lon) / 2) : (this.lat = e.lat, this.lon = e.lon), this.heading = e.heading ? e.heading : this.heading, this.status = t.STATUS_FOUND_LOCATION, this.emitChange()
                    }, a.storeAddress = function(e) {
                        e.address ? e.city ? this.address = e.address + ", " + e.city : this.address = e.address : e.city ? this.address = e.city : this.address = "", this.status = t.STATUS_FOUND_ADDRESS, this.emitChange()
                    }, a.getLocationState = function() {
                        return {
                            lat: this.lat,
                            lon: this.lon,
                            address: this.address,
                            status: this.status,
                            hasLocation: !(this.status !== t.STATUS_FOUND_ADDRESS && this.status !== t.STATUS_FOUND_LOCATION || 0 === this.lat && 0 === this.lon),
                            isLocationingInProgress: this.status === t.STATUS_SEARCHING_LOCATION,
                            locationingFailed: this.status === t.STATUS_GEOLOCATION_DENIED || this.status === t.STATUS_GEOLOCATION_TIMEOUT || this.status === t.STATUS_GEOLOCATION_WATCH_TIMEOUT || this.status === t.STATUS_GEOLOCATION_NOT_SUPPORTED
                        }
                    }, a.storeWatchId = function(e) {
                        this.watchId = e
                    }, a.clearWatchId = function() {
                        this.watchId = void 0
                    }, t
                }(r.a);
            g.storeName = "PositionStore", g.STATUS_NO_LOCATION = "no-location", g.STATUS_SEARCHING_LOCATION = "searching-location", g.STATUS_GEOLOCATION_PROMPT = "prompt", g.STATUS_FOUND_LOCATION = "found-location", g.STATUS_FOUND_ADDRESS = "found-address", g.STATUS_GEOLOCATION_DENIED = "geolocation-denied", g.STATUS_GEOLOCATION_TIMEOUT = "geolocation-timeout", g.STATUS_GEOLOCATION_WATCH_TIMEOUT = "geolocation-watch-timeout", g.STATUS_GEOLOCATION_NOT_SUPPORTED = "geolocation-not-supported", g.handlers = {
                GeolocationSearch: "geolocationSearch",
                GeolocationFound: "storeLocation",
                GeolocationNotSupported: "geolocationNotSupported",
                GeolocationDenied: "geolocationDenied",
                GeolocationTimeout: "geolocationTimeout",
                GeolocationWatchTimeout: "geolocationWatchTimeout",
                GeolocationPrompt: "geolocationPrompt",
                AddressFound: "storeAddress",
                GeolocationWatchStarted: "storeWatchId",
                GeolocationWatchStopped: "clearWatchId"
            }
        },
        "./app/store/TimeStore.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js"),
                i = a("./node_modules/fluxible/addons/BaseStore.js"),
                r = a.n(i),
                o = a("./node_modules/moment/moment.js"),
                s = a.n(o),
                l = a("./app/util/browser.js"),
                c = function(e) {
                    function t(a) {
                        var n;
                        return (n = e.call(this, a) || this).updateCurrentTime = function() {
                            n.currentTime = s()(), n.emitChange({
                                currentTime: n.currentTime
                            })
                        }, n.updateCurrentTime(), l.c && setInterval(n.updateCurrentTime, t.TWICE_PER_MINUTE), n
                    }
                    return Object(n.a)(t, e), t.prototype.getCurrentTime = function() {
                        return this.currentTime.clone()
                    }, t
                }(r.a);
            c.storeName = "TimeStore", c.TWICE_PER_MINUTE = 3e4, c.handlers = {}, t.a = c
        },
        "./app/store/localStorage.js": function(e, t, a) {
            "use strict";
            (function(e) {
                a.d(t, "a", (function() {
                    return p
                })), a.d(t, "r", (function() {
                    return m
                })), a.d(t, "q", (function() {
                    return f
                })), a.d(t, "o", (function() {
                    return g
                })), a.d(t, "m", (function() {
                    return h
                })), a.d(t, "D", (function() {
                    return b
                })), a.d(t, "p", (function() {
                    return y
                })), a.d(t, "c", (function() {
                    return v
                })), a.d(t, "t", (function() {
                    return k
                })), a.d(t, "e", (function() {
                    return j
                })), a.d(t, "C", (function() {
                    return S
                })), a.d(t, "l", (function() {
                    return E
                })), a.d(t, "v", (function() {
                    return N
                })), a.d(t, "b", (function() {
                    return R
                })), a.d(t, "s", (function() {
                    return w
                })), a.d(t, "d", (function() {
                    return T
                })), a.d(t, "u", (function() {
                    return C
                })), a.d(t, "j", (function() {
                    return x
                })), a.d(t, "A", (function() {
                    return L
                })), a.d(t, "B", (function() {
                    return O
                })), a.d(t, "k", (function() {
                    return M
                })), a.d(t, "w", (function() {
                    return _
                })), a.d(t, "f", (function() {
                    return P
                })), a.d(t, "z", (function() {
                    return A
                })), a.d(t, "i", (function() {
                    return I
                })), a.d(t, "x", (function() {
                    return D
                })), a.d(t, "g", (function() {
                    return F
                })), a.d(t, "y", (function() {
                    return q
                })), a.d(t, "h", (function() {
                    return B
                })), a.d(t, "E", (function() {
                    return V
                })), a.d(t, "n", (function() {
                    return U
                }));
                var n = a("./node_modules/lodash-es/get.js"),
                    i = a("./node_modules/lodash-es/find.js"),
                    r = a("./app/util/browser.js"),
                    o = a("./app/constants.js"),
                    s = function(t) {
                        return t ? window.localStorage : e.localStorage
                    };

                function l(e, t) {
                    if ("SecurityError" !== e.name) throw e;
                    t && console.log(t)
                }

                function c(e, t) {
                    var a = s(r.c);
                    if (a) try {
                        a.setItem(e, JSON.stringify(t))
                    } catch (e) {
                        "QuotaExceededError" === e.name ? console.log("[localStorage] Unable to save state; localStorage is not available in Safari private mode") : l(e, "[localStorage] Unable to save state; access to localStorage denied by browser settings")
                    }
                }

                function u(e, t) {
                    var a = function(e) {
                        var t = s(r.c);
                        if (t) try {
                            return t.getItem(e)
                        } catch (e) {
                            l(e)
                        }
                        return null
                    }(e);
                    return null == a && (a = t || "[]"), JSON.parse(a)
                }

                function d() {
                    return u("customizedSettings", "{}")
                }

                function p(e) {
                    var t = u("customizedSettings", "{}");
                    return e ? Object(n.a)(t, e, {}) : Object(i.a)(t, "active") || {}
                }

                function m(e, t) {
                    var a = function(e, t) {
                            return null != e ? Number(e) : t
                        },
                        n = function(e, t) {
                            return void 0 !== e ? e : t
                        },
                        i = p(t),
                        r = n(e.optimize, i.optimize),
                        s = {
                            accessibilityOption: a(e.accessibilityOption, i.accessibilityOption),
                            bikeSpeed: a(e.bikeSpeed, i.bikeSpeed),
                            minTransferTime: a(e.minTransferTime, i.minTransferTime),
                            modes: n(e.modes, i.modes),
                            optimize: r,
                            preferredRoutes: n(e.preferredRoutes, i.preferredRoutes),
                            ticketTypes: n(e.ticketTypes, i.ticketTypes),
                            transferPenalty: a(e.transferPenalty, i.transferPenalty),
                            unpreferredRoutes: n(e.unpreferredRoutes, i.unpreferredRoutes),
                            walkBoardCost: a(e.walkBoardCost, i.walkBoardCost),
                            walkReluctance: a(e.walkReluctance, i.walkReluctance),
                            walkSpeed: a(e.walkSpeed, i.walkSpeed),
                            active: !0
                        };
                    r === o.n.Triangle ? (s.safetyFactor = a(e.safetyFactor, i.safetyFactor), s.slopeFactor = a(e.slopeFactor, i.slopeFactor), s.timeFactor = a(e.timeFactor, i.timeFactor)) : (delete s.safetyFactor, delete s.slopeFactor, delete s.timeFactor);
                    var l = d();
                    Object.keys(l).forEach((function(e) {
                        l[e].active = !1
                    })), l[t] = s, c("customizedSettings", l)
                }

                function f(e, t) {
                    var a = d();
                    Object.keys(a).forEach((function(t) {
                        a[t].active = t === e
                    })), Object(n.a)(a, e) || (a[e] = {
                        modes: t || [],
                        active: !0,
                        optimize: e === o.q.Bicycle ? o.n.Greenways : void 0
                    }), c("customizedSettings", a)
                }

                function g() {
                    var e = s(r.c);
                    e && e.removeItem("customizedSettings")
                }

                function h() {
                    return u("routingSettings")
                }

                function b(e) {
                    var t = h();
                    c("routingSettings", {
                        maxWalkDistance: e.maxWalkDistance ? e.maxWalkDistance : t.maxWalkDistance,
                        maxBikingDistance: e.maxBikingDistance ? e.maxBikingDistance : t.maxBikingDistance,
                        ignoreRealtimeUpdates: e.ignoreRealtimeUpdates ? e.ignoreRealtimeUpdates : t.ignoreRealtimeUpdates,
                        maxPreTransitTime: e.maxPreTransitTime ? e.maxPreTransitTime : t.maxPreTransitTime,
                        walkOnStreetReluctance: e.walkOnStreetReluctance ? e.walkOnStreetReluctance : t.walkOnStreetReluctance,
                        waitReluctance: e.waitReluctance ? e.waitReluctance : t.waitReluctance,
                        bikeSpeed: e.bikeSpeed ? e.bikeSpeed : t.bikeSpeed,
                        bikeSwitchTime: e.bikeSwitchTime ? e.bikeSwitchTime : t.bikeSwitchTime,
                        bikeSwitchCost: e.bikeSwitchCost ? e.bikeSwitchCost : t.bikeSwitchCost,
                        bikeBoardCost: e.bikeBoardCost ? e.bikeBoardCost : t.bikeBoardCost,
                        optimize: e.optimize ? e.optimize : t.optimize,
                        safetyFactor: e.safetyFactor ? e.safetyFactor : t.safetyFactor,
                        slopeFactor: e.slopeFactor ? e.slopeFactor : t.slopeFactor,
                        timeFactor: e.timeFactor ? e.timeFactor : t.timeFactor,
                        carParkCarLegWeight: e.carParkCarLegWeight ? e.carParkCarLegWeight : t.carParkCarLegWeight,
                        maxTransfers: e.maxTransfers ? e.maxTransfers : t.maxTransfers,
                        waitAtBeginningFactor: e.waitAtBeginningFactor ? e.waitAtBeginningFactor : t.waitAtBeginningFactor,
                        heuristicStepsPerMainStep: e.heuristicStepsPerMainStep ? e.heuristicStepsPerMainStep : t.heuristicStepsPerMainStep,
                        compactLegsByReversedSearch: e.compactLegsByReversedSearch ? e.compactLegsByReversedSearch : t.compactLegsByReversedSearch,
                        disableRemainingWeightHeuristic: e.disableRemainingWeightHeuristic ? e.disableRemainingWeightHeuristic : t.disableRemainingWeightHeuristic,
                        itineraryFiltering: e.itineraryFiltering ? e.itineraryFiltering : t.itineraryFiltering,
                        busWeight: e.busWeight ? e.busWeight : t.busWeight,
                        railWeight: e.railWeight ? e.railWeight : t.railWeight,
                        subwayWeight: e.subwayWeight ? e.subwayWeight : t.subwayWeight,
                        tramWeight: e.tramWeight ? e.tramWeight : t.tramWeight,
                        ferryWeight: e.ferryWeight ? e.ferryWeight : t.ferryWeight,
                        airplaneWeight: e.airplaneWeight ? e.airplaneWeight : t.airplaneWeight
                    })
                }

                function y() {
                    var e = s(r.c);
                    e && e.removeItem("routingSettings")
                }

                function v() {
                    return u("favouriteLocations")
                }

                function k(e) {
                    c("favouriteLocations", e)
                }

                function j() {
                    return u("favouriteStops")
                }

                function S(e) {
                    c("readMessages", e)
                }

                function E() {
                    var e = u("messages", "[]");
                    0 !== e.length && (S(e.filter((function(e) {
                        return e[1].read
                    })).map((function(e) {
                        return e[0]
                    }))), function(e) {
                        var t = s(r.c);
                        if (t) try {
                            t.removeItem(e)
                        } catch (e) {
                            l(e)
                        }
                    }("messages"));
                    return u("readMessages", "[]")
                }

                function N(e) {
                    c("favouriteStops", e)
                }

                function R() {
                    return u("favouriteCityBikeStations", "[]")
                }

                function w(e) {
                    c("favouriteCityBikeStations", e)
                }

                function T() {
                    return u("favouriteRoutes")
                }

                function C(e) {
                    c("favouriteRoutes", e)
                }

                function x() {
                    return u("saved-searches", '{"items": []}')
                }

                function L(e) {
                    c("saved-searches", e)
                }

                function O(e) {
                    c("positioningSuccesful", {
                        state: e
                    })
                }

                function M(e) {
                    return !(e && !r.k && !r.e) && u("positioningSuccesful", '{ "state": false }').state
                }

                function _(e) {
                    c("history", e)
                }

                function P() {
                    return u("history", '{"entries":["/"], "index":0, "time":0}')
                }
                var A = function(e) {
                        c("map-layers", e)
                    },
                    I = function() {
                        return u("map-layers", "{}")
                    },
                    D = function(e, t) {
                        c("map-layers-" + e, t)
                    },
                    F = function(e) {
                        return u("map-layers-" + e, "{}")
                    },
                    q = function(e) {
                        c("map-layer-options", e)
                    },
                    B = function() {
                        return u("map-layer-options", "{}")
                    },
                    V = function() {
                        c("show-intro-popup", !1)
                    },
                    U = function() {
                        return u("show-intro-popup", !0)
                    }
            }).call(this, a("./node_modules/webpack/buildin/global.js"))
        },
        "./app/translations.js": function(e, t, a) {
            "use strict";
            t.a = {
                da: {
                    "about-this-service": "Om tjenesten",
                    accessibility: "Fremkommelighed",
                    "add-itinerary-via-point": "Tilføj viapunkt til rejsen",
                    "add-location": "Tilføj sted",
                    "add-location-to-favourites": "Tilføj sted til favoritter",
                    address: "Adresse",
                    "address-or-stop": "Adresse eller stoppested",
                    agency: "Operatør",
                    airplane: "Fly",
                    "airplane-with-route-number": "Fly {routeNumber}",
                    "airport-check-in": "Bagage kan checkes ind hos {agency}",
                    "airport-collect-luggage": "Hent eventuel bagage",
                    "airport-security-check-go-to-gate": "Passer sikkerhedskontrollen og fortsæt til gate",
                    "approx-meters": "{approxDistance} meter",
                    "arriving-at": "Ankomst",
                    "arriving-soon": "Nu",
                    "avoid-transfers": "Undgå skift",
                    "avoid-walking": "Undgå at gå",
                    "back-button-title": "Gå tilbage til forrige side",
                    "back-to-front-page": "Tilbage til forsiden ›",
                    "bike-availability": "Cykler tilgængelige",
                    "bike-availability-short": "Cykler",
                    bus: "Bus",
                    "bus-with-route-number": "Bus {routeNumber} {headSign}",
                    "buy-ticket": "Køb billet",
                    call: "Ring",
                    cancel: "Fortryd",
                    "car-distance-duration": "Kør {distance} ({duration})",
                    cause: "Årsag",
                    "char-left": "slet",
                    "choose-stop": "Vælg stoppested",
                    citybike: "Bycykel",
                    "citybike-register-required": "Bycykelregistrering påkræves",
                    close: "Lukket",
                    "contact-information": "{contactName} kontaktinformation",
                    "create-account": "Gem {contactName}-konto",
                    "cycle-distance-duration": "Cykle {distance} ({duration})",
                    "cyclewalk-distance-duration": "Tril cyklen {distance} ({duration})",
                    datasources: "Datakilder",
                    delete: "Slet",
                    "departure-time-in-minutes": "{minutes} m",
                    departures: "Afgange",
                    description: "En national rejseplanlægger skal bidrage til at gøre det lettere at rejse kollektivt over hele landet.",
                    destination: "Til",
                    "destination-label-change": "Ændre destination",
                    "destination-placeholder": "Hvorhen vil du rejse?",
                    "digitransit-platform": "Digitransit platform",
                    "disruption-info": "Afvigsinformation",
                    "disruption-info-no-alerts": "Ingen afvigsinformation.",
                    "disruption-info-route-no-alerts": "Ingen afvigsinformation.",
                    disruptions: "Afvig",
                    "distance-between": "Afstand {distance1} m — {distance2} m",
                    "distance-under": "Afstand mindre end {distance} m",
                    earlier: "Tidligere",
                    "edit-favourites": "Rediger favorit",
                    "extra-info": "Mere info",
                    "favourite-target": "Favoritdestination",
                    ferry: "Færge",
                    "ferry-with-route-number": "Færge {routeNumber} {headSign}",
                    roadinspection: "Road inspection",
                    "roadinspection-vehicle-time-range": "Road inspection timerange: 30 days",
                    "realtime-roadinspection-vehicles": "Realtime road inspection",
                    frontpage: "Forside",
                    "geolocate-yourself": "Find min position",
                    "geolocation-denied-heading": "Tjenesten fungerer bedst når du oplyser din position",
                    "geolocation-denied-text": "Lokalisering er ikke tilladt. Kontroller indstillingene for din browser.",
                    "geolocation-failed-heading": "Lokalisering fungerer ikke",
                    "geolocation-failed-text": "Din browser har ikke understøttelse for lokalisering.",
                    "geolocation-prompt-text": "Venligst accepter lokalisering.",
                    "geolocation-timeout-heading": "Lokalisering tager længre tid end forventet.",
                    "geolocation-timeout-text": "Vælg udgangspunkt og prøv igen.",
                    "give-destination": "skriv hvor du vil hen",
                    "give-name-to-location": "Giv stedet en beskrivelse",
                    "give-origin": "tilføj afgangssted",
                    "give-position": "Tilføj position i søgefeldet over.",
                    "hour-short": "t",
                    "how-to-rate-service": "Hvordan vil du rangere tjenesten?",
                    "in-addition": "Og",
                    inquiry: "Send tilbagemelding",
                    instructions: "Instruktioner",
                    "itinerary-feedback-button": "Send feedback",
                    "itinerary-feedback-message": "Fandt du ikke det du ledte efter?",
                    "itinerary-feedback-placeholder": "Beskrivelse (valgfrit)",
                    "itinerary-hide-stops": "Skjul stop",
                    "itinerary-page.description": "Rejsebeskrivelse",
                    "itinerary-page.title": "Rejsebeskrivelse",
                    "itinerary-summary-page.description": "Anbefalte rute",
                    "itinerary-summary-page.title": "Anbefalte rute",
                    later: "Senere",
                    leaves: "Går",
                    "leaving-at": "Afgang",
                    "likely-to-recommend": "Hvor sandsynlig er det at du vil anbefale denne tjeneste til en ven eller kollega?",
                    "likely-to-use": "Hvor sandsynlig er det at du vil bruge denne tjeneste fremfor tjenesten du allerede bruger?",
                    loading: "indlæser",
                    locate: "Der jeg er",
                    "location-examples": "f.eks hjemme, arbejde, skole ...",
                    "location-from-map": "Vælg position",
                    login: "Log ind",
                    "long-transfers-margin": "Rigtig lang",
                    "main-menu-label-open": "Åben hovedmenuen",
                    "main-mode": "Jeg rejser med",
                    map: "Kort",
                    "messagebar-label-close-message-bar": "Luk besked",
                    "messagebar-label-page": "Side",
                    "minute-short": "m",
                    minutes: "min",
                    navigate: "Naviger",
                    "near-you": "Nær dig",
                    nearest: "Forrige",
                    "network-error": "Netværksfejl",
                    next: "Næste",
                    "no-favourite-locations": "Tilføj dine mest besøgte steder her. Det giver dig hurtigere rejseplanlægning.",
                    "no-favourites": "Du kan tilføje favoritter ved at trykke på favoritknapper forskellige steder i rejseplanlæggeren",
                    "no-position": "Ingen position",
                    "no-position-no-stops": "Kan ikke vise stoppesteder i nærheden da din position er ukendt.",
                    "no-route-end-date-not-in-range": "Current timetable does not include routes departing later.",
                    "no-route-msg": "Vi finder desværre ingen rejseforslag til rejsesøget. Forsøg at ændre adressen",
                    "no-route-start-date-too-early": "Current timetable does not include routes departing earlier.",
                    "no-route-start-end": "Venligst vælg udgangspunkt og destination.",
                    "no-transfers-margin": "Ingen",
                    "no-trips-found": "Ingen rejser tilgænglig for denne dag.",
                    now: "Nu",
                    "number-of-intermediate-stops": "{number, plural, =0 {Ingen stop} other {{number} stop} }",
                    "off-canvas-info": "Ved at logge ind kan du finde tilbage til dine favoritter på andre enheder",
                    or: "eller",
                    origin: "Fra",
                    "origin-label-change": "Ændre afgangsted",
                    "origin-placeholder": "Fra",
                    "own-position": "Min position",
                    "page-not-found": "Siden findes ikke ੨( ･᷄ ︵･᷅ )ｼ",
                    "park-and-ride": "Indfartsparkering",
                    "park-and-ride-availability": "Tilgjængelighed",
                    "park-and-ride-unknown": "Ukendt kapacitet",
                    "parking-availability": "Tilgjængelighed",
                    "pay-attention": "Obs!",
                    "pick-icon": "Vælg et ikon",
                    "place-route-or-keyword": "Adresse eller stoppested",
                    "platform-num": "Platform {platformCode}",
                    "platform-short": "Plat.",
                    "prefer-walking": "Foretræk at gå",
                    previous: "Tidligere",
                    print: "Skriv ud",
                    "print-timetable": "Køreplan",
                    rail: "Tog",
                    "rail-with-route-number": "Tog {routeNumber} {headSign}",
                    "realtime-matching": "Sandtidsintegration",
                    "rent-cycle-at": "Lej cykel fra stativ {station}",
                    "required-ticket": "Billet kræves før påstigning",
                    "right-now": "Nu",
                    route: "linje",
                    "route-destination-arrives": "Destination / Sidste holdeplads",
                    "route-from-here": "Find rute herfra",
                    "route-here": "Find rute hertil",
                    "route-not-possible": 'Desværre kan vi ikke finde et rejseforslag til dig. Teknisk feil: "{error}"',
                    "route-page.description": "Rute {shortName}, {longName}",
                    "route-page.title": "Rute {shortName}",
                    "route-page.title-short": "Rute",
                    "route-stop-or-keyword": "Linje eller stoppested",
                    routes: "Ruter",
                    run: "Løbe",
                    save: "Gem",
                    search: "Til",
                    "search-destination-results-but-no-search": "Se resultater i Til-fanen",
                    "search-no-results": "Ingen resultater",
                    "search-origin": "tilføj afgangssted",
                    "search-position": "Led efter position",
                    "search-search-results-but-no-destination": "Se resultater i Fra-fanen",
                    "searching-position": "Leder etter position",
                    "select-position": "Vælg din position baseret på tidligere søg",
                    send: "Send",
                    settings: "Indstillinger",
                    "settings-label-change": "Ændre indstillinger",
                    "settings-reset": "Nulstil indstillinger",
                    "settings-savebutton": "Gem indstillinger",
                    "settings-saved": "Ændringer gemt!",
                    share: "Del rejsen",
                    "show-departures": "Vis afgange",
                    "show-more": "Vis flere",
                    "skip-positioning": "Hop over",
                    slow: "Spasering",
                    "specify-location": "Angiv sted",
                    "splash-choose": "Angiv udgangspunkt",
                    "splash-locating": "Søger efter din position",
                    "splash-or-choose": "Eller fravælg din position",
                    "splash-use-positioning": "Brug min position",
                    "splash-welcome": "Velkommen til ny version af din rejseplanlægger",
                    "splash-you-can-also": "Alternativt",
                    stop: "Holdeplads",
                    "stop-number": "Holdepladsnummer",
                    "stop-page.description": "Holdeplads - {name} {code}, {desc}",
                    "stop-page.title": "Holdeplads - {name} {code}",
                    "stop-page.title-short": "Holdeplads",
                    stops: "Holdepladser",
                    subway: "Metro",
                    "subway-with-route-number": "Metro {routeNumber} {headSign}",
                    "summary-page.description": "{from} - {to}",
                    "summary-page.title": "Anbefalte ruter",
                    "terminal-page.description": "Terminal - {name}",
                    "terminal-page.title": "Terminal",
                    "terminal-page.title-short": "Terminal - {name}",
                    "terms-of-use": "Brugervilkår",
                    "ticket-and-price-info": "Billet- og prisinformation",
                    tickets: "Billetter",
                    time: "Tid",
                    timetable: "Køreplan",
                    "to-stop": "Afstand",
                    today: "I dag",
                    tomorrow: "I morgen",
                    tram: "Sporvogn",
                    "tram-with-route-number": "Sporvogn {routeNumber} {headSign}",
                    transfers: "Bytte",
                    "transfers-allowed": "Bytte tilladt",
                    "transfers-margin": "Byttetid",
                    "trip-co2-emissions": "Rejsens CO2-udslip",
                    "trip-page.description": "Linje {shortName}, {longName}",
                    "trip-page.title": "Linje {shortName}",
                    "try-again": "Prøv igen.",
                    "use-citybike": "Brug bycykel",
                    "use-own-position": "Brug min position",
                    "using-modes": "Transportform",
                    "very-likely": "Højst sandsynlig",
                    "very-unlikely": "Lidt sandsynlig",
                    "via-leg-stop-duration": "Viapunkt {stayDuration}",
                    "via-point": "Viapunkt",
                    wait: "Vent",
                    "wait-amount-of-time": "Vent {duration}",
                    walk: "gå",
                    "walk-distance-duration": "Gå {distance} ({duration})",
                    walking: "Gå",
                    "walking-speed": "Gåhastighed",
                    "warning-call-agency": "Kun bestillingstransport: {routeName}, afgangen må forudbestilles af operatør.",
                    "warning-call-agency-no-route": "Kun bestillingstransport. Afgangen må forudbestilles af operatør.",
                    "weather-at-destination": "Vejret på destinationen",
                    yesterday: "I går",
                    "your-favourites": "Favoritter",
                    zones: "Zoner"
                },
                de: {
                    "about-this-service": "Über diesen Service",
                    accessibility: "Barrierefreiheit",
                    "add-location": "Ort hinzufügen",
                    "add-location-to-favourites": "Ort zu Favoriten hinzufügen",
                    address: "Adresse",
                    "address-or-stop": "Adresse oder Haltestelle",
                    agency: "Betreiber",
                    airplane: "Flug",
                    "airplane-with-route-number": "Flug {routeNumber}",
                    "airport-check-in": "Gepäck bei {agency} einchecken",
                    "airport-collect-luggage": "Falls vorhanden, Gepäck einsammeln",
                    "airport-security-check-go-to-gate": "Gehen Sie durch die Sicherheitskontrolle zum Abfluggate",
                    "approx-meters": "{approxDistance} Meter",
                    "arriving-at": "Ankunft",
                    "arriving-soon": "Jetzt",
                    "avoid-transfers": "Umstiege vermeiden",
                    "avoid-walking": "Gehen vermeiden",
                    "back-to-front-page": "Zurück zur Startseite ›",
                    "bike-availability": "Fahrräder verfügbar",
                    "bike-availability-short": "Räder",
                    bus: "Bus",
                    "bus-with-route-number": "Bus {routeNumber} {headSign}",
                    "buy-ticket": "Ticket kaufen",
                    call: "Anrufen",
                    cancel: "Abbrechen",
                    "car-distance-duration": "Auto {distance} ({duration})",
                    cause: "Grund",
                    "char-left": "Zeichen",
                    "choose-stop": "Haltestelle auswählen",
                    citybike: "Fahrrad",
                    "citybike-register-required": "Anmeldung bei Citybikes benötigt",
                    close: "Schließen",
                    "contact-information": "{contactName} Kontaktinformationen",
                    "create-account": "{contactName}-Konto anlegen",
                    "cycle-distance-duration": "Radfahren: {distance} ({duration})",
                    "cyclewalk-distance-duration": "Fahrrad schieben: {distance} ({duration})",
                    datasources: "Datenquellen",
                    delete: "Löschen",
                    "departure-time-in-minutes": "{minutes} min",
                    departures: "Abfahrten",
                    destination: "Zielort",
                    "destination-placeholder": "Wohin reisen?",
                    "digitransit-platform": "Digitransit-Plattform",
                    "disruption-info": "Störungsmeldungen",
                    "disruption-info-no-alerts": "Keine Störungsmeldungen.",
                    "disruption-info-route-no-alerts": "Keine Störungsmeldungen.",
                    disruptions: "Störungen",
                    "distance-between": "Abstand zwischen {distance1} m — {distance2} m",
                    "distance-under": "Abstand unter {distance} m",
                    earlier: "Früher",
                    "edit-favourites": "Favoriten bearbeiten",
                    "extra-info": "Mehr Infos",
                    "favourite-target": "Favoriten",
                    ferry: "Fähre",
                    "ferry-with-route-number": "Fähre {routeNumber} {headSign}",
                    roadinspection: "Road inspection",
                    "roadinspection-vehicle-time-range": "Road inspection timerange: 30 days",
                    "realtime-roadinspection-vehicles": "Realtime road inspection",
                    "footer-feedback": "Feedback senden",
                    frontpage: "Startseite",
                    "geolocate-yourself": "Lokalisieren",
                    "geolocation-denied-heading": "Bitte Zugriff auf den Standort erlauben",
                    "geolocation-denied-text": "Zugriff auf den Standort ist nicht erlaubt. Bitte prüfen Sie die Einstellungen Ihres Browsers.",
                    "geolocation-failed-text": "Ihr Browser unterstützt keinen Zugriff auf den Standort",
                    "geolocation-prompt-text": "Bitte Zugriff auf den Standort erlauben",
                    "geolocation-timeout-heading": "Standortermittlung dauert länger als erwartet.",
                    "geolocation-timeout-text": "Abfahrtsort unten wählen, oder später versuchen.",
                    "give-destination": "Geben Sie Ihren Zielort ein",
                    "give-name-to-location": "Name für diesen Ort",
                    "give-origin": "Geben Sie Ihren Abfahrtsort ein",
                    "give-position": "Geben Sie Ihre Position ins Suchfeld ein.",
                    "hour-short": "h",
                    "how-to-rate-service": "Wie würden Sie den Service bewerten?",
                    "in-addition": "auch",
                    inquiry: "Feedback geben",
                    instructions: "Anweisungen",
                    "itinerary-feedback-button": "Feedback senden",
                    "itinerary-feedback-message": "Nichts gefunden?",
                    "itinerary-feedback-placeholder": "Beschreibung (optional)",
                    "itinerary-hide-stops": "Zwischenstopps ausblenden",
                    "itinerary-page.description": "Reisebeschreibung",
                    "itinerary-page.title": "Reisebeschreibung",
                    later: "Später",
                    leaves: "Abfahrt",
                    "leaving-at": "Abfahrt",
                    "likely-to-recommend": "Wie wahrscheinlich ist es, dass Sie unseren Service weiterempfehlen würden?",
                    "likely-to-use": "Wie wahrscheinlich würden Sie weiterhin diesen Service anstatt des bisherigen Services nutzen?",
                    loading: "laden",
                    locate: "Lokalisieren",
                    "location-examples": "z.B. Zuhause, Arbeit, Schule,...",
                    "location-from-map": "Gewählte Position",
                    login: "Login",
                    "long-transfers-margin": "Lange",
                    "main-menu-label-open": "Menü öffnen",
                    "main-mode": "Ich reise mit",
                    map: "Karte",
                    "messagebar-label-close-message-bar": "Banner schließen",
                    "messagebar-label-page": "Seite",
                    "minute-short": "m",
                    minutes: "min",
                    navigate: "Navigieren",
                    "near-you": "In der Nähe",
                    nearest: "Nächste",
                    "network-error": "Ein Netzwerkfehler ist aufgetreten.",
                    next: "Nächste",
                    "no-favourite-locations": "Fügen Sie ihre meist genutzen Orte hier hinzu.",
                    "no-favourites": "Sie können Favoriten mittels Klick auf den Stern hinzufügen. Danach werden diese hier erscheinen.",
                    "no-position": "Kein Standort",
                    "no-position-no-stops": "Die nächsten Haltestellen können nicht gezeigt werden, da Ihr Standort unbekannt ist.",
                    "no-route-end-date-not-in-range": "Current timetable does not include routes departing later.",
                    "no-route-msg": "Wir konnten leider keine Reisevorschläge für diese Strecke finden. Bitte versuchen Sie den Abfahrts- oder Zielort zu ändern.",
                    "no-route-start-date-not-in-range": "Current timetable does not include routes departing earlier.",
                    "no-transfers-margin": "Keine",
                    "no-trips-found": "Keine Reisen für diesen Tag gefunden.",
                    now: "Jetzt",
                    "number-of-intermediate-stops": "{number, plural, =0 {Keine Zwischenstopps} one {1 Zwischenstopp} other {{number} Zwischenstopps} }",
                    "off-canvas-info": "Mit einer Anmeldung können Sie Favoriten speichern und auf anderen Geräten wieder verwenden.",
                    or: "oder",
                    origin: "Start",
                    "origin-placeholder": "Start",
                    "own-position": "Aktueller Standort",
                    "page-not-found": "Oh! Seite wurde nicht gefunden ੨( ･᷄ ︵･᷅ )ｼ",
                    "park-and-ride": "Park-and-Ride",
                    "park-and-ride-availability": "Plätze verfügbar",
                    "parking-availability": "Plätze verfügbar",
                    "pay-attention": "Achtung",
                    "pick-icon": "Icon auswählen",
                    "place-route-or-keyword": "Adresse oder Haltestelle",
                    "platform-num": "Gleis {platformCode}",
                    "platform-short": "Gl. {platformCode}",
                    "prefer-walking": "Gehen bevorzugen",
                    previous: "Vorherige",
                    print: "Drucken",
                    "print-timetable": "Fahrplan",
                    rail: "Zug",
                    "rail-with-route-number": "Zug {routeNumber} {headSign}",
                    "realtime-matching": "Echtzeit-Matching",
                    "rent-cycle-at": "Fahrrad bei {station} mieten",
                    "required-ticket": "Benötigtes Ticket",
                    "right-now": "Jetzt",
                    route: "Linie",
                    "route-destination-arrives": "Ankunft / Letzte Haltestelle",
                    "route-from-here": "Route hierher",
                    "route-here": "Route von hier",
                    "route-not-possible": 'Leider ist diese Route nicht möglich. Technischer Fehler: "{error}"',
                    "route-page.description": "Linie {shortName}, {longName}",
                    "route-page.title": "Route {shortName}",
                    "route-page.title-short": "Linie",
                    "route-stop-or-keyword": "Linie oder Haltestelle",
                    routes: "Linien",
                    run: "Schnell",
                    save: "Speichern",
                    search: "Ziel",
                    "search-destination-results-but-no-search": 'Siehe Ergebnisse im "Zielort"-Tab',
                    "search-no-results": "Keine Ergebnisse",
                    "search-origin": "Geben Sie Ihren Abfahrtsort ein",
                    "search-position": "Standort suchen",
                    "search-search-results-but-no-destination": 'Siehe Ergebnisse im "Linie oder Haltestelle"-Tab',
                    "searching-position": "Suche aktuellen Standort...",
                    "select-position": "Standort aus vorherigen Suchen wählen",
                    send: "Senden",
                    settings: "Einstellungen",
                    share: "Reise teilen",
                    "show-departures": "Abfahrten zeigen",
                    "show-more": "Mehr zeigen",
                    "skip-positioning": "Überspringen",
                    slow: "Langsam",
                    "specify-location": "Ort eingeben",
                    "splash-choose": "Abfahrtsorte eingeben",
                    "splash-locating": "Suche aktuellen Standort...",
                    "splash-or-choose": "oder einen dieser Abfahrtsorte wählen",
                    "splash-use-positioning": "Aktuellen Standort benutzen",
                    "splash-welcome": "Wie möchten Sie starten?",
                    "splash-you-can-also": "Sie können auch",
                    stop: "Haltestelle",
                    "stop-number": "Haltestellennummer",
                    "stop-page.description": "Haltestelle - {name} {code}, {desc}",
                    "stop-page.title": "Haltestelle - {name} {code}",
                    "stop-page.title-short": "Haltestelle",
                    stops: "Haltestellen",
                    subway: "U-Bahn",
                    "subway-with-route-number": "U-Bahn {routeNumber} {headSign}",
                    "summary-page.description": "{from} - {to}",
                    "summary-page.title": "Reisevorschläge",
                    "terminal-page.description": "Terminal - {name}",
                    "terminal-page.title": "Terminal",
                    "terminal-page.title-short": "Terminal - {name}",
                    "terms-of-use": "Nutzungsbedingungen",
                    "ticket-and-price-info": "Ticket- und Preisinformation",
                    tickets: "Fahrkarten",
                    time: "Zeit",
                    timetable: "Fahrplan",
                    "to-stop": "Entfernung",
                    today: "Heute",
                    tomorrow: "Morgen",
                    tram: "Tram",
                    "tram-with-route-number": "Tram {routeNumber} {headSign}",
                    transfers: "Umstiege",
                    "transfers-allowed": "Umstiege erlauben",
                    "transfers-margin": "Umstiegszeit",
                    "trip-co2-emissions": "CO2-Emissionen der Reise",
                    "trip-page.description": "Linie {shortName}, {longName}",
                    "trip-page.title": "Linie {shortName}",
                    "try-again": "Nochmal versuchen",
                    "use-citybike": "Fahrrad benutzen",
                    "use-own-position": "Aktuellen Standort benutzen",
                    "using-modes": "Verkehrsmittel",
                    "very-likely": "Sehr wahrscheinlich",
                    "very-unlikely": "Sehr unwahrscheinlich",
                    wait: "Wartezeit",
                    "wait-amount-of-time": "Wartezeit {duration}",
                    walk: "gehen",
                    "walk-distance-duration": "Gehen {distance} ({duration})",
                    walking: "Gehen",
                    "walking-speed": "Laufgeschwindigkeit",
                    "weather-at-destination": "Wetter am Reiseziel",
                    yesterday: "Gestern",
                    "your-favourites": "Favoriten",
                    zones: "Tarifzonen"
                },
                en: {
                    "1. time range": "1. time range",
                    "2. time range": "2. time range",
                    "about-this-service": "About the service",
                    accessibility: "Accessibility",
                    "accessibility-limited": "Wheelchair",
                    "accessibility-nolimit": "No limits",
                    "accessibility-report": "Accessibility report",
                    "add-itinerary-via-point": "Add via point for itinerary",
                    "add-location": "Add location",
                    "add-location-to-favourites": "Add an important location to your Favorites",
                    "additional-analytics": "Additional analytics",
                    address: "Address",
                    "address-or-stop": "Address or stop",
                    agency: "Operator",
                    "air-humidity": "Air humidity",
                    "air-temperature": "Air temperature",
                    airplane: "Flight",
                    "airplane-with-route-number": "Flight {routeNumber}",
                    "airport-check-in": "Check-in at the {agency} desk",
                    "airport-collect-luggage": "Collect your luggage",
                    "airport-security-check-go-to-gate": "Proceed to your gate through security check",
                    "all-routes": "All routes",
                    "all-routes-disabled": "No routes",
                    "approx-meters": "{approxDistance} m",
                    "arriving-at": "Arriving",
                    "arriving-soon": "Now",
                    "average-speed": "Average speed",
                    "avoid-transfers": "Avoid transfers",
                    "avoid-walking": "Avoid walking",
                    back: "Go back",
                    "back-button-title": "Go back to previous page",
                    "back-to-front-page": "Back to the front page",
                    bicycle: "bike",
                    "bicycle-distance-duration": "Bike {distance} ({duration})",
                    "bicycle-route-prop-name": "Name",
                    "bicycle-route-prop-type": "Type",
                    "bicycle-route-prop-type-PLANNED": "Planned",
                    "bicycle-route-prop-type-CURRENT": "Current",
                    "bicycle-route-prop-year": "Year of completion",
                    "bicycle-route-prop-length": "Length",
                    "bicycle-routes": "Bicycle routes",
                    "bicycle-routes-BAANA": "Baana",
                    "bicycle-routes-BAANA-CURRENT": "Baana",
                    "bicycle-routes-BAANA-PLANNED": "Planned baana",
                    "bicycle-routes-BRAND": "Brand routes",
                    "bicycle-routes-BRAND-MAIN": "Brand route",
                    "bicycle-routes-BRAND-PERIMETER": "Perimeter route",
                    "bicycle-routes-MAIN_REGIONAL": "Main and regional routes",
                    "bicycle-routes-MAIN_REGIONAL-MAIN": "Main route",
                    "bicycle-routes-MAIN_REGIONAL-REGIONAL": "Regional route",
                    "bicycle-routes-MAIN_REGIONAL-PLANNED_MAIN": "Planned main route",
                    "bicycle-routes-MAIN_REGIONAL-PLANNED_REGIONAL": "Planned regional route",
                    "bicycle-routes-TYPES": "Other routes",
                    "bicycle-routes-TYPES-2_WAY": "2-way pp+jk",
                    "bicycle-routes-TYPES-SLOW_STREET": "Slow street (=bicycle street)",
                    "bicycle-routes-TYPES-BICYCLE_LANE": "Bicycle lane",
                    "bicycle-routes-TYPES-SHARED_SPACE": "Shared space",
                    "bicycle-routes-TYPES-4MW_SHARED": "4 m wide shared pp+jk",
                    "bicycle-routes-TYPES-35MW_SHARED": "3.5 m wide shared pp+jk",
                    "bicycle-routes-TYPES-ACCESS_ROAD": "Access road",
                    "bicycle-routes-TYPES-WIDE_SHOULDER": "Wide shoulder",
                    "bike-availability": "Bikes available at the station right now",
                    "bike-availability-short": "Bikes",
                    "bike-not-allowed-bus": "Bikes are not allowed on the bus",
                    "bike-not-allowed-tram": "Bikes are not allowed on the tram",
                    "biketransport-citybike": "I'm using a citybike",
                    "biketransport-only-bike": "I'm travelling only by bike",
                    "biking-amount": "Amount of biking",
                    "biking-speed": "Biking speed",
                    bus: "Bus",
                    "bus-with-route-number": "Bus {routeNumber} {headSign}",
                    "buy-ticket": "How to buy a ticket (HSL.fi)",
                    call: "Call",
                    cameras: "Cameras",
                    cancel: "Cancel",
                    car: "Car",
                    "car-distance-duration": "Drive {distance} ({duration})",
                    car_park: "park & ride",
                    cause: "cause",
                    "char-left": "characters",
                    "choose-date": "Choose date",
                    "choose-date-error": "The end date must be greater than the start date.",
                    "choose-stop": "Define selection",
                    "weather-station": "Weather station",
                    citybike: "City bike",
                    "citybike-distance-duration": "Bike {distance} ({duration})",
                    "citybike-off-season": "City bike stations will be opened again next spring",
                    "citybike-register-required": "To use city bikes, you need to register",
                    citybike_off: "Closed",
                    clear: "Clear",
                    "clear-selected-options": "Clear options",
                    close: "Close",
                    "close-comparison": "Close comparison",
                    compare: "Compare",
                    condition: "Condition",
                    "contact-information": "{contactName} contact details",
                    "create-account": "Create {contactName} account",
                    "cycle-distance-duration": "Cycle {distance} ({duration})",
                    "cyclewalk-distance-duration": "Walk your bike {distance} ({duration})",
                    daily: "Daily",
                    datasources: "Data sources",
                    date: "Date",
                    delete: "Delete",
                    "departure-time-in-minutes": "{minutes} min",
                    departures: "Departures",
                    description: "Find public transport services to locations near and far.",
                    destination: "Destination",
                    "destination-copied": "Destination url copied to clipboard",
                    "destination-needed": "A destination needs to be defined",
                    "destination-outside-service": "Unfortunately no routes were found for your journey. Your destination address is located outside the service area. Please change it.",
                    "destination-placeholder": "Enter destination, route or stop",
                    "dew-point-temperature": "Dew point temperature",
                    "dialog-return-to-map": "Return to map",
                    "digitransit-platform": "Digitransit service platform",
                    disclaimer: "Please note that the results are based on estimated travel times. The suggested transport connections cannot be guaranteed.",
                    disruption: "Disruption",
                    "disruption-info": "Disruption info",
                    "disruption-info-no-alerts": "No known disruptions or diversions.",
                    "disruption-info-route-no-alerts": "No known disruptions or diversions to the route.",
                    disruptions: "Disruptions",
                    "distance-between": "Distance {distance1} m — {distance2} m",
                    "distance-total": "Total distance",
                    "distance-under": "Distance less than {distance} m",
                    "driving-conditions": "Driving conditions",
                    earlier: "Earlier",
                    "eco-counter": "Eco counter",
                    "eco-counter-direction-1": "To city",
                    "eco-counter-direction-2": "From city",
                    "eco-counter-direction-5": "Not defined",
                    "eco-counter-direction-6": "From the north",
                    "eco-counter-direction-7": "From the east",
                    "eco-counter-direction-8": "From the south",
                    "eco-counter-direction-9": "From the west",
                    "eco-counter-total": "Total",
                    "eco-counter-week-title": "Week {date}",
                    "edit-favourites": "Edit the location in the Favorites",
                    "elevation-gained-total": "Elevation gained",
                    "elevation-lost-total": "Elevation lost",
                    explanations: "Explanations",
                    "export-time-range-1": "Export time range 1",
                    "export-time-range-2": "Export time range 2",
                    "external-modes": "Other transportation",
                    "extra-info": "Further information",
                    "favourite-target": "Favorite location",
                    ferry: "Ferry",
                    "ferry-with-route-number": "Ferry {routeNumber} {headSign}",
                    roadinspection: "Road inspection",
                    "roadinspection-vehicle-time-range": "Road inspection timerange: 30 days",
                    "realtime-roadinspection-vehicles": "Realtime road inspection",
                    fluency: "Congestions",
                    "footer-links": "Footer links",
                    "footer-faq": "FAQ",
                    "footer-feedback": "Submit feedback",
                    "footer-link-to-privacy-policy": "Privacy policy",
                    "from-city": "Out of the city",
                    frontpage: "Frontpage",
                    "generic-error": "There was an error",
                    "geolocate-yourself": "Detect your location",
                    "geolocation-denied-heading": "Geolocation denied",
                    "geolocation-denied-text": "You have not given a permission to use your geolocation. You can allow it from the phone or browser settings.",
                    "geolocation-failed-heading": "Geolocation failed",
                    "geolocation-failed-text": "Your browser does not support location retrieval.",
                    "geolocation-prompt-text": "Accept your browser’s request to access your location.",
                    "geolocation-timeout-heading": "Detecting your location is taking longer than expected.",
                    "geolocation-timeout-text": "Have you accepted your browser’s request to access your location?",
                    "give-destination": "Enter your destination",
                    "give-name-to-location": "Give the location a descriptive name",
                    "give-origin": "Enter your origin.",
                    "give-position": "Enter your location or origin in the search field.",
                    "give-route": "Search route",
                    "hide-realtime-on-map": "Hide vehicles on map",
                    hour: "Hour",
                    "hour-short": "h",
                    hourly: "Hourly",
                    "hourly-with-date": "Hourly ({date})",
                    "how-to-rate-service": "How would you rate the service?",
                    "in-addition": "In addition",
                    inquiry: "How did you find the new Journey Planner? Please tell us!",
                    instructions: "Instructions",
                    "itinerary-feedback-button": "Send feedback",
                    "itinerary-feedback-message": "Couldn’t find what you were looking for?",
                    "itinerary-feedback-placeholder": "Description (optional)",
                    "itinerary-hide-stops": "Hide stops",
                    "itinerary-page.description": "Itinerary",
                    "itinerary-page.title": "Itinerary",
                    "itinerary-summary-page.description": "Route suggestions",
                    "itinerary-summary-page.title": "Route suggestions",
                    "itinerary-ticket.title": "Required ticket",
                    "itinerary-tickets.title": "Required tickets",
                    "itinerary-time.title": "Duration",
                    "itinerary-walk.title": "Total walking distance",
                    "journeyplanner.title": "HSL Journey Planner",
                    "last-updated": "Last updated",
                    later: "Later",
                    leaves: "Leaves",
                    "leaving-at": "Leaving at",
                    "likely-to-recommend": "How likely are you to recommend our service to your friends or colleagues?",
                    "likely-to-use": "How likely are you to use this service rather than the current Journey Planner?",
                    links: "Links",
                    loading: "Loading...",
                    locate: "Detect location",
                    "location-examples": "e.g. Home, Work, School,...",
                    "location-from-map": "Selected location",
                    "location-home": "Home",
                    "location-school": "School",
                    "location-shopping": "Shopping",
                    "location-sport": "Sports",
                    "location-work": "Work",
                    login: "Log in",
                    "long-transfers-margin": "12 min",
                    "main-bicycle-route-contract": "Only main bicycle paths",
                    "main-menu-label-close": "Close the main menu",
                    "main-menu-label-open": "Open the main menu",
                    "main-mode": "I'm traveling by",
                    maintenance: "Maintenance",
                    "maintenance-job": "Maintenance job",
                    "maintenance-job-0": "Other routes in service",
                    "maintenance-job-1357": "Brushing of surface",
                    "maintenance-job-1364": "Trimming of surface",
                    "maintenance-job-1366": "Trimming of surface",
                    "maintenance-job-1367": "Anti-skid",
                    "maintenance-job-1368": "Anti-skid",
                    "maintenance-job-1369": "Anti-skid",
                    "maintenance-job-1370": "Snow plowing",
                    "maintenance-job-2864": "Trimming of surface",
                    "maintenance-job-99901": "Brushing of snow",
                    "maintenance-job-99902": "Road inspection",
                    "maintenance-job-legend-0": "Other routes in service",
                    "maintenance-job-legend-1357": "Brushing of surface",
                    "maintenance-job-legend-1364": "Trimming of surface",
                    "maintenance-job-legend-1366": "Trimming of surface",
                    "maintenance-job-legend-1367": "Anti-skid",
                    "maintenance-job-legend-1368": "Anti-skid",
                    "maintenance-job-legend-1369": "Anti-skid",
                    "maintenance-job-legend-1370": "Snow plowing",
                    "maintenance-job-legend-2864": "Trimming of surface",
                    "maintenance-job-legend-99901": "Brushing of surface",
                    "maintenance-job-legend-99902-car": "Road inspection (car)",
                    "maintenance-job-legend-99902-bicycle": "Road inspection (bicycle)",
                    "maintenance-job-realization": "Realization",
                    "maintenance-vehicle-name": "Vehicle #{vehicleNumber}",
                    "maintenance-vehicle-time-range": "Time range",
                    "maintenance-vehicle-time-range-12h": "12h",
                    "maintenance-vehicle-time-range-1d": "1d",
                    "maintenance-vehicle-time-range-1h": "1h",
                    "maintenance-vehicle-time-range-3d": "3d",
                    "maintenance-vehicle-time-range-30d": "30d brushing",
                    "maintenance-vehicle-time-range-3h": "3h",
                    "maintenance-vehicle-time-range-6h": "6h",
                    "maintenance-inspection-vehicle-type-car": "(car) ",
                    "maintenance-inspection-vehicle-type-bicycle": "(bicycle) ",
                    "maintenance-inspection-vehicle-type-unknown": "(unknown) ",
                    map: "Map",
                    "map-layer-citybike": "Citybike stations",
                    "map-layer-park-and-ride": "Park & ride sites",
                    "map-layer-stop-bus": "Bus stops",
                    "map-layer-stop-ferry": "Ferries",
                    "map-layer-stop-tram": "Tram stops",
                    "map-layer-terminal-bus": "Bus terminals",
                    "map-layer-terminal-rail": "Train stations",
                    "map-layer-terminal-subway": "Subway stations",
                    "map-layer-ticket-sales-machine": "Ticket machines",
                    "map-layer-ticket-sales-point": "Travel Card top up points",
                    "messagebar-label-close-message-bar": "Close banner",
                    "messagebar-label-page": "Page",
                    "minute-short": "min",
                    minutes: "min",
                    "minutes-or-route": "Min / Route",
                    monthly: "Monthly",
                    more: "More",
                    "more-settings": "More settings",
                    motorist: "Motorist",
                    navigate: "Navigate",
                    "near-you": "Near you",
                    nearest: "Nearest",
                    "network-error": "Network error",
                    next: "Next",
                    "no-bike-allowed-popup": "Bicycles are not allowed on buses or trams. If you are using these vehicles on your route, leave the bicycle at the stop or at a Park-and-Ride. ",
                    "no-favourite-locations": "Add your most used locations here. The buttons will plan your route straight away.",
                    "no-favourites": "Use the star buttons to add routes or stops to your favorites. Your favorites are shown on this page.",
                    "no-position": "No location",
                    "no-position-no-stops": "Your location is not available. We are unable to show the closest stops.",
                    "no-route-end-date-not-in-range": "Current timetable does not include routes departing later.",
                    "no-route-msg": "Unfortunately no routes were found for your journey. Please change your origin or destination address.",
                    "no-route-start-date-too-early": "Current timetable does not include routes departing earlier.",
                    "no-route-start-end": "Please select origin and destination.",
                    "no-transfers-margin": "1 min",
                    "no-trips-found": "No journeys found for the selected date.",
                    now: "Now",
                    "number-of-intermediate-stops": "{number, plural, =0 {No stops} one {1 stop} other {{number} stops} }",
                    "number-of-minutes": "{number, plural, =0 {0 minutes} one {1 minute} other {{number} minutes}}",
                    "off-canvas-info": "Log in to the service to save your favorites and utilize them on other devices",
                    "option-default": "Default",
                    "option-least": "Least",
                    "option-less": "Less",
                    "option-more": "More",
                    "option-most": "Most",
                    or: "or",
                    origin: "Origin",
                    "origin-outside-service": "Unfortunately no routes were found for your journey. Your origin address is located outside the service area, please change it.",
                    "origin-placeholder": "From? - address or stop",
                    "own-position": "Your current location",
                    "page-not-found": "The page cannot be found.",
                    "park-and-ride": "Park and Ride",
                    "park-and-ride-availability": "Spaces available",
                    parking: "Parking",
                    "parking-availability": "Spaces available",
                    "pay-attention": "N.B.",
                    "pick-icon": "Select icon",
                    "pick-mode": "Select a transport mode",
                    "place-route-or-keyword": "Destination, route or stop",
                    "platform-num": "Platform {platformCode}",
                    "platform-short": "Plat. {platformCode}",
                    "prefer-walking": "Prefer walking",
                    preferred: "Prefer routes",
                    previous: "Previous",
                    print: "Print",
                    "print-timetable": "Weekly timetable",
                    "public-transport": "Public transport",
                    rail: "Train",
                    "rail-with-route-number": "Train {routeNumber} {headSign}",
                    rain: "Rain",
                    "rain-classification": "Rain classification",
                    "rainfall-depth": "Rainfall depth",
                    "rainfall-intensity": "Rainfall intensity",
                    "no-rain": "Clear",
                    "has-rain": "Rain",
                    "light-snow": "Light snow",
                    "moderate-snow": "Moderate snow",
                    "heavy-snow": "Heavy snow",
                    realtime: "Real-time",
                    "realtime-maintenance-vehicles": "Realtime maintenance vehicles",
                    "realtime-matching": "Real-time integration",
                    "rent-cycle-at": "Rent a bike at {station} station",
                    "required-ticket": "Ticket required for the journey",
                    "return-cycle-to": "Return the bike to {station} station",
                    "reverse-route": "Reverse route direction",
                    "right-now": "Right now",
                    "road-condition": "Road conditions",
                    "road-condition-air": "Air",
                    "road-condition-condition": "Condition",
                    "road-condition-now": "Now",
                    "road-condition-road": "Road",
                    "road-condition-time": "Time",
                    "road-condition-weather": "Weather",
                    "road-condition-wind": "Wind",
                    "road-info": "Road information",
                    "road-signs": "Variable road signs",
                    "road-sign": "Variable road sign",
                    "road-sign-type": "Type",
                    "road-sign-display-value": "Display value",
                    "road-sign-effective-from": "Effective from",
                    "road-sign-SPEEDLIMIT": "Speed limit",
                    "road-sign-WARNING": "Warning",
                    "road-sign-INFORMATION": "Information",
                    "road-sign-warning-144": "Slippery road",
                    "road-sign-warning-165": "Traffic signals",
                    "road-sign-warning-189": "Other dangers",
                    "road-sign-warning-133": "Traffic jam",
                    "road-sign-warning-142": "Road works",
                    "road-sign-warning-183": "Crosswind",
                    "road-sign-warning-141": "Uneven road ahead",
                    "road-sign-warning-143": "Loose chippings",
                    "road-sign-warning-147": "Dangerous shoulders",
                    "road-sign-warning-154": "Skiers crossing",
                    "road-sign-warning-155": "Animals (Elk)",
                    "road-sign-warning-156": "Animals (Reindeer)",
                    "road-temperature": "Road temperature",
                    roadwork: "Roadwork",
                    roadworks: "Roadworks",
                    route: "Route",
                    "route-custom-settings": "Custom settings",
                    "route-default": "Default settings",
                    "route-destination-arrives": "Arrives / Terminus",
                    "route-fastest": "Fast route",
                    "route-from-here": "Route from here",
                    "route-guide": "Route guide",
                    "route-here": "Route here",
                    "route-here-button": "Copy route here",
                    "route-least-elevation-changes": "Avoid changes in elevation",
                    "route-least-transfers": "Avoid transfers",
                    "route-least-walking": "Avoid walking",
                    "route-not-possible": 'Unfortunately, your route is not available. Technical error: "{error}"',
                    "route-page.description": "Route {shortName} - {longName}",
                    "route-page.title": "Route {shortName}",
                    "route-page.title-short": "Route",
                    "route-prefer-greenways": "Prefer cycleways",
                    "route-prefer-illuminated": "Prefer illuminated routes",
                    "route-prefer-paved": "Prefer paved routes",
                    "route-prefer-walking-routes": "Prefer walking routes",
                    "route-prefer-winter-maintenance": "Prefer routes with winter maintenance",
                    "route-preferences": "Route preferences",
                    "route-public-transport-with-bicycle": "Public transport with bicycle",
                    "route-saved-settings": "Saved settings",
                    "route-stop-or-keyword": "About the route or stop",
                    routes: "Routes",
                    run: "Run",
                    save: "Save",
                    search: "Search",
                    "search-destination": "Search destination, route or stop",
                    "search-destination-results-but-no-search": "View results in the adjacent “Destination” tab",
                    "search-no-results": "No location",
                    "search-origin": "Search origin, route or stop",
                    "search-position": "Detect location",
                    "search-search-results-but-no-destination": "View results in the adjacent “About the route or stop” tab",
                    "searching-position": "Detecting location...",
                    "select-map-layers-header": "What should be shown on the map?",
                    "select-position": "Select your location from your previous searches",
                    send: "Send",
                    settings: "Settings",
                    "settings-label-change": "Change settings",
                    "settings-loadbutton": "Load settings",
                    "settings-loaded": "Settings loaded!",
                    "settings-reset": "Reset settings",
                    "settings-savebutton": "Save settings",
                    "settings-saved": "Changes saved!",
                    share: "Share itinerary",
                    "show-departures": "Show departures",
                    "show-information-as-list": "Show information as list",
                    "show-more": "Show more",
                    "show-realtime-on-map": "Show vehicles on map",
                    "show-routes": "Show routes",
                    "skip-positioning": "Skip",
                    slow: "Slow",
                    "snow-depth": "Snow depth",
                    "specify-location": "Specify location",
                    "speed-limit": "Speed limit",
                    "splash-choose": "Specify origin",
                    "splash-locating": "Detecting location",
                    "splash-or-choose": "or select your origin",
                    "splash-use-positioning": "Use location services",
                    "splash-welcome": "How do you wish to start?",
                    "splash-you-can-also": "or",
                    stop: "Stop",
                    "stop-number": "Stop number",
                    "stop-page.description": "Stop {name} - {code}",
                    "stop-page.title": "Stop {name} - {code}",
                    "stop-page.title-short": "Stop",
                    stops: "Stops",
                    "street-mode-bicycle": "Bicycle",
                    "street-mode-car": "Car",
                    "street-mode-car_park": "Park & ride",
                    "street-mode-public_transport": "Public transport",
                    "street-mode-walk": "Walking",
                    subway: "Metro",
                    "subway-with-route-number": "Metro {routeNumber} {headSign}",
                    "summary-page.description": "{from} - {to}",
                    "summary-page.title": "Itinerary suggestions",
                    "terminal-page.description": "Terminal {stop_name}",
                    "terminal-page.title": "Terminal {stop_name}",
                    "terminal-page.title-short": "Terminal",
                    "terms-of-use": "Terms of Use",
                    "ticket-and-price-info": "Ticket and price information",
                    "ticket-single-adult": "Adult",
                    "ticket-type-none": "No fare zone limits",
                    tickets: "Tickets",
                    time: "Time",
                    timetable: "Timetable",
                    "to-city": "Towards the city",
                    "to-stop": "To stop",
                    today: "Today",
                    tomorrow: "Tomorrow",
                    "traffic-announcement-additional-info": "Additional info",
                    "traffic-announcement-additional-info-at": "Heating with fire",
                    "traffic-announcement-additional-info-fd": "Follow directions",
                    "traffic-announcement-additional-info-pd": "Police is directing traffic",
                    "traffic-announcement-class-acc": "Onnettomuus",
                    "traffic-announcement-class-act": "Yleisö- tai muut tapahtumat",
                    "traffic-announcement-class-equ": "Tienvarsilaitteiden toiminta",
                    "traffic-announcement-class-fos": "Näkyvyys- ja ympäristöolosuhteet",
                    "traffic-announcement-class-krk": "Kelirikko",
                    "traffic-announcement-class-los": "Liikennetilanne",
                    "traffic-announcement-class-mhz": "Vaaraa aiheuttava ajoneuvo tai kuljetus tiellä",
                    "traffic-announcement-class-ohz": "Este esine tai eläin tiellä",
                    "traffic-announcement-class-res": "Liikennerajoitukset",
                    "traffic-announcement-class-rmt": "Tietyö",
                    "traffic-announcement-class-shz": "Ajo-olot liukkaus kelitilanne",
                    "traffic-announcement-duration": "Estimated duration",
                    "traffic-announcement-duration-gte_180_lte_360": "3 - 6 hours",
                    "traffic-announcement-duration-gte_30_lte_60": "30 - 60 minutes",
                    "traffic-announcement-duration-gte_360": "More than 6 hours",
                    "traffic-announcement-duration-gte_60_lte_180": "1 - 3 hours",
                    "traffic-announcement-duration-lte_30": "Under 30 minutes",
                    "traffic-announcement-modes-of-transport": "Traffic type",
                    "traffic-announcement-modes-of-transport-bicycle": "Bicycle",
                    "traffic-announcement-modes-of-transport-car": "Car",
                    "traffic-announcement-modes-of-transport-pedestrian": "Pedestrian",
                    "traffic-announcement-modes-of-transport-public_transport": "Public transport",
                    "traffic-announcement-oversize-load": "Special transport",
                    "traffic-announcement-oversize-load-definition": "(W. x H. x L. in meters)",
                    "traffic-announcement-severity": "Severity",
                    "traffic-announcement-severity-high": "Significantly harms traffic",
                    "traffic-announcement-severity-low": "Does not harm traffic",
                    "traffic-announcement-severity-medium": "Harms traffic",
                    "traffic-announcement-subclass-abl": "Erikoiskuljetus",
                    "traffic-announcement-subclass-acb": "Onnettomuus, jossa mukana linja-auto",
                    "traffic-announcement-subclass-ach": "Onnettomuus, jossa mukana raskas ajoneuvo",
                    "traffic-announcement-subclass-aci": "Onnettomuus",
                    "traffic-announcement-subclass-acl": "Onnettomuuspaikan raivaus käynnissä",
                    "traffic-announcement-subclass-acm": "Usean ajoneuvon onnettomuus",
                    "traffic-announcement-subclass-acz": "Onnettomuus, jossa mukana vaarallisia aineita",
                    "traffic-announcement-subclass-ali": "Alikulkukäytävän rakentaminen",
                    "traffic-announcement-subclass-anh": "Poroja tiel",
                    "traffic-announcement-subclass-anl": "Hirviä tiellä",
                    "traffic-announcement-subclass-anm": "Eläimiä tiellä",
                    "traffic-announcement-subclass-aol": "Raskas ajoneuvo kaatunut tielle",
                    "traffic-announcement-subclass-aqd": "Vesiliirron vaara",
                    "traffic-announcement-subclass-asp": "Ulosajo",
                    "traffic-announcement-subclass-bkd": "Rikkoutunut ajoneuvo tiellä",
                    "traffic-announcement-subclass-bli": "Lumimyrsky",
                    "traffic-announcement-subclass-bls": "Pöllyävää lunta",
                    "traffic-announcement-subclass-brc": "Silta suljettu liikenteeltä",
                    "traffic-announcement-subclass-ctr": "Liikenne ohjataan kaksisuuntaisena toiselle ajoradalle",
                    "traffic-announcement-subclass-dcd": "Huono ajokeli",
                    "traffic-announcement-subclass-dcn": "Ajo-olot parantuneet",
                    "traffic-announcement-subclass-do": "Kiertotie käytössä",
                    "traffic-announcement-subclass-efa": "Messut",
                    "traffic-announcement-subclass-ens": "ENSITIEDOTE LIIKENNEONNETTOMUUDESTA",
                    "traffic-announcement-subclass-epr": "Kulkue",
                    "traffic-announcement-subclass-esp": "Urheilutapahtuma",
                    "traffic-announcement-subclass-evd": "Mielenosoitus",
                    "traffic-announcement-subclass-evm": "Yleisötapahtuma",
                    "traffic-announcement-subclass-fig": "Maastopalo",
                    "traffic-announcement-subclass-fir": "Tulipalo",
                    "traffic-announcement-subclass-fld": "Tulva",
                    "traffic-announcement-subclass-flt": "Puu kaatunut tielle",
                    "traffic-announcement-subclass-fod": "Sakeaa sumua",
                    "traffic-announcement-subclass-fof": "Jäätävää sumua",
                    "traffic-announcement-subclass-fog": "Sumua",
                    "traffic-announcement-subclass-fop": "Paikoitellen sumua",
                    "traffic-announcement-subclass-fpc": "Sähköjohtoja pudonnut tielle",
                    "traffic-announcement-subclass-fue": "Öljyä tiellä",
                    "traffic-announcement-subclass-gal": "Kova tuuli",
                    "traffic-announcement-subclass-hai": "Raekuuro",
                    "traffic-announcement-subclass-hav": "Hirviaita vaurioitunut",
                    "traffic-announcement-subclass-hbd": "Rikkoutunut raskas ajoneuvo tiellä",
                    "traffic-announcement-subclass-ibu": "Tiet jäätymässä",
                    "traffic-announcement-subclass-icp": "Paikoin liukasta",
                    "traffic-announcement-subclass-jjm": "Kevyen liikenteen väylät jäisiä ja märkiä",
                    "traffic-announcement-subclass-jjt": "Kevyen liikenteen väylät jäätymäs",
                    "traffic-announcement-subclass-jli": "Kevyen liikenteen väylät liukkaita",
                    "traffic-announcement-subclass-jlu": "Kevyen liikenteen väylillä lunta",
                    "traffic-announcement-subclass-jpl": "Kevyen liikenteen väylät paikoin liukkaita",
                    "traffic-announcement-subclass-jyr": "Päällysteen jyrsintätyö",
                    "traffic-announcement-subclass-kai": "Sadevesikaivojen puhdistustyö",
                    "traffic-announcement-subclass-kav": "Kaidevaurio",
                    "traffic-announcement-subclass-kdt": "Kaidetyö",
                    "traffic-announcement-subclass-kkp": "Kaivon kansi rikki/poissa paikaltaan",
                    "traffic-announcement-subclass-klv": "Kevyenliikenteen väylän rakentaminen",
                    "traffic-announcement-subclass-kri": "Kelirikko",
                    "traffic-announcement-subclass-kuo": "Kuoppia tiessä",
                    "traffic-announcement-subclass-lc1": "Yksi ajokaista suljettu liikenteeltä",
                    "traffic-announcement-subclass-lc2": "Kaksi ajokaistaa suljettu liikenteeltä",
                    "traffic-announcement-subclass-lcs": "Ajokaistoja on suljettu liikenteeltä",
                    "traffic-announcement-subclass-lij": "Liittymän parannustyö",
                    "traffic-announcement-subclass-lin": "Ajokaista ajoittain suljettu",
                    "traffic-announcement-subclass-lo1": "Vain yksi ajokaista käytössä",
                    "traffic-announcement-subclass-lo2": "Vain kaksi kaistaa käytössä",
                    "traffic-announcement-subclass-loh": "Tienvarsilaitteiden huoltotyö",
                    "traffic-announcement-subclass-lpa": "Liikenne pysäytetään ajoittain",
                    "traffic-announcement-subclass-ls1": "Liikenne seisoo",
                    "traffic-announcement-subclass-ls2": "Liikenne pysähtelee",
                    "traffic-announcement-subclass-ls3": "Liikenne hidasta",
                    "traffic-announcement-subclass-ls4": "Liikenne jonoutunut",
                    "traffic-announcement-subclass-ls6": "Pitkiä jonoja",
                    "traffic-announcement-subclass-lsl": "Tie sortunut",
                    "traffic-announcement-subclass-lso": "Liikenne saattaa ruuhkautua",
                    "traffic-announcement-subclass-lsr": "Liikenne saattaa ruuhkautua",
                    "traffic-announcement-subclass-lvt": "Liikennevalotyö",
                    "traffic-announcement-subclass-mar": "Maratonjuoksu",
                    "traffic-announcement-subclass-mil": "Sotilassaattue",
                    "traffic-announcement-subclass-nit": "Niittotyö",
                    "traffic-announcement-subclass-nls": "Ajokaistoja kavennettu",
                    "traffic-announcement-subclass-ohx": "Liikennettä vaarantava este tiellä",
                    "traffic-announcement-subclass-oil": "Polttoainetta tiellä",
                    "traffic-announcement-subclass-pav": "Päällystevaurio",
                    "traffic-announcement-subclass-pel": "Pelastusharjoitus",
                    "traffic-announcement-subclass-pki": "POLIISIN KELI-ILMOITUS",
                    "traffic-announcement-subclass-pys": "Pysäkkiin liittyvä ilmoitus",
                    "traffic-announcement-subclass-rad": "Kiertotieopastus",
                    "traffic-announcement-subclass-raf": "Jäätävää sadetta",
                    "traffic-announcement-subclass-rai": "Vesisade",
                    "traffic-announcement-subclass-raj": "Raskas ajoneuvo jumissa",
                    "traffic-announcement-subclass-rba": "Liikenne pysäytetään",
                    "traffic-announcement-subclass-rbi": "Mustaa jäätä",
                    "traffic-announcement-subclass-rbl": "Räjäytystyö",
                    "traffic-announcement-subclass-rbm": "Siltatyö",
                    "traffic-announcement-subclass-rca": "Toinen ajorata suljettu liikenteeltä",
                    "traffic-announcement-subclass-rcd": "Tie suljettu liikenteeltä",
                    "traffic-announcement-subclass-rcw": "Tienrakennustyö",
                    "traffic-announcement-subclass-reb": "Liittymisramppi tukossa",
                    "traffic-announcement-subclass-rec": "Ramppi suljettu liikenteeltä",
                    "traffic-announcement-subclass-ret": "Poikkeavat kaistajärjestelyt",
                    "traffic-announcement-subclass-rew": "Raivaus- ja korjaustöitä",
                    "traffic-announcement-subclass-ric": "Tiet ovat jäisiä",
                    "traffic-announcement-subclass-ril": "Risteykset liukkaita",
                    "traffic-announcement-subclass-rin": "Tie ajoittain suljettu liikenteeltä",
                    "traffic-announcement-subclass-rmk": "Kunnossapito- ja hoitotyöt",
                    "traffic-announcement-subclass-rmv": "Työmaa-ajoa liikenteen seassa",
                    "traffic-announcement-subclass-rmw": "Tiemerkintätyö",
                    "traffic-announcement-subclass-rnl": "Muuttuneet liikennejärjestelyt",
                    "traffic-announcement-subclass-rno": "Rekan nosto",
                    "traffic-announcement-subclass-rpc": "Tienpinta huonossa kunnossa",
                    "traffic-announcement-subclass-rrw": "Tietyö keskikaistalla",
                    "traffic-announcement-subclass-rsl": "Tiet ovat liukkaita",
                    "traffic-announcement-subclass-rwi": "Tiet jäisiä ja märkiä",
                    "traffic-announcement-subclass-rwk": "Tietyö",
                    "traffic-announcement-subclass-rwl": "Pitkäaikainen tienparannustyö",
                    "traffic-announcement-subclass-rwm": "Tienparannustyö",
                    "traffic-announcement-subclass-rwr": "Päällystystyö",
                    "traffic-announcement-subclass-rxb": "Poistumisramppi tukossa",
                    "traffic-announcement-subclass-sat": "Kohtaava liikenne, ajo vuorotellen ohjauksen mukaan",
                    "traffic-announcement-subclass-sav": "Savea tiellä",
                    "traffic-announcement-subclass-sfh": "Sakea lumisade",
                    "traffic-announcement-subclass-sfl": "Lumisade",
                    "traffic-announcement-subclass-shl": "Kuorma levinnyt tielle",
                    "traffic-announcement-subclass-sjt": "Sähköjohtotyö",
                    "traffic-announcement-subclass-slt": "Räntäsade",
                    "traffic-announcement-subclass-slu": "Lumisohjoa",
                    "traffic-announcement-subclass-smo": "Savu haittaa näkyvyyttä",
                    "traffic-announcement-subclass-smv": "Nestettä vuotanut liikkuvasta ajoneuvosta",
                    "traffic-announcement-subclass-snp": "Lumi- tai jääpolanne",
                    "traffic-announcement-subclass-snr": "Lumikinoksia",
                    "traffic-announcement-subclass-snw": "Kaistaopasteet eivät toimi",
                    "traffic-announcement-subclass-sok": "Sivuojan kaivuutyö",
                    "traffic-announcement-subclass-son": "SUURONNETTOMUUS",
                    "traffic-announcement-subclass-spk": "Sirotepaikkaus, irtokiviä",
                    "traffic-announcement-subclass-spy": "Roiskevesi haittaa näkyvyyttä",
                    "traffic-announcement-subclass-sro": "Lunta tiellä",
                    "traffic-announcement-subclass-std": "Myrskyvaurioita",
                    "traffic-announcement-subclass-stk": "Soratien kunto huono",
                    "traffic-announcement-subclass-stm": "Myrsky",
                    "traffic-announcement-subclass-taa": "Toinen ajokaista avattu liikenteelle",
                    "traffic-announcement-subclass-tal": "Akselipainorajoitus",
                    "traffic-announcement-subclass-tav": "Tie on avattu liikenteelle",
                    "traffic-announcement-subclass-tbu": "Liikenne ruuhkautuu",
                    "traffic-announcement-subclass-tcn": "Liikenneruuhka",
                    "traffic-announcement-subclass-tcx": "Liikenneruuhka ohi",
                    "traffic-announcement-subclass-tea": "Liikenne on palautumassa normaaliksi",
                    "traffic-announcement-subclass-tgw": "Painorajoitus asetettu",
                    "traffic-announcement-subclass-tlo": "Liikennevalot eivät toimi",
                    "traffic-announcement-subclass-tlt": "Tilapäinen liikennevalo-ohjaus",
                    "traffic-announcement-subclass-tmt": "Tutkimus- ja mittaustyö",
                    "traffic-announcement-subclass-tnr": "Tilapäinen nopeusrajoitus",
                    "traffic-announcement-subclass-tol": "Tie on liukas",
                    "traffic-announcement-subclass-tri": "Tasoristeystyö",
                    "traffic-announcement-subclass-tuc": "Tunneli suljettu liikenteeltä",
                    "traffic-announcement-subclass-tvl": "Tievalaistuksen lamppuja pimeänä",
                    "traffic-announcement-subclass-tvm": "Tievalaistus vioittunut myrskyssä",
                    "traffic-announcement-subclass-tvo": "Tievalaistus vioittunut onnettomuudessa",
                    "traffic-announcement-subclass-tvt": "Tievalaistustyö",
                    "traffic-announcement-subclass-vet": "Vettä tiellä",
                    "traffic-announcement-subclass-vfr": "Palava ajoneuvo",
                    "traffic-announcement-subclass-vir": "Näkyvyys heikentynyt",
                    "traffic-announcement-subclass-vka": "Järjestelmän vikatila",
                    "traffic-announcement-subclass-vmt": "Viimeistelytyö",
                    "traffic-announcement-subclass-vnw": "Muuttuvat opasteet eivät toimi",
                    "traffic-announcement-subclass-vrt": "Vesakon raivaus",
                    "traffic-announcement-subclass-vwc": "Ajoneuvo väärällä ajoradalla",
                    "traffic-announcement-subclass-wbc": "Kaapelityö",
                    "traffic-announcement-subclass-wbs": "Kunnallistekninen työ",
                    "traffic-announcement-subclass-wic": "Kova sivutuuli",
                    "traffic-announcement-subclass-wig": "Puuskittainen tuuli",
                    "traffic-announcement-subclass-yak": "Työkohteessa vain yksi ajokaista käytössä",
                    "traffic-announcement-temporary-speed-limit": "Temporary speed limit",
                    "traffic-announcement-traffic-direction": "Direction",
                    "traffic-announcement-traffic-direction-both": "Both directions",
                    "traffic-announcement-traffic-direction-negative": "Opposite direction",
                    "traffic-announcement-traffic-direction-positive": "Chosen direction",
                    "traffic-announcement-vehicle-size-limit": "Vehicle limitations",
                    "traffic-announcement-vehicle-size-limit-definition": "(W. x H. x L. x Weight in meters and tons)",
                    "traffic-camera": "Traffic camera",
                    "traffic-camera-no-recent-images": "No recent images",
                    "traffic-count": "Traffic count",
                    "traffic-direction": "Direction",
                    "traffic-flow": "Traffic flow",
                    "traffic-flow-heavy": "Rush",
                    "traffic-flow-medium": "Slow",
                    "traffic-flow-normal": "Normal",
                    "traffic-flow-unknown": "Unknown",
                    "traffic-info": "Traffic information",
                    "traffic-monitoring": "Traffic monitoring",
                    "traffic-restriction": "Traffic restriction",
                    tram: "Tram",
                    "tram-with-route-number": "Tram {routeNumber} {headSign}",
                    transfers: "Number of transfers",
                    "transfers-allowed": "Transfers allowed",
                    "transfers-margin": "Transfer margin at least",
                    "trip-co2-emissions": "CO2 emissions of the journey",
                    "trip-information": "Trip information",
                    "trip-page.description": "Route {route_short_name} - {route_long_name}",
                    "trip-page.title": "Route {route_short_name}",
                    "try-again": "Try again",
                    unpreferred: "Avoid routes",
                    "use-citybike": "Start using",
                    "use-national-service": "You can also try the national service available at",
                    "use-own-position": "Use current location",
                    "using-modes": "I want to travel by",
                    "very-likely": "Very likely",
                    "very-unlikely": "Very unlikely",
                    "via-leg-stop-duration": "At via point {stayDuration}",
                    "via-point": "Via point",
                    "viapoint-remove": "Remove viapoint",
                    "viapoint-slack-amount": "Stop duration",
                    "view-route": "View Route",
                    wait: "Wait",
                    "wait-amount-of-time": "Wait {duration}",
                    walk: "walking",
                    "walk-distance-duration": "Walk {distance} ({duration})",
                    walking: "Amount of walking",
                    "walking-speed": "Walking speed",
                    "warning-call-agency": "Only on demand: {routeName}, which needs to be booked in advance.",
                    "warning-call-agency-no-route": "Only on demand. Needs to be booked in advance.",
                    "weather-at-destination": "Weather at the destination",
                    "weather-stations": "Weather stations",
                    weekly: "Weekly",
                    "wind-direction": "Wind direction",
                    "wind-speed": "Wind speed",
                    north: "North",
                    northeast: "Northeast",
                    east: "East",
                    southeast: "Southeast",
                    south: "South",
                    southwest: "Southwest",
                    west: "West",
                    northwest: "Northwest",
                    yesterday: "Yesterday",
                    "your-favourites": "Favorites",
                    zones: "Fare zones"
                },
                es: {
                    "about-this-service": "Sobre el servicio",
                    accessibility: "Accesibilidad",
                    "accessibility-limited": "Silla de ruedas",
                    "accessibility-nolimit": "Sin límites",
                    "add-itinerary-via-point": "Añadir punto intermedio al itinerario",
                    "add-location": "Añadir localización",
                    "add-location-to-favourites": "Añadir una importante localización a tus Favoritos",
                    address: "Dirección",
                    "address-or-stop": "Dirección o parada",
                    agency: "Operador",
                    airplane: "Vuelo",
                    "airplane-with-route-number": "Vuelo {routeNumber}",
                    "airport-check-in": "Facture en el mostrador de {agency}",
                    "airport-collect-luggage": "Recoja su equipaje",
                    "airport-security-check-go-to-gate": "Proceda a su puerta a través del control de seguridad",
                    "all-routes": "Todas las rutas",
                    "all-routes-disabled": "Ninguna ruta",
                    "approx-meters": "{approxDistance} m",
                    "arriving-at": "Llegada",
                    "arriving-soon": "Ahora",
                    "avoid-transfers": "Evitar transbordos",
                    "avoid-walking": "Evitar andar",
                    "back-to-front-page": "Volver a la página principal",
                    bicycle: "bicicleta",
                    "bicycle-distance-duration": "Bicicleta {distance} ({duration})",
                    "bike-availability": "Bicicletas disponibles actualmente en la estación",
                    "bike-availability-short": "Bicicletas",
                    bus: "Bus",
                    "bus-with-route-number": "Bus {routeNumber} {headSign}",
                    "buy-ticket": "Cómo comprar un ticket (HSL.fi)",
                    call: "Llamar",
                    cancel: "Cancelar",
                    car: "Coche",
                    "car-distance-duration": "Conducir {distance} ({duration})",
                    car_park: "park & ride",
                    cause: "causa",
                    "char-left": "carácteres",
                    "choose-stop": "Seleccione parada",
                    citybike: "Bicicleta pública",
                    "citybike-distance-duration": "Bicicleta {distance} ({duration})",
                    "citybike-register-required": "Para usar la red de bicicleta pública, necesita registrarse.",
                    citybike_off: "Cerrada",
                    close: "Cerrar",
                    "contact-information": "{contactName} detalles de contacto",
                    "create-account": "Crear cuenta {contactName}",
                    "cycle-distance-duration": "Ir en bici {distance} ({duration})",
                    "cyclewalk-distance-duration": "Anda junto a tu bici {distance} ({duration})",
                    datasources: "Fuentes de datos",
                    date: "Fecha",
                    delete: "Eliminar",
                    "departure-time-in-minutes": "{minutes} min",
                    departures: "Salidas",
                    description: "Encuentre servicios de transporte público a localizaciones cercanas y lejanas.",
                    destination: "Destino",
                    "destination-outside-service": "Desafortunadamente no hemos encontrado rutas para su viaje. Su destino está fuera del área de servicio. Por favor cambie el destino.",
                    "destination-placeholder": "Introduzca destino, ruta or parada",
                    "digitransit-platform": "Plataforma del servicio Digitransit",
                    disruption: "Incidencia",
                    "disruption-info": "Información sobre incidencias",
                    "disruption-info-no-alerts": "No hay desvíos o incidencias conocidos.",
                    "disruption-info-route-no-alerts": "No hay desvíos o incidencias conocidos en la ruta.",
                    disruptions: "Incidencias",
                    "distance-between": "Distancia {distance1} m — {distance2} m",
                    "distance-under": "Distancia menor que {distance} m",
                    earlier: "Antes",
                    "edit-favourites": "Edite la localización en los Favoritos",
                    explanations: "Explicaciones",
                    "export-time-range-1": "Export time range 1",
                    "export-time-range-2": "Export time range 2",
                    "extra-info": "Más información",
                    "favourite-target": "Localización favorita",
                    ferry: "Ferry",
                    "ferry-with-route-number": "Ferry {routeNumber} {headSign}",
                    roadinspection: "Road inspection",
                    "roadinspection-vehicle-time-range": "Road inspection timerange: 30 days",
                    "realtime-roadinspection-vehicles": "Realtime road inspection",
                    "footer-feedback": "Envíe comentarios",
                    "footer-link-to-privacy-policy": "Política de privacidad",
                    frontpage: "Página principal",
                    "generic-error": "Ha habido un error",
                    "geolocate-yourself": "Detecte su localización",
                    "geolocation-denied-heading": "Geolocalización denegada",
                    "geolocation-denied-text": "No ha dado permiso para usar su geolocalización. Puede permitirlo desde los ajustes de su teléfono o navegador web.",
                    "geolocation-failed-heading": "Geolocalización fallida",
                    "geolocation-failed-text": "Su navegador no soporta la obtención de localización.",
                    "geolocation-prompt-text": "Acepte la petición de su navegador para acceder a su localización.",
                    "geolocation-timeout-heading": "Detectar su localización está llevando más tiempo del esperado.",
                    "geolocation-timeout-text": "¿Ha aceptado la petición de su navegador para acceder a su localización?",
                    "give-destination": "Busque destino",
                    "give-name-to-location": "De un nombre descriptivo a la localización",
                    "give-origin": "Introduzca su origen.",
                    "give-position": "Introduzca su localización u origen en el cuadro de búsqueda.",
                    hour: "Hora",
                    "hour-short": "h",
                    "how-to-rate-service": "¿Qué nota le pondría al servicio?",
                    "in-addition": "Como añadido",
                    inquiry: "¿Qué le ha parecido el nuevo ruteador? ¡Cuéntenos!",
                    instructions: "Instrucciones",
                    "itinerary-feedback-button": "Enviar comentarios",
                    "itinerary-feedback-message": "¿No encuentra lo que estaba buscando?",
                    "itinerary-feedback-placeholder": "Descripción (opcional)",
                    "itinerary-hide-stops": "Ocultar paradas",
                    "itinerary-page.description": "Itinerario",
                    "itinerary-page.title": "Itinerario",
                    "itinerary-summary-page.description": "Sugerencias de ruta",
                    "itinerary-summary-page.title": "Sugerencias de ruta",
                    "itinerary-ticket.title": "Ticket requerido",
                    "itinerary-tickets.title": "Tickets requeridos",
                    "itinerary-time.title": "Duración",
                    "itinerary-walk.title": "Distancia total caminando",
                    "journeyplanner.title": "Ruteador de HSL",
                    later: "Después",
                    leaves: "Sale",
                    "leaving-at": "Sale a las",
                    "likely-to-recommend": "¿Recomendaría el servicio a sus amigos o conocidos?",
                    "likely-to-use": "¿Usaría este servicio en vez del ruteador actual?",
                    loading: "Cargando...",
                    locate: "Detectando localización",
                    "location-examples": "p.ej. Casa, Trabajo, Colegio,...",
                    "location-from-map": "Localización seleccionada",
                    login: "Iniciar sesión",
                    "long-transfers-margin": "12 min",
                    "main-menu-label-close": "Cerrar el menú principal",
                    "main-menu-label-open": "Abrir el menú principal",
                    "main-mode": "Viajo mediante",
                    map: "Mapa",
                    "messagebar-label-close-message-bar": "Cerrar el banner",
                    "messagebar-label-page": "Página",
                    "minute-short": "min",
                    minutes: "min",
                    "minutes-or-route": "Min / Ruta",
                    "more-settings": "Más configuración",
                    navigate: "Navegar",
                    "near-you": "Cerca de ud.",
                    nearest: "Más cercano",
                    "network-error": "Error de red",
                    next: "Siguiente",
                    "no-favourite-locations": "Añada sus destinos favoritos aquí. Los botones le crearán la ruta de un clic.",
                    "no-favourites": "Clique en las estrellas para añadir sus rutas o paradas favoritas. Sus favoritos se enseñarán en esta página.",
                    "no-position": "Sin localización",
                    "no-position-no-stops": "Su localización no está disponible. No podemos enseñarle las paradas cercanas.",
                    "no-route-end-date-not-in-range": "Los horarios actuales no incluyen rutas saliendo más tarde.",
                    "no-route-msg": "Desafortunadamente no se encontraron rutas para su viaje. Por favor cambie el origen o el destino.",
                    "no-route-start-date-too-early": "Los horarios actuales no incluyen rutas saliendo antes.",
                    "no-route-start-end": "Por favor seleccione origen y destino.",
                    "no-transfers-margin": "1 min",
                    "no-trips-found": "No se han encontrado viajes para la fecha seleccionada.",
                    now: "Ahora",
                    "number-of-intermediate-stops": "{number, plural, =0 {Sin paradas} one {1 parada} other {{number} paradas} }",
                    "off-canvas-info": "Inicie sesión para guardar sus favoritos y utilizarlos en otros dispositivos",
                    or: "o",
                    origin: "Origen",
                    "origin-outside-service": "Desafortunadamente no hemos encontrado rutas para su viaje. Su origen está fuera del área de servicio. Por favor cambie el destino.",
                    "origin-placeholder": "¿Desde? - dirección o parada",
                    "own-position": "Su posición actual",
                    "page-not-found": "La página no se puede encontrar.",
                    "park-and-ride": "Park and Ride",
                    "park-and-ride-availability": "Espacios disponibles",
                    "parking-availability": "Espacios disponibles",
                    "pay-attention": "N.B.",
                    "pick-icon": "Seleccione icono",
                    "place-route-or-keyword": "Destino, ruta o parada",
                    "platform-num": "Platforma {platformCode}",
                    "platform-short": "Plat. {platformCode}",
                    "prefer-walking": "Preferir andar",
                    previous: "Anterior",
                    print: "Imprimir",
                    rail: "Tren",
                    "rail-with-route-number": "Tren {routeNumber} {headSign}",
                    realtime: "Tiempo real",
                    "realtime-matching": "Integración del tiempo real",
                    "rent-cycle-at": "Alquile una bici en la estación {station}",
                    "required-ticket": "Ticket requerido para el viaje",
                    "right-now": "Ahora mismo",
                    route: "Ruta",
                    "route-default": "Configuración por defecto",
                    "route-destination-arrives": "Llegada / Fin de línea",
                    "route-fastest": "Ruta rápida",
                    "route-from-here": "Ruta desde aquí",
                    "route-guide": "Guía de la ruta",
                    "route-here": "Ruta hacia aquí",
                    "route-least-transfers": "Evitar transbordos",
                    "route-least-walking": "Evitar andar",
                    "route-not-possible": 'Desafortunadamente, su ruta no está disponible. Error: "{error}"',
                    "route-page.description": "Ruta {shortName} - {longName}",
                    "route-page.title": "Ruta {shortName}",
                    "route-page.title-short": "Ruta",
                    "route-saved-settings": "Configuración propia",
                    "route-stop-or-keyword": "Sobre la ruta o parada",
                    routes: "Rutas",
                    run: "Correr",
                    save: "Guardar",
                    search: "Buscar",
                    "search-destination": "Busque destino, ruta o parada",
                    "search-destination-results-but-no-search": "Ver resultados en la pestaña de “Destino”",
                    "search-no-results": "Sin localización",
                    "search-origin": "Busque origen, ruta o parada",
                    "search-position": "Detectar localización",
                    "search-search-results-but-no-destination": "Ver resultados en la pestaña “Sobre la ruta o la parada”",
                    "searching-position": "Detectando localización...",
                    "select-position": "Seleccione su localización de las búsquedas anteriores",
                    send: "Enviar",
                    settings: "Configuración",
                    "settings-reset": "Resetear configuración",
                    "settings-savebutton": "Guardar configuración",
                    "settings-saved": "¡Cambios guardados!",
                    share: "Compartir itinerario",
                    "show-departures": "Ver salidas",
                    "show-more": "Ver más",
                    "show-routes": "Ver rutas",
                    "skip-positioning": "Saltar",
                    slow: "Lento",
                    "specify-location": "Especificar localización",
                    "splash-choose": "Especificar origen",
                    "splash-locating": "Detectando localización",
                    "splash-or-choose": "o seleccione su origen",
                    "splash-use-positioning": "Usar servicios de localización",
                    "splash-welcome": "¿Cómo desea empezar?",
                    "splash-you-can-also": "o",
                    stop: "Parada",
                    "stop-number": "Número de parada",
                    "stop-page.description": "Parada {name} - {code}",
                    "stop-page.title": "Parada {name} - {code}",
                    "stop-page.title-short": "Parada",
                    stops: "Paradas",
                    subway: "Metro",
                    "subway-with-route-number": "Metro {routeNumber} {headSign}",
                    "terminal-page.description": "Terminal {stop_name}",
                    "terminal-page.title": "Terminal {stop_name}",
                    "terminal-page.title-short": "Terminal",
                    "terms-of-use": "Términos de uso",
                    "ticket-and-price-info": "Información sobre precios y títulos de transporte",
                    "ticket-single-adult": "Adulto",
                    "ticket-type-none": "Sin límites de tarifas",
                    tickets: "Tickets",
                    time: "Tiempo",
                    timetable: "Horario",
                    "to-stop": "Hasta la parada",
                    today: "Hoy",
                    tomorrow: "Mañana",
                    tram: "Tranvía",
                    "tram-with-route-number": "Tranvía {routeNumber} {headSign}",
                    transfers: "Número de transbordos",
                    "transfers-allowed": "Transbordos permitidos",
                    "transfers-margin": "Márgen de transbordos de al menos",
                    "trip-co2-emissions": "Emisiones de CO2 del viaje",
                    "trip-information": "Información sobre el viaje",
                    "trip-page.description": "Ruta {route_short_name} - {route_long_name}",
                    "trip-page.title": "Ruta {route_short_name}",
                    "try-again": "Pruebe de nuevo",
                    "use-citybike": "Empiece a usar",
                    "use-national-service": "También puede probar el servicio nacional disponible en",
                    "use-own-position": "Usar localización actual",
                    "using-modes": "Quiero viajar mediante",
                    "very-likely": "Muy probable",
                    "very-unlikely": "Muy poco probable",
                    "via-point": "Punto intermedio",
                    "view-route": "Ver ruta",
                    wait: "Esperar",
                    "wait-amount-of-time": "Esperar {duration}",
                    walk: "andando",
                    "walk-distance-duration": "Andar {distance} ({duration})",
                    walking: "Cantidad de andar",
                    "walking-speed": "Velocidad de andar",
                    "warning-call-agency": "Sólo bajo demanda: {routeName}, que necesita ser reservada con antelación.",
                    "warning-call-agency-no-route": "Sólo bajo demanda, necesita ser reservado con antelación.",
                    "weather-at-destination": "Tiempo en destino",
                    yesterday: "Ayer",
                    "your-favourites": "Favoritos",
                    zones: "Zonas tarifarias"
                },
                fi: {
                    "1. time range": "1. ajanjakso",
                    "2. time range": "2. ajanjakso",
                    "about-this-service": "Tietoja palvelusta",
                    accessibility: "Esteettömyys",
                    "accessibility-limited": "Liikun pyörätuolilla",
                    "accessibility-nolimit": "Ei rajoitusta",
                    "accessibility-report": "Saavutettavuusseloste",
                    "add-itinerary-via-point": "Lisää reitille välipiste",
                    "add-location": "Lisää paikka",
                    "add-location-to-favourites": "Lisää sinulle tärkeä paikka Suosikkisi-välilehdelle",
                    "additional-analytics": "Lisäanalytiikka",
                    address: "Osoite",
                    "address-or-stop": "Osoite tai pysäkki",
                    agency: "Liikennöitsijä",
                    "air-humidity": "Ilman kosteus",
                    "air-temperature": "Ilman lämpötila",
                    airplane: "Lentokone",
                    "airplane-with-route-number": "Lento {routeNumber}",
                    "airport-check-in": "Tee lähtöselvitys lentoyhtiön {agency} tiskillä",
                    "airport-collect-luggage": "Nouda matkatavarat",
                    "airport-security-check-go-to-gate": "Kävele turvatarkastuksen läpi lähtöportille",
                    "all-routes": "Kaikki linjat",
                    "all-routes-disabled": "Ei linjoja",
                    "approx-meters": "{approxDistance} m",
                    "arriving-at": "Perillä",
                    "arriving-soon": "Nyt",
                    "average-speed": "Keskinopeus",
                    "avoid-transfers": "Vähän vaihtoja",
                    "avoid-walking": "Vähän kävelyä",
                    back: "Takaisin",
                    "back-button-title": "Siirry takaisin edelliselle sivulle",
                    "back-to-front-page": "Siirry etusivulle ›",
                    bicycle: "pyörällä",
                    "bicycle-distance-duration": "Pyöräile {distance} ({duration})",
                    "bicycle-route-prop-name": "Nimi",
                    "bicycle-route-prop-type": "Tyyppi",
                    "bicycle-route-prop-type-PLANNED": "Suunnitteilla",
                    "bicycle-route-prop-type-CURRENT": "Nykyinen",
                    "bicycle-route-prop-year": "Valmistumisvuosi",
                    "bicycle-route-prop-length": "Pituus",
                    "bicycle-routes": "Pyörätiet",
                    "bicycle-routes-BAANA": "Baanat",
                    "bicycle-routes-BAANA-CURRENT": "Baana",
                    "bicycle-routes-BAANA-PLANNED": "Suunnitteilla oleva baana",
                    "bicycle-routes-BRAND": "Brändireitit",
                    "bicycle-routes-BRAND-MAIN": "Brändireitti",
                    "bicycle-routes-BRAND-PERIMETER": "Kehäreitti",
                    "bicycle-routes-MAIN_REGIONAL": "Pää- ja aluereitit",
                    "bicycle-routes-MAIN_REGIONAL-MAIN": "Pääreitti",
                    "bicycle-routes-MAIN_REGIONAL-REGIONAL": "Aluereitti",
                    "bicycle-routes-MAIN_REGIONAL-PLANNED_MAIN": "Suunnitteilla oleva pääreitti",
                    "bicycle-routes-MAIN_REGIONAL-PLANNED_REGIONAL": "Suunnitteilla oleva aluereitti",
                    "bicycle-routes-TYPES": "Muut väylät",
                    "bicycle-routes-TYPES-2_WAY": "2-suuntainen pp+jk",
                    "bicycle-routes-TYPES-SLOW_STREET": "Hidaskatu (=pyöräkatu)",
                    "bicycle-routes-TYPES-BICYCLE_LANE": "Pyöräkaista",
                    "bicycle-routes-TYPES-SHARED_SPACE": "Yhteinen tila",
                    "bicycle-routes-TYPES-4MW_SHARED": "4 m leveä yhdistetty pp+jk",
                    "bicycle-routes-TYPES-35MW_SHARED": "3.5 m leveä yhdistetty pp+jk",
                    "bicycle-routes-TYPES-ACCESS_ROAD": "Tonttikatu",
                    "bicycle-routes-TYPES-WIDE_SHOULDER": "Leveä piennar",
                    "bike-availability": "Pyöriä asemalla juuri nyt",
                    "bike-availability-short": "Pyöriä",
                    "bike-not-allowed-bus": "Pyörää ei voi kuljettaa bussissa",
                    "bike-not-allowed-tram": "Pyörää ei voi kuljettaa raitiovaunussa",
                    "biketransport-citybike": "Käytän kaupunkipyörää",
                    "biketransport-only-bike": "Liikun vain pyörällä",
                    "biking-amount": "Pyöräilyn määrä",
                    "biking-speed": "Pyöräilyn nopeus",
                    bus: "Bussi",
                    "bus-with-route-number": "Bussi {routeNumber} {headSign}",
                    "buy-ticket": "Näin ostat lipun (HSL.fi)",
                    call: "Soita",
                    cameras: "Kamerat",
                    cancel: "Peruuta",
                    car: "Auto",
                    "car-distance-duration": "Aja {distance} ({duration})",
                    car_park: "liityntäpysäköinti",
                    cause: "syy",
                    "char-left": "merkkiä",
                    "choose-date": "Valitse päivämäärä",
                    "choose-date-error": "Päättymispäivämäärän on oltava suurempi kuin aloituspäivämäärän.",
                    "choose-stop": "Tarkenna valinta",
                    "weather-station": "Sääasema",
                    citybike: "Kaupunkipyörä",
                    "citybike-distance-duration": "Pyöräile {distance} ({duration})",
                    "citybike-off-season": "Kaupunkipyörät palaavat käyttöön ensi keväänä",
                    "citybike-register-required": "Kaupunkipyörien käyttö vaatii rekisteröitymisen",
                    citybike_off: "Suljettu",
                    clear: "Tyhjennä",
                    "clear-selected-options": "Tyhjennä valinnat",
                    close: "Sulje",
                    "close-comparison": "Sulje vertailu",
                    compare: "Vertaile",
                    condition: "Keli",
                    "contact-information": "{contactName}:n yhteystiedot",
                    "create-account": "Luo {contactName} tunnus",
                    "cycle-distance-duration": "Pyöräile {distance} ({duration})",
                    "cyclewalk-distance-duration": "Taluta pyörää {distance} ({duration})",
                    daily: "Päivittäin",
                    datasources: "Tietolähteet",
                    date: "Päivämäärä",
                    delete: "Poista",
                    "departure-time-in-minutes": "{minutes} min",
                    departures: "Lähdöt",
                    description: "Löydä joukkoliikennetarjonta lähelle ja kauas.",
                    destination: "Määränpää",
                    "destination-copied": "Määränpää-linkki kopioitu leikepöydälle",
                    "destination-label-change": "Vaihda määränpää",
                    "destination-needed": "Määränpää täytyy olla määritetty",
                    "destination-outside-service": "Emme valitettavasti löytäneet yhtään reittiehdotusta kyseiselle välille. Muuta määränpään osoitetta, joka sijaitsee palvelualueen ulkopuolella.",
                    "destination-placeholder": "Kirjoita määränpää, linja tai pysäkki",
                    "dew-point-temperature": "Kastepistelämpötila",
                    "dialog-return-to-map": "Takaisin karttaan",
                    "digitransit-platform": "Digitransit palvelualusta",
                    disclaimer: "Tulokset perustuvat arvioituihin ajoaikoihin. Ehdotetun yhteyden toteutumista ei voida taata.",
                    disruption: "Häiriö",
                    "disruption-info": "Poikkeusinfo",
                    "disruption-info-no-alerts": "Ei tiedossa olevia häiriöitä tai poikkeuksia.",
                    "disruption-info-route-no-alerts": "Linjalla ei tiedossa olevia häiriöitä tai poikkeuksia.",
                    disruptions: "Häiriöt",
                    "distance-between": "Etäisyys {distance1} m — {distance2} m",
                    "distance-total": "Matkan pituus",
                    "distance-under": "Etäisyys alle {distance} m",
                    "driving-conditions": "Ajokeli",
                    earlier: "Aiemmin",
                    "eco-counter": "Laskentapisteet",
                    "eco-counter-direction-1": "Keskustaan",
                    "eco-counter-direction-2": "Keskustasta",
                    "eco-counter-direction-5": "Ei määritetty",
                    "eco-counter-direction-6": "Pohjoisesta",
                    "eco-counter-direction-7": "Idästä",
                    "eco-counter-direction-8": "Etelästä",
                    "eco-counter-direction-9": "Lännestä",
                    "eco-counter-total": "Yhteensä",
                    "eco-counter-week-title": "Viikko {date}",
                    "edit-favourites": "Muokkaa paikkaa Suosikkisi-välilehdellä",
                    "elevation-gained-total": "Nousua yhteensä",
                    "elevation-lost-total": "Laskua yhteensä",
                    explanations: "Selitykset",
                    "export-time-range-1": "Lataa 1. ajanjakso",
                    "export-time-range-2": "Lataa 2. ajanjakso",
                    "external-modes": "Muut kulkumuodot",
                    "extra-info": "Lisätiedot",
                    "favourite-target": "Suosikkikohde",
                    ferry: "Lautta",
                    "ferry-with-route-number": "Lautta {routeNumber} {headSign}",
                    roadinspection: "Kelintarkistus",
                    "roadinspection-vehicle-time-range": "Kelintarkistuksen aikaväli: 30 päivää",
                    "realtime-roadinspection-vehicles": "Kelintarkistuksen reaaliaikaseuranta",
                    fluency: "Ruuhkat",
                    "footer-links": "Alatunnisteen linkit",
                    "footer-faq": "UKK",
                    "footer-feedback": "Anna palautetta",
                    "footer-link-to-privacy-policy": "Rekisteriseloste",
                    "from-city": "Keskustasta",
                    frontpage: "Etusivu",
                    "generic-error": "Tapahtui virhe",
                    "geolocate-yourself": "Paikanna",
                    "geolocation-denied-heading": "Paikannus on estetty",
                    "geolocation-denied-text": "Et ole antanut lupaa paikannukseen. Voit sallia paikannuksen selaimen tai puhelimen asetuksista.",
                    "geolocation-failed-heading": "Paikannus epäonnistui",
                    "geolocation-failed-text": "Paikannus ei toimi tai selaimesi ei tue paikannusta.",
                    "geolocation-prompt-text": "Hyväksy selaimen paikannuspyyntö.",
                    "geolocation-timeout-heading": "Paikannus kestää odotettua pidempään.",
                    "geolocation-timeout-text": "Oletko hyväksynyt selaimen paikannuspyynnön?",
                    "give-destination": "Määränpää",
                    "give-name-to-location": "Anna paikalle kuvaava nimi",
                    "give-origin": "Lähtöpaikka",
                    "give-position": "Kirjoita sijaintisi tai lähtöpaikkasi hakukenttään.",
                    "give-route": "Hae linjaa",
                    "hide-realtime-on-map": "Piilota ajoneuvot kartalla",
                    hour: "Tunti",
                    "hour-short": "h",
                    hourly: "Tunneittain",
                    "hourly-with-date": "Tunneittain ({date})",
                    "how-to-rate-service": "Kuinka arvioisit palvelua?",
                    "in-addition": "Lisäksi",
                    inquiry: "Mitä pidät uudesta Reittioppaasta? Kerro se meille! ",
                    instructions: "Ohjeet",
                    "itinerary-feedback-button": "Lähetä palautetta",
                    "itinerary-feedback-message": "Etkö löytänyt mitä etsit?",
                    "itinerary-feedback-placeholder": "Kuvaus (valinnainen)",
                    "itinerary-hide-stops": "Piilota pysäkit",
                    "itinerary-page.description": "Reittiohje",
                    "itinerary-page.title": "Reittiohje",
                    "itinerary-ticket.title": "Tarvittava lippu",
                    "itinerary-tickets.title": "Tarvittavat liput",
                    "itinerary-time.title": "Matka-aika",
                    "itinerary-walk.title": "Kävelyä",
                    "journeyplanner.title": "HSL Reittiopas",
                    "last-updated": "Viimeksi päivitetty",
                    later: "Myöhemmin",
                    leaves: "Lähtee",
                    "leaving-at": "Lähtöaika",
                    "likely-to-recommend": "Kuinka todennäköistä on, että suosittelisit palveluamme ystävälle tai kollegallesi?",
                    "likely-to-use": "Kuinka todennäköisesti käyttäisit tätä palvelua ennemmin kuin nykyistä reittiopas-palvelua?",
                    links: "Linkit",
                    loading: "Ladataan...",
                    locate: "Paikanna",
                    "location-examples": "esim. Koti, Työ, Koulu,...",
                    "location-from-map": "Valittu sijainti",
                    "location-home": "Koti",
                    "location-school": "Koulu",
                    "location-shopping": "Kauppa",
                    "location-sport": "Urheilu",
                    "location-work": "Työ",
                    login: "Kirjaudu sisään",
                    "long-transfers-margin": "12 min",
                    "main-bicycle-route-contract": "Vain pääpyörätiet",
                    "main-menu-label-close": "Sulje päävalikko",
                    "main-menu-label-open": "Avaa päävalikko",
                    "main-mode": "Kulkumuoto",
                    maintenance: "Kunnossapito",
                    "maintenance-job": "Kunnossapitotyö",
                    "maintenance-job-0": "Muut seurattavat väylät",
                    "maintenance-job-1357": "Harjaus",
                    "maintenance-job-1364": "Tasaus",
                    "maintenance-job-1366": "Tasaus",
                    "maintenance-job-1367": "Liukkauden torjunta",
                    "maintenance-job-1368": "Liukkauden torjunta",
                    "maintenance-job-1369": "Liukkauden torjunta",
                    "maintenance-job-1370": "Auraus",
                    "maintenance-job-2864": "Tasaus",
                    "maintenance-job-99901": "Lumen Harjaus",
                    "maintenance-job-99902": "Kelintarkistus",
                    "maintenance-job-legend-0": "Muut seurattavat väylät",
                    "maintenance-job-legend-1357": "Harjaus",
                    "maintenance-job-legend-1364": "Tasaus",
                    "maintenance-job-legend-1366": "Tasaus",
                    "maintenance-job-legend-1367": "Liukkauden torjunta",
                    "maintenance-job-legend-1368": "Liukkauden torjunta",
                    "maintenance-job-legend-1369": "Liukkauden torjunta",
                    "maintenance-job-legend-1370": "Auraus",
                    "maintenance-job-legend-2864": "Tasaus",
                    "maintenance-job-legend-99901": "Harjaus",
                    "maintenance-job-legend-99902-car": "Kelintarkistus (auto)",
                    "maintenance-job-legend-99902-bicycle": "Kelintarkistus (polkupyörä)",
                    "maintenance-job-realization": "Toteuma",
                    "maintenance-vehicle-name": "Ajoneuvo #{vehicleNumber}",
                    "maintenance-vehicle-time-range": "Kunnossapidon aikaväli",
                    "maintenance-vehicle-time-range-12h": "12h",
                    "maintenance-vehicle-time-range-1d": "1d",
                    "maintenance-vehicle-time-range-1h": "1h",
                    "maintenance-vehicle-time-range-3d": "3d",
                    "maintenance-vehicle-time-range-30d": "30d harjaus",
                    "maintenance-vehicle-time-range-3h": "3h",
                    "maintenance-vehicle-time-range-6h": "6h",
                    "maintenance-inspection-vehicle-type-car": "(auto) ",
                    "maintenance-inspection-vehicle-type-bicycle": "(pyörä) ",
                    "maintenance-inspection-vehicle-type-unknown": "(tuntematon) ",
                    map: "Kartta",
                    "map-layer-citybike": "Kaupunkipyöräasemat",
                    "map-layer-park-and-ride": "Liityntäpysäköintipaikat",
                    "map-layer-stop-bus": "Bussipysäkit",
                    "map-layer-stop-ferry": "Lautat",
                    "map-layer-stop-tram": "Raitiovaunupysäkit",
                    "map-layer-terminal-bus": "Bussiterminaalit",
                    "map-layer-terminal-rail": "Juna-asemat",
                    "map-layer-terminal-subway": "Metroasemat",
                    "map-layer-ticket-sales-machine": "Lippuautomaatit",
                    "map-layer-ticket-sales-point": "Matkakortin latauspisteet",
                    "messagebar-label-close-message-bar": "Sulje banneri",
                    "messagebar-label-page": "Sivu",
                    "minute-short": "min",
                    minutes: "min",
                    "minutes-or-route": "Min / Linja",
                    monthly: "Kuukausittain",
                    more: "Lisää",
                    "more-settings": "Lisäasetukset",
                    motorist: "Autoilija",
                    navigate: "Navigoi",
                    "near-you": "Lähelläsi",
                    nearest: "Lähimmät",
                    "network-error": "Verkkovirhe",
                    next: "Seuraava",
                    "no-bike-allowed-popup": "Pyörää ei voi ottaa bussiin tai raitiovaunuun. Jos käytät reitilläsi näitä kulkuvälineitä, jätä pyörä pysäkille tai liityntäpysäköintiin.",
                    "no-favourite-locations": "Lisää tähän usein käyttämäsi paikat. Painikkeet toimivat suorina linkkeinä reititykseen.",
                    "no-favourites": "Tähti-painikkeella saat lisättyä linjan tai pysäkin suosikiksesi. Suosikkiesi aikataulut näkyvät etäisyyden mukaan tällä sivulla.",
                    "no-position": "Ei sijaintia",
                    "no-position-no-stops": "Sijaintisi ei ole tiedossa, joten emme voi näyttää lähimpiä pysäkkejä.",
                    "no-route-end-date-not-in-range": "Käytössä oleva aikataulu ei sisällä myöhäisempiä reittejä.",
                    "no-route-msg": "Emme valitettavasti löytäneet yhtään reittiehdotusta kyseiselle välille. Muuta lähdön tai määränpään osoitetta.",
                    "no-route-start-date-too-early": "Käytössä oleva aikataulu ei sisällä aiempia reittejä.",
                    "no-route-start-end": "Valitse lähtöpaikka ja määränpää.",
                    "no-transfers-margin": "1 min",
                    "no-trips-found": "Valitulle päivälle ei löydy matkoja.",
                    now: "Nyt",
                    "number-of-intermediate-stops": "{number, plural, =0 {Ei pysähdyksiä} one {1 pysäkki} other {{number} pysäkkiä} }",
                    "number-of-minutes": "{number, plural, =0 {0 minuuttia} one {1 minuutti} other {{number} minuuttia}}",
                    "off-canvas-info": "Kirjautumalla palveluun saat suosikit talteen ja voit hyödyntää niitä muillakin laitteillasi",
                    "option-default": "Oletusarvo",
                    "option-least": "Vähiten",
                    "option-less": "Vähemmän",
                    "option-more": "Enemmän",
                    "option-most": "Eniten",
                    or: "tai",
                    origin: "Lähtöpaikka",
                    "origin-label-change": "Vaihda lähtöpaikka",
                    "origin-outside-service": "Emme valitettavasti löytäneet yhtään reittiehdotusta kyseiselle välille. Muuta lähtöosoitetta, joka sijaitsee palvelualueen ulkopuolella.",
                    "origin-placeholder": "Mistä? - osoite tai pysäkki",
                    "own-position": "Nykyinen sijaintisi",
                    "page-not-found": "Etsimääsi sivua ei löytynyt.",
                    "park-and-ride": "Liityntäpysäköinti",
                    "park-and-ride-availability": "Pysäköintipaikkoja vapaana",
                    parking: "Pysäköinti",
                    "parking-availability": "Pysäköintipaikkoja vapaana",
                    "pay-attention": "Huom!",
                    "pick-icon": "Valitse kuvake",
                    "pick-mode": "Valitse joukkoliikennevälineistä",
                    "place-route-or-keyword": "Määränpää, linja tai pysäkki",
                    "platform-num": "Laituri {platformCode}",
                    "platform-short": "Lait. {platformCode}",
                    "prefer-walking": "Suosi kävelyä",
                    preferred: "Suosi linjoja",
                    previous: "Edelliset",
                    print: "Tulosta",
                    "print-timetable": "Viikkoaikataulu",
                    "public-transport": "Joukkoliikenne",
                    rail: "Juna",
                    "rail-with-route-number": "Juna {routeNumber} {headSign}",
                    rain: "Sade",
                    "rain-classification": "Sateen luokittelu",
                    "rainfall-depth": "Sademäärä",
                    "rainfall-intensity": "Sateen intensiteetti",
                    "no-rain": "Poutaa",
                    "has-rain": "Vesisade",
                    "light-snow": "Heikko lumisade",
                    "moderate-snow": "Kohtalainen lumisade",
                    "heavy-snow": "Runsas lumisade",
                    realtime: "Reaaliaika",
                    "realtime-maintenance-vehicles": "Kunnossapidon reaaliaikaseuranta",
                    "realtime-matching": "Realiajan integraatio",
                    "rent-cycle-at": "Vuokraa pyörä asemalta {station}",
                    "required-ticket": "Reitillä tarvittava lippu",
                    "return-cycle-to": "Palauta pyörä asemalle {station}",
                    "reverse-route": "Käännä reitin suunta",
                    "right-now": "Juuri nyt",
                    "road-condition": "Ajokeli",
                    "road-condition-air": "Ilma",
                    "road-condition-condition": "Ajokeli",
                    "road-condition-now": "Nyt",
                    "road-condition-road": "Tie",
                    "road-condition-time": "Aika",
                    "road-condition-weather": "Sää",
                    "road-condition-wind": "Tuuli",
                    "road-info": "Tietiedot",
                    "road-sign": "Ohjauslaite",
                    "road-signs": "Ohjauslaitteet",
                    "road-sign-type": "Tyyppi",
                    "road-sign-display-value": "Näyttöarvo",
                    "road-sign-effective-from": "Voimassa alkaen",
                    "road-sign-SPEEDLIMIT": "Nopeusrajoitus",
                    "road-sign-WARNING": "Varoitus",
                    "road-sign-INFORMATION": "Tiedotus",
                    "road-sign-warning-144": "Liukas ajorata",
                    "road-sign-warning-165": "Liikennevalot",
                    "road-sign-warning-189": "Muu vaara",
                    "road-sign-warning-133": "Liikenneruuhka",
                    "road-sign-warning-142": "Tietyö",
                    "road-sign-warning-183": "Sivutuuli",
                    "road-sign-warning-141": "Epätasainen tie",
                    "road-sign-warning-143": "Irtokiviä",
                    "road-sign-warning-147": "Vaarallinen tien reuna",
                    "road-sign-warning-154": "Hiihtolatu",
                    "road-sign-warning-155": "Hirvieläimiä",
                    "road-sign-warning-156": "Poroja",
                    "road-temperature": "Tien lämpötila",
                    roadwork: "Tietyö",
                    roadworks: "Tietyöt",
                    route: "Linja",
                    "route-custom-settings": "Omat asetukset",
                    "route-default": "Perusasetukset",
                    "route-destination-arrives": "Saapuu / Päätepysäkki",
                    "route-fastest": "Nopea reitti",
                    "route-from-here": "Reititä täältä",
                    "route-guide": "Linjaohje",
                    "route-here": "Reititä tänne",
                    "route-here-button": "Kopioi reitti tänne",
                    "route-least-elevation-changes": "Vältä korkeuseroja",
                    "route-least-transfers": "Vältä vaihtoja",
                    "route-least-walking": "Vältä kävelyä",
                    "route-not-possible": 'Valitettavasti reittisi ei ole mahdollinen. Tekninen virhe: "{error}"',
                    "route-page.description": "Linja {shortName}, {longName}",
                    "route-page.title": "Linja {shortName}",
                    "route-page.title-short": "Linja",
                    "route-prefer-greenways": "Suosi kevyen liikenteen reittejä",
                    "route-prefer-illuminated": "Suosi valaistuja reittejä",
                    "route-prefer-paved": "Suosi päällystettyjä reittejä",
                    "route-prefer-walking-routes": "Suosi kävelyreittejä",
                    "route-prefer-winter-maintenance": "Suosi talvikunnossapidettyjä reittejä",
                    "route-preferences": "Reittimieltymykset",
                    "route-public-transport-with-bicycle": "Pyöräillen ja julkisilla",
                    "route-saved-settings": "Tallennetut asetukset",
                    "route-stop-or-keyword": "Tietoja linjasta tai pysäkistä",
                    routes: "Linjat",
                    run: "Juoksu",
                    save: "Tallenna",
                    search: "Etsi",
                    "search-destination": "Hae määränpäätä, linjaa tai pysäkkiä",
                    "search-destination-results-but-no-search": "Katso tulokset viereiseltä Määränpää-välilehdeltä",
                    "search-no-results": "Ei tuloksia",
                    "search-origin": "Hae lähtöpaikkaa, linjaa tai pysäkkiä",
                    "search-position": "Paikanna",
                    "search-search-results-but-no-destination": 'Katso tulokset viereiseltä "Tietoja linjasta tai pysäkistä" –välilehdeltä',
                    "searching-position": "Paikannetaan...",
                    "select-map-layers-header": "Mitä haluat näyttää kartalla?",
                    "select-position": "Valitse sijaintisi edellisistä hauistasi",
                    send: "Lähetä",
                    settings: "Asetukset",
                    "settings-label-change": "Muuta reittihaun asetuksia",
                    "settings-loadbutton": "Lataa asetukset",
                    "settings-loaded": "Asetukset ladattu!",
                    "settings-reset": "Palauta oletusasetukset",
                    "settings-savebutton": "Tallenna asetukset",
                    "settings-saved": "Asetukset tallennettu!",
                    share: "Jaa ohje",
                    "show-departures": "Näytä lähdöt",
                    "show-information-as-list": "Näytä tiedot listana",
                    "show-more": "Näytä lisää",
                    "show-realtime-on-map": "Näytä ajoneuvot kartalla",
                    "show-routes": "Näytä linjat",
                    "skip-positioning": "Ohita",
                    slow: "Hidas",
                    "snow-depth": "Lumitilanne",
                    "specify-location": "Määritä sijainti",
                    "speed-limit": "Nopeusrajoitus",
                    "splash-choose": "Valitse lähtöpaikka",
                    "splash-locating": "Paikannetaan",
                    "splash-or-choose": "tai valitse lähtöpaikaksi",
                    "splash-use-positioning": "Käytä paikannusta",
                    "splash-welcome": "Miten haluat aloittaa?",
                    "splash-you-can-also": "tai",
                    stop: "Pysäkki",
                    "stop-number": "Pysäkkinumero",
                    "stop-page.description": "Pysäkki - {name} {code}, {desc}",
                    "stop-page.title": "Pysäkki - {name} {code}",
                    "stop-page.title-short": "Pysäkki",
                    stops: "Pysäkit",
                    "street-mode-bicycle": "Pyöräily",
                    "street-mode-car": "Auto",
                    "street-mode-car_park": "Liityntä­pysäköinti",
                    "street-mode-public_transport": "Julkinen liikenne",
                    "street-mode-walk": "Kävely",
                    subway: "Metro",
                    "subway-with-route-number": "Metro {routeNumber} {headSign}",
                    "summary-page.description": "{from} - {to}",
                    "summary-page.title": "Reittiehdotukset",
                    "terminal-page.description": "Terminaali - {name}",
                    "terminal-page.title": "Terminaali - {name}",
                    "terminal-page.title-short": "Terminaali",
                    "terms-of-use": "Käyttöehdot",
                    "ticket-and-price-info": "Lippu- ja hintatiedot",
                    "ticket-single-adult": "Aikuinen",
                    "ticket-type-none": "Ei lippuvyöhykerajoitusta",
                    tickets: "Matkaliput",
                    time: "Aika",
                    timetable: "Aikataulu",
                    "to-city": "Keskustaan",
                    "to-stop": "Pysäkille",
                    today: "Tänään",
                    tomorrow: "Huomenna",
                    "traffic-announcement-additional-info": "Lisämäre",
                    "traffic-announcement-additional-info-at": "Avotulella kuumennus",
                    "traffic-announcement-additional-info-fd": "Seuraa kiertotieopastusta",
                    "traffic-announcement-additional-info-pd": "Poliisi ohjaa liikennettä",
                    "traffic-announcement-class-acc": "Onnettomuus",
                    "traffic-announcement-class-act": "Yleisö- tai muut tapahtumat",
                    "traffic-announcement-class-equ": "Tienvarsilaitteiden toiminta",
                    "traffic-announcement-class-fos": "Näkyvyys- ja ympäristöolosuhteet",
                    "traffic-announcement-class-krk": "Kelirikko",
                    "traffic-announcement-class-los": "Liikennetilanne",
                    "traffic-announcement-class-mhz": "Vaaraa aiheuttava ajoneuvo tai kuljetus tiellä",
                    "traffic-announcement-class-ohz": "Este esine tai eläin tiellä",
                    "traffic-announcement-class-res": "Liikennerajoitukset",
                    "traffic-announcement-class-rmt": "Tietyö",
                    "traffic-announcement-class-shz": "Ajo-olot liukkaus kelitilanne",
                    "traffic-announcement-duration": "Arvioitu kesto",
                    "traffic-announcement-duration-gte_180_lte_360": "3 - 6 tuntia",
                    "traffic-announcement-duration-gte_30_lte_60": "30 - 60 minuuttia",
                    "traffic-announcement-duration-gte_360": "Yli 6 tuntia",
                    "traffic-announcement-duration-gte_60_lte_180": "1 - 3 tuntia",
                    "traffic-announcement-duration-lte_30": "Alle 30 minuuttia",
                    "traffic-announcement-modes-of-transport": "Liikennemuoto",
                    "traffic-announcement-modes-of-transport-bicycle": "Polkupyörä",
                    "traffic-announcement-modes-of-transport-car": "Auto",
                    "traffic-announcement-modes-of-transport-pedestrian": "Jalankulkija",
                    "traffic-announcement-modes-of-transport-public_transport": "Julkinen liikenne",
                    "traffic-announcement-oversize-load": "Erikoiskuljetus",
                    "traffic-announcement-oversize-load-definition": "(Lev. x Kork. x Pit. metreissä)",
                    "traffic-announcement-severity": "Haitta-aste",
                    "traffic-announcement-severity-high": "Merkittävää haittaa liikenteelle",
                    "traffic-announcement-severity-low": "Ei haittaa liikenteelle",
                    "traffic-announcement-severity-medium": "Haittaa liikenteelle",
                    "traffic-announcement-subclass-abl": "Erikoiskuljetus",
                    "traffic-announcement-subclass-acb": "Onnettomuus, jossa mukana linja-auto",
                    "traffic-announcement-subclass-ach": "Onnettomuus, jossa mukana raskas ajoneuvo",
                    "traffic-announcement-subclass-aci": "Onnettomuus",
                    "traffic-announcement-subclass-acl": "Onnettomuuspaikan raivaus käynnissä",
                    "traffic-announcement-subclass-acm": "Usean ajoneuvon onnettomuus",
                    "traffic-announcement-subclass-acz": "Onnettomuus, jossa mukana vaarallisia aineita",
                    "traffic-announcement-subclass-ali": "Alikulkukäytävän rakentaminen",
                    "traffic-announcement-subclass-anh": "Poroja tiel",
                    "traffic-announcement-subclass-anl": "Hirviä tiellä",
                    "traffic-announcement-subclass-anm": "Eläimiä tiellä",
                    "traffic-announcement-subclass-aol": "Raskas ajoneuvo kaatunut tielle",
                    "traffic-announcement-subclass-aqd": "Vesiliirron vaara",
                    "traffic-announcement-subclass-asp": "Ulosajo",
                    "traffic-announcement-subclass-bkd": "Rikkoutunut ajoneuvo tiellä",
                    "traffic-announcement-subclass-bli": "Lumimyrsky",
                    "traffic-announcement-subclass-bls": "Pöllyävää lunta",
                    "traffic-announcement-subclass-brc": "Silta suljettu liikenteeltä",
                    "traffic-announcement-subclass-ctr": "Liikenne ohjataan kaksisuuntaisena toiselle ajoradalle",
                    "traffic-announcement-subclass-dcd": "Huono ajokeli",
                    "traffic-announcement-subclass-dcn": "Ajo-olot parantuneet",
                    "traffic-announcement-subclass-do": "Kiertotie käytössä",
                    "traffic-announcement-subclass-efa": "Messut",
                    "traffic-announcement-subclass-ens": "ENSITIEDOTE LIIKENNEONNETTOMUUDESTA",
                    "traffic-announcement-subclass-epr": "Kulkue",
                    "traffic-announcement-subclass-esp": "Urheilutapahtuma",
                    "traffic-announcement-subclass-evd": "Mielenosoitus",
                    "traffic-announcement-subclass-evm": "Yleisötapahtuma",
                    "traffic-announcement-subclass-fig": "Maastopalo",
                    "traffic-announcement-subclass-fir": "Tulipalo",
                    "traffic-announcement-subclass-fld": "Tulva",
                    "traffic-announcement-subclass-flt": "Puu kaatunut tielle",
                    "traffic-announcement-subclass-fod": "Sakeaa sumua",
                    "traffic-announcement-subclass-fof": "Jäätävää sumua",
                    "traffic-announcement-subclass-fog": "Sumua",
                    "traffic-announcement-subclass-fop": "Paikoitellen sumua",
                    "traffic-announcement-subclass-fpc": "Sähköjohtoja pudonnut tielle",
                    "traffic-announcement-subclass-fue": "Öljyä tiellä",
                    "traffic-announcement-subclass-gal": "Kova tuuli",
                    "traffic-announcement-subclass-hai": "Raekuuro",
                    "traffic-announcement-subclass-hav": "Hirviaita vaurioitunut",
                    "traffic-announcement-subclass-hbd": "Rikkoutunut raskas ajoneuvo tiellä",
                    "traffic-announcement-subclass-ibu": "Tiet jäätymässä",
                    "traffic-announcement-subclass-icp": "Paikoin liukasta",
                    "traffic-announcement-subclass-jjm": "Kevyen liikenteen väylät jäisiä ja märkiä",
                    "traffic-announcement-subclass-jjt": "Kevyen liikenteen väylät jäätymäs",
                    "traffic-announcement-subclass-jli": "Kevyen liikenteen väylät liukkaita",
                    "traffic-announcement-subclass-jlu": "Kevyen liikenteen väylillä lunta",
                    "traffic-announcement-subclass-jpl": "Kevyen liikenteen väylät paikoin liukkaita",
                    "traffic-announcement-subclass-jyr": "Päällysteen jyrsintätyö",
                    "traffic-announcement-subclass-kai": "Sadevesikaivojen puhdistustyö",
                    "traffic-announcement-subclass-kav": "Kaidevaurio",
                    "traffic-announcement-subclass-kdt": "Kaidetyö",
                    "traffic-announcement-subclass-kkp": "Kaivon kansi rikki/poissa paikaltaan",
                    "traffic-announcement-subclass-klv": "Kevyenliikenteen väylän rakentaminen",
                    "traffic-announcement-subclass-kri": "Kelirikko",
                    "traffic-announcement-subclass-kuo": "Kuoppia tiessä",
                    "traffic-announcement-subclass-lc1": "Yksi ajokaista suljettu liikenteeltä",
                    "traffic-announcement-subclass-lc2": "Kaksi ajokaistaa suljettu liikenteeltä",
                    "traffic-announcement-subclass-lcs": "Ajokaistoja on suljettu liikenteeltä",
                    "traffic-announcement-subclass-lij": "Liittymän parannustyö",
                    "traffic-announcement-subclass-lin": "Ajokaista ajoittain suljettu",
                    "traffic-announcement-subclass-lo1": "Vain yksi ajokaista käytössä",
                    "traffic-announcement-subclass-lo2": "Vain kaksi kaistaa käytössä",
                    "traffic-announcement-subclass-loh": "Tienvarsilaitteiden huoltotyö",
                    "traffic-announcement-subclass-lpa": "Liikenne pysäytetään ajoittain",
                    "traffic-announcement-subclass-ls1": "Liikenne seisoo",
                    "traffic-announcement-subclass-ls2": "Liikenne pysähtelee",
                    "traffic-announcement-subclass-ls3": "Liikenne hidasta",
                    "traffic-announcement-subclass-ls4": "Liikenne jonoutunut",
                    "traffic-announcement-subclass-ls6": "Pitkiä jonoja",
                    "traffic-announcement-subclass-lsl": "Tie sortunut",
                    "traffic-announcement-subclass-lso": "Liikenne saattaa ruuhkautua",
                    "traffic-announcement-subclass-lsr": "Liikenne saattaa ruuhkautua",
                    "traffic-announcement-subclass-lvt": "Liikennevalotyö",
                    "traffic-announcement-subclass-mar": "Maratonjuoksu",
                    "traffic-announcement-subclass-mil": "Sotilassaattue",
                    "traffic-announcement-subclass-nit": "Niittotyö",
                    "traffic-announcement-subclass-nls": "Ajokaistoja kavennettu",
                    "traffic-announcement-subclass-ohx": "Liikennettä vaarantava este tiellä",
                    "traffic-announcement-subclass-oil": "Polttoainetta tiellä",
                    "traffic-announcement-subclass-pav": "Päällystevaurio",
                    "traffic-announcement-subclass-pel": "Pelastusharjoitus",
                    "traffic-announcement-subclass-pki": "POLIISIN KELI-ILMOITUS",
                    "traffic-announcement-subclass-pys": "Pysäkkiin liittyvä ilmoitus",
                    "traffic-announcement-subclass-rad": "Kiertotieopastus",
                    "traffic-announcement-subclass-raf": "Jäätävää sadetta",
                    "traffic-announcement-subclass-rai": "Vesisade",
                    "traffic-announcement-subclass-raj": "Raskas ajoneuvo jumissa",
                    "traffic-announcement-subclass-rba": "Liikenne pysäytetään",
                    "traffic-announcement-subclass-rbi": "Mustaa jäätä",
                    "traffic-announcement-subclass-rbl": "Räjäytystyö",
                    "traffic-announcement-subclass-rbm": "Siltatyö",
                    "traffic-announcement-subclass-rca": "Toinen ajorata suljettu liikenteeltä",
                    "traffic-announcement-subclass-rcd": "Tie suljettu liikenteeltä",
                    "traffic-announcement-subclass-rcw": "Tienrakennustyö",
                    "traffic-announcement-subclass-reb": "Liittymisramppi tukossa",
                    "traffic-announcement-subclass-rec": "Ramppi suljettu liikenteeltä",
                    "traffic-announcement-subclass-ret": "Poikkeavat kaistajärjestelyt",
                    "traffic-announcement-subclass-rew": "Raivaus- ja korjaustöitä",
                    "traffic-announcement-subclass-ric": "Tiet ovat jäisiä",
                    "traffic-announcement-subclass-ril": "Risteykset liukkaita",
                    "traffic-announcement-subclass-rin": "Tie ajoittain suljettu liikenteeltä",
                    "traffic-announcement-subclass-rmk": "Kunnossapito- ja hoitotyöt",
                    "traffic-announcement-subclass-rmv": "Työmaa-ajoa liikenteen seassa",
                    "traffic-announcement-subclass-rmw": "Tiemerkintätyö",
                    "traffic-announcement-subclass-rnl": "Muuttuneet liikennejärjestelyt",
                    "traffic-announcement-subclass-rno": "Rekan nosto",
                    "traffic-announcement-subclass-rpc": "Tienpinta huonossa kunnossa",
                    "traffic-announcement-subclass-rrw": "Tietyö keskikaistalla",
                    "traffic-announcement-subclass-rsl": "Tiet ovat liukkaita",
                    "traffic-announcement-subclass-rwi": "Tiet jäisiä ja märkiä",
                    "traffic-announcement-subclass-rwk": "Tietyö",
                    "traffic-announcement-subclass-rwl": "Pitkäaikainen tienparannustyö",
                    "traffic-announcement-subclass-rwm": "Tienparannustyö",
                    "traffic-announcement-subclass-rwr": "Päällystystyö",
                    "traffic-announcement-subclass-rxb": "Poistumisramppi tukossa",
                    "traffic-announcement-subclass-sat": "Kohtaava liikenne, ajo vuorotellen ohjauksen mukaan",
                    "traffic-announcement-subclass-sav": "Savea tiellä",
                    "traffic-announcement-subclass-sfh": "Sakea lumisade",
                    "traffic-announcement-subclass-sfl": "Lumisade",
                    "traffic-announcement-subclass-shl": "Kuorma levinnyt tielle",
                    "traffic-announcement-subclass-sjt": "Sähköjohtotyö",
                    "traffic-announcement-subclass-slt": "Räntäsade",
                    "traffic-announcement-subclass-slu": "Lumisohjoa",
                    "traffic-announcement-subclass-smo": "Savu haittaa näkyvyyttä",
                    "traffic-announcement-subclass-smv": "Nestettä vuotanut liikkuvasta ajoneuvosta",
                    "traffic-announcement-subclass-snp": "Lumi- tai jääpolanne",
                    "traffic-announcement-subclass-snr": "Lumikinoksia",
                    "traffic-announcement-subclass-snw": "Kaistaopasteet eivät toimi",
                    "traffic-announcement-subclass-sok": "Sivuojan kaivuutyö",
                    "traffic-announcement-subclass-son": "SUURONNETTOMUUS",
                    "traffic-announcement-subclass-spk": "Sirotepaikkaus, irtokiviä",
                    "traffic-announcement-subclass-spy": "Roiskevesi haittaa näkyvyyttä",
                    "traffic-announcement-subclass-sro": "Lunta tiellä",
                    "traffic-announcement-subclass-std": "Myrskyvaurioita",
                    "traffic-announcement-subclass-stk": "Soratien kunto huono",
                    "traffic-announcement-subclass-stm": "Myrsky",
                    "traffic-announcement-subclass-taa": "Toinen ajokaista avattu liikenteelle",
                    "traffic-announcement-subclass-tal": "Akselipainorajoitus",
                    "traffic-announcement-subclass-tav": "Tie on avattu liikenteelle",
                    "traffic-announcement-subclass-tbu": "Liikenne ruuhkautuu",
                    "traffic-announcement-subclass-tcn": "Liikenneruuhka",
                    "traffic-announcement-subclass-tcx": "Liikenneruuhka ohi",
                    "traffic-announcement-subclass-tea": "Liikenne on palautumassa normaaliksi",
                    "traffic-announcement-subclass-tgw": "Painorajoitus asetettu",
                    "traffic-announcement-subclass-tlo": "Liikennevalot eivät toimi",
                    "traffic-announcement-subclass-tlt": "Tilapäinen liikennevalo-ohjaus",
                    "traffic-announcement-subclass-tmt": "Tutkimus- ja mittaustyö",
                    "traffic-announcement-subclass-tnr": "Tilapäinen nopeusrajoitus",
                    "traffic-announcement-subclass-tol": "Tie on liukas",
                    "traffic-announcement-subclass-tri": "Tasoristeystyö",
                    "traffic-announcement-subclass-tuc": "Tunneli suljettu liikenteeltä",
                    "traffic-announcement-subclass-tvl": "Tievalaistuksen lamppuja pimeänä",
                    "traffic-announcement-subclass-tvm": "Tievalaistus vioittunut myrskyssä",
                    "traffic-announcement-subclass-tvo": "Tievalaistus vioittunut onnettomuudessa",
                    "traffic-announcement-subclass-tvt": "Tievalaistustyö",
                    "traffic-announcement-subclass-vet": "Vettä tiellä",
                    "traffic-announcement-subclass-vfr": "Palava ajoneuvo",
                    "traffic-announcement-subclass-vir": "Näkyvyys heikentynyt",
                    "traffic-announcement-subclass-vka": "Järjestelmän vikatila",
                    "traffic-announcement-subclass-vmt": "Viimeistelytyö",
                    "traffic-announcement-subclass-vnw": "Muuttuvat opasteet eivät toimi",
                    "traffic-announcement-subclass-vrt": "Vesakon raivaus",
                    "traffic-announcement-subclass-vwc": "Ajoneuvo väärällä ajoradalla",
                    "traffic-announcement-subclass-wbc": "Kaapelityö",
                    "traffic-announcement-subclass-wbs": "Kunnallistekninen työ",
                    "traffic-announcement-subclass-wic": "Kova sivutuuli",
                    "traffic-announcement-subclass-wig": "Puuskittainen tuuli",
                    "traffic-announcement-subclass-yak": "Työkohteessa vain yksi ajokaista käytössä",
                    "traffic-announcement-temporary-speed-limit": "Väliaikainen nopeusrajoitus",
                    "traffic-announcement-traffic-direction": "Vaikutussuunta",
                    "traffic-announcement-traffic-direction-both": "Molempiin suuntiin",
                    "traffic-announcement-traffic-direction-negative": "Vastakkaiseen suuntaan",
                    "traffic-announcement-traffic-direction-positive": "Valittuun suuntaan",
                    "traffic-announcement-vehicle-size-limit": "Ajoneuvorajoitus",
                    "traffic-announcement-vehicle-size-limit-definition": "(Lev. x Kork. x Pit. x Paino metreissä ja tonneissa)",
                    "traffic-camera": "Liikennekamera",
                    "traffic-camera-no-recent-images": "Ei tuoreita kuvia",
                    "traffic-count": "Liikennemäärä",
                    "traffic-direction": "Suunta",
                    "traffic-flow": "Liikennevirta",
                    "traffic-flow-heavy": "Ruuhka",
                    "traffic-flow-medium": "Hidas",
                    "traffic-flow-normal": "Normaali",
                    "traffic-flow-unknown": "Ei voitu määrittää",
                    "traffic-info": "Liikennetiedot",
                    "traffic-monitoring": "Liikenteen seuranta",
                    "traffic-restriction": "Liikennerajoitus",
                    tram: "Raitiovaunu",
                    "tram-with-route-number": "Raitiovaunu {routeNumber} {headSign}",
                    transfers: "Vaihtojen määrä",
                    "transfers-allowed": "Saa olla vaihtoja",
                    "transfers-margin": "Vaihtoaika vähintään",
                    "trip-co2-emissions": "Reitin CO2 päästöt",
                    "trip-information": "Lähdön tiedot",
                    "trip-page.description": "Linja {shortName}, {longName}",
                    "trip-page.title": "Linja {shortName}",
                    "try-again": "Yritä uudelleen",
                    unpreferred: "Vältä linjoja",
                    "use-citybike": "Ota käyttöön",
                    "use-national-service": "Voit myös hakea samaa reittiä oheisen linkin koko maan kattavasta palvelusta:",
                    "use-own-position": "Käytä nykyistä sijaintia",
                    "using-modes": "Haluan kulkea",
                    "very-likely": "Erittäin todennäköistä",
                    "very-unlikely": "Erittäin epätodennäköistä",
                    "via-leg-stop-duration": "Välipisteessä {stayDuration}",
                    "via-point": "Välipiste",
                    "viapoint-remove": "Poista pysähdys",
                    "viapoint-slack-amount": "Pysähdyksen kesto",
                    "view-route": "Linjan tiedot",
                    wait: "Odota",
                    "wait-amount-of-time": "Odota {duration}",
                    walk: "kävelyn",
                    "walk-distance-duration": "Kävele {distance} ({duration})",
                    walking: "Kävelyn määrä",
                    "walking-speed": "Kävelynopeus",
                    "warning-call-agency": "Liikennöidään kutsujoukkoliikenteenä: {routeName},\n      joka on tilattava etukäteen",
                    "warning-call-agency-no-route": "Liikennöidään kutsujoukkoliikenteenä, joka on tilattava etukäteen",
                    "weather-at-destination": "Sää määränpäässä",
                    "weather-stations": "Sääasemat",
                    weekly: "Viikoittain",
                    "wind-direction": "Tuulen suunta",
                    "wind-speed": "Tuulen nopeus",
                    north: "Pohjoinen",
                    northeast: "Koillinen",
                    east: "Itä",
                    southeast: "Kaakko",
                    south: "Etelä",
                    southwest: "Lounas",
                    west: "Länsi",
                    northwest: "Luode",
                    yesterday: "Eilen",
                    "your-favourites": "Suosikkisi",
                    zones: "Lippuvyöhykkeet"
                },
                fr: {
                    "about-this-service": "À propos de ce service",
                    accessibility: "Accessibilité",
                    "accessibility-limited": "Fauteuil roulant",
                    "accessibility-nolimit": "Aucune limite",
                    "add-itinerary-via-point": "Ajouter une étape au trajet",
                    "add-location": "Ajouter un endroit",
                    "add-location-to-favourites": "Ajouter vos lieux importants à l'onglet favoris",
                    address: "Adresse",
                    "address-or-stop": "Adresse ou arrêt",
                    agency: "Transporteur",
                    airplane: "Avion",
                    "airplane-with-route-number": "Avion {routeNumber}",
                    "airport-check-in": "S'enregistrer au guichet {agency}",
                    "airport-collect-luggage": "Récupérer vos bagages",
                    "airport-security-check-go-to-gate": "Franchir les contrôles de sécurité et se rendre à la porte d'embarquement",
                    "all-routes": "Toutes lignes",
                    "all-routes-disabled": "Aucune ligne",
                    "approx-meters": "{approxDistance} m",
                    "arriving-at": "Arrivée",
                    "arriving-soon": "Imm.",
                    "avoid-transfers": "Éviter les correspondances",
                    "avoid-walking": "Éviter la marche",
                    "back-button-title": "Revenir à la page précédente",
                    "back-to-front-page": "Revenir à la page d'accueil",
                    bicycle: "Vélo",
                    "bicycle-distance-duration": "Vélo {distance} ({duration})",
                    "bike-availability": "Vélos disponibles en station",
                    "bike-availability-short": "Vélos",
                    "bike-not-allowed-bus": "Les vélos ne sont pas autorisés dans le bus",
                    "bike-not-allowed-tram": "Les vélos ne sont pas autorisés dans le tram",
                    "biketransport-citybike": "J'utilise un vélo en libre service",
                    "biketransport-only-bike": "J'utilise uniquement le vélo",
                    "biking-amount": "Quantité de vélo",
                    "biking-speed": "Vitesse en vélo",
                    bus: "Bus",
                    "bus-with-route-number": "Bus {routeNumber} {headSign}",
                    "buy-ticket": "Acheter un titre de transport",
                    call: "Appeler",
                    cancel: "Annuler",
                    car: "Voiture",
                    "car-distance-duration": "Conduire {distance} ({duration})",
                    car_park: "parc relais",
                    cause: "Cause",
                    "char-left": "marquer",
                    "choose-stop": "Merci de choisir la ligne",
                    citybike: "Vélo en libre service",
                    "citybike-distance-duration": "VLS {distance} ({duration})",
                    "citybike-register-required": "L'utilisation du Vélo en libre service nécessite une inscription",
                    citybike_off: "Fermé",
                    close: "Fermer",
                    "contact-information": "Contacter {contactName}",
                    "create-account": "Créer un identifiant {contactName}",
                    "cycle-distance-duration": "Pédaler {distance} ({duration})",
                    "cyclewalk-distance-duration": "Avancer pied à terre sur {distance} ({duration})",
                    datasources: "Sources des données",
                    date: "Date",
                    delete: "Supprimer",
                    "departure-time-in-minutes": "{minutes} min",
                    departures: "Départs",
                    description: "Trouvez un réseau de transport public pour voyager loin ou à proximité",
                    destination: "Destination",
                    "destination-label-change": "Changer la destination",
                    "destination-outside-service": "Aucun itinéraire possible pour votre trajet. Aucun réseau de transport à proximité de votre adresse de destination",
                    "destination-placeholder": "Lieu, adresse ou arrêt",
                    "dialog-return-to-map": "Retour à la carte",
                    "digitransit-platform": "Plateforme Digitransit",
                    disclaimer: "Merci de noter que les résultats sont basés sur des temps de trajet estimés. Les correspondances indiquées ne peuvent être garanties.",
                    disruption: "Perturbation",
                    "disruption-info": "Informations sur les perturbations",
                    "disruption-info-no-alerts": "Aucune perturbation n'est répertoriée",
                    "disruption-info-route-no-alerts": "La ligne circule normalement",
                    disruptions: "Perturbations",
                    "distance-between": "Distance {distance1} m — {distance2} m",
                    "distance-under": "Distance inférieure à {distance} m",
                    earlier: "Plus tôt",
                    "edit-favourites": "Éditer les favoris",
                    explanations: "Cause",
                    "export-time-range-1": "Export time range 1",
                    "export-time-range-2": "Export time range 2",
                    "extra-info": "Informations complémentaires",
                    "favourite-target": "Destination favorite",
                    ferry: "Bâteau",
                    "ferry-with-route-number": "Bâteau {routeNumber} {headSign}",
                    roadinspection: "Road inspection",
                    "roadinspection-vehicle-time-range": "Road inspection timerange: 30 days",
                    "realtime-roadinspection-vehicles": "Realtime road inspection",
                    "footer-feedback": "Donner votre avis",
                    "footer-link-to-privacy-policy": "Vie privée",
                    frontpage: "Page d'accueil",
                    "generic-error": "Une erreur s'est produite",
                    "geolocate-yourself": "Se géolocaliser",
                    "geolocation-denied-heading": "Comment souhaitez-vous démarrer ?",
                    "geolocation-denied-text": "La géolocalisation n'est pas autorisée. Merci de vérifier votre navigateur/téléphone",
                    "geolocation-failed-heading": "Géolocalisation échouée",
                    "geolocation-failed-text": "Votre navigateur ne supporte pas le positionnement",
                    "geolocation-prompt-text": "Merci d'autoriser l'utilisation de votre position.",
                    "geolocation-timeout-heading": "Le positionnement prend plus de temps que prévu.",
                    "geolocation-timeout-text": "Merci de sélectionner une origine ou réessayer plus tard.",
                    "give-destination": "Entrer votre destination",
                    "give-name-to-location": "Donner un nom à cet endroit",
                    "give-origin": "Entrer votre point de départ",
                    "give-position": "Indiquer votre position ou un lieu dans le champ de recherche.",
                    "give-route": "Entrer une ligne",
                    "hour-short": "h",
                    "how-to-rate-service": "Comment noteriez-vous ce service ?",
                    "in-addition": "En plus",
                    inquiry: "Répondre aux questions pour développer le service",
                    instructions: "Instructions",
                    "itinerary-feedback-button": "Envoyez votre avis",
                    "itinerary-feedback-message": "Avez-vous trouvé ce que vous cherchiez ?",
                    "itinerary-feedback-placeholder": "Description (optionnel)",
                    "itinerary-hide-stops": "Cacher les arrêts",
                    "itinerary-page.description": "Itinéraire",
                    "itinerary-page.title": "Itinéraire",
                    "itinerary-summary-page.description": "Trajet recommandé",
                    "itinerary-summary-page.title": "Trajet recommandé",
                    "itinerary-ticket.title": "Titre de transport requis",
                    "itinerary-tickets.title": "Titres de transport requis",
                    "itinerary-time.title": "Duréé",
                    "itinerary-walk.title": "Distance totale de marche",
                    "journeyplanner.title": "Digitransit for Paris",
                    later: "Plus tard",
                    leaves: "Départ",
                    "leaving-at": "Départ",
                    "likely-to-recommend": "A quel point recommandriez vous ce service à un ami ou un collègue ?",
                    "likely-to-use": "A quel point utiliseriez-vous ce service plutôt que le service actuel ?",
                    loading: "Chargement",
                    locate: "Localiser",
                    "location-examples": "Gare de Lyon, Longjumeau, Rue du Bac, Châtelet,...",
                    "location-from-map": "Emplacement sélectionné",
                    login: "Se connecter",
                    "long-transfers-margin": "12 min",
                    "main-menu-label-open": "Ouvrir le menu principal",
                    "main-mode": "Voyager avec",
                    map: "Carte",
                    "messagebar-label-close-message-bar": "Fermer le message",
                    "messagebar-label-page": "Page",
                    "minute-short": "min",
                    minutes: "min",
                    "minutes-or-route": "Min / Ligne",
                    "more-settings": "Plus de paramètres",
                    navigate: "Voyager",
                    "near-you": "A proximité",
                    nearest: "Le plus proche",
                    "network-error": "Erreur réseau",
                    next: "Suivant",
                    "no-bike-allowed-popup": "Les vélos ne sont pas autorisés dans les bus ou les trams. Si vous utilisez ces véhicules sur votre trajet, laissez le vélo à l'arrêt ou à un Parc Relais.",
                    "no-favourite-locations": "Ajoutez vos lieux favoris ici. Les boutons calculeront votre itinéraire automatiquement",
                    "no-favourites": "Vous pouvez cliquer sur les étoiles pour ajouter une ligne à vos favoris. Après l'ajout, ceux-ci sont disponibles dans l'onglet Favoris de l'interface",
                    "no-position": "Aucune position",
                    "no-position-no-stops": "Localisation inconnue, impossible de proposer les arrêts à proximité.",
                    "no-route-end-date-not-in-range": "Current timetable does not include routes departing later.",
                    "no-route-msg": "Impossible de trouver un itinéraire dans cette zone. Changer le point de départ ou d'arrivée.",
                    "no-route-start-date-too-early": "Current timetable does not include routes departing earlier.",
                    "no-route-start-end": "Choisir un point de départ et une destination",
                    "no-transfers-margin": "Aucune",
                    "no-trips-found": "Il n'y a pas de trajet possible au jour choisi.",
                    now: "Maintenant",
                    "number-of-intermediate-stops": "{number, plural, =0 {Sans arrêt} =1 {{number} arrêt} other {{number} arrêts} }",
                    "number-of-minutes": "{number, plural, =0 {0 minute} one {1 minute} other {{number} minutes}}",
                    "off-canvas-info": "En vous connectant, vos favoris seront sauvegardés et accessibles depuis d'autres appareils",
                    "option-default": "Par défaut",
                    "option-least": "Le moins",
                    "option-less": "Moins",
                    "option-more": "Plus",
                    "option-most": "Le plus",
                    or: "ou",
                    origin: "Départ",
                    "origin-label-change": "Changer le départ",
                    "origin-outside-service": "Aucun itinéraire possible pour votre trajet. Aucun réseau de transport à proximité de votre adresse de départ",
                    "origin-placeholder": "Lieu, adresse ou arrêt",
                    "own-position": "Position actuelle",
                    "page-not-found": "Page non trouvée",
                    "park-and-ride": "Parc Relais",
                    "park-and-ride-availability": "Parc Relais disponible",
                    "park-and-ride-unknown": "Capacité inconnue",
                    "parking-availability": "Disponibilité du Parc Relais",
                    "pay-attention": "Attention !",
                    "pick-icon": "Sélectionner une icône",
                    "pick-mode": "Sélectionner un mode de transport",
                    "place-route-or-keyword": "Lieu, ligne ou mot-clé",
                    "platform-num": "Quai {platformCode}",
                    "platform-short": "Plat. {platformCode}",
                    "prefer-walking": "Préférer la marche",
                    preferred: "Préférer les lignes",
                    previous: "Précédent",
                    print: "Imprimer",
                    "print-timetable": "Fiche horaire de la semaine",
                    "public-transport": "Transport public",
                    rail: "Train",
                    "rail-with-route-number": "Train {routeNumber} {headSign}",
                    realtime: "Temps-réel",
                    "realtime-matching": "Intégration du temps-réel",
                    "rent-cycle-at": "Décrocher un vélo à la station {station}",
                    "required-ticket": "Titre de transport requis",
                    "return-cycle-to": "Retourner la vélo à la station {station}",
                    "right-now": "Immédiatement",
                    route: "Ligne",
                    "route-default": "Paramètres par défaut",
                    "route-destination-arrives": "Arrivée / Terminus",
                    "route-fastest": "Trajet le plus rapide",
                    "route-from-here": "Partir d'ici",
                    "route-guide": "Guide de trajet",
                    "route-here": "Arriver ici",
                    "route-least-transfers": "Éviter les correspondances",
                    "route-least-walking": "Éviter la marche",
                    "route-not-possible": 'Impossible de calculer un itinéraire. Information technique : "{error}"',
                    "route-page.description": "Ligne {shortName}, {longName}",
                    "route-page.title": "Ligne {shortName}",
                    "route-page.title-short": "Ligne",
                    "route-prefer-greenways": "Préférer les pistes cyclables",
                    "route-prefer-illuminated": "Préférer les routes éclairées",
                    "route-prefer-paved": "Préférer les routes pavées",
                    "route-prefer-walking-routes": "Préférer les rues piétonnes",
                    "route-prefer-winter-maintenance": "Préférer les routes déneigées",
                    "route-preferences": "Préférences d'itinéraire",
                    "route-public-transport-with-bicycle": "Vélo et transport public",
                    "route-saved-settings": "Paramètres personnalisés",
                    "route-stop-or-keyword": "Ligne, arrêt ou mot-clé",
                    routes: "Lignes",
                    run: "Lancer",
                    save: "Enregistrer",
                    search: "Recherche",
                    "search-destination": "Entrer votre point de destination",
                    "search-destination-results-but-no-search": "Voir les résultats de l'onglet 'Destination'",
                    "search-no-results": "Aucun résultat",
                    "search-origin": "Entrer votre point de départ",
                    "search-position": "Rechercher la position",
                    "search-search-results-but-no-destination": "Voir les résultats de l'onglet 'Ligne, arrêt ou mot-clé'",
                    "searching-position": "Localisation en cours...",
                    "select-map-layers-header": "Qu'afficher sur la carte ?",
                    "select-position": "Utiliser une localisation précédente",
                    send: "Envoyer",
                    settings: "Réglages",
                    "settings-label-change": "Changer les paramètres",
                    "settings-reset": "Remettre à zéro les paramètres",
                    "settings-savebutton": "Enregistrer les paramètres",
                    "settings-saved": "Paramètres enregistrés !",
                    share: "Partager",
                    "show-departures": "Afficher les départs",
                    "show-more": "Afficher plus",
                    "show-routes": "Afficher les lignes",
                    "skip-positioning": "Ignorer le positionnement",
                    slow: "Lent",
                    "specify-location": "Indiquer un endroit",
                    "splash-choose": "Choisir un point de départ",
                    "splash-locating": "Localisation...",
                    "splash-or-choose": "Ou choisir parmi ces destinations",
                    "splash-please-allow-positioning": "Ce service fonctionne mieux en autorisant la géolocalisation.",
                    "splash-use-positioning": "Utiliser la position",
                    "splash-welcome": "Comment souhaitez-vous démarrer ?",
                    "splash-you-can-also": "Vous pouvez aussi",
                    stop: "Arrêt",
                    "stop-number": "Identifiant d'arrêt",
                    "stop-page.description": "Arrêt - {name} {code}, {desc}",
                    "stop-page.title": "Arrêt - {name} {code}",
                    "stop-page.title-short": "Arrêt",
                    stops: "Arrêts",
                    "street-mode-bicycle": "Vélo",
                    "street-mode-car": "Voiture",
                    "street-mode-car_park": "Parc relais",
                    "street-mode-public_transport": "Transport public",
                    "street-mode-walk": "Marche",
                    subway: "Métro",
                    "subway-with-route-number": "Métro {routeNumber} {headSign}",
                    "summary-page.description": "{from} - {to}",
                    "summary-page.title": "Itinéraire proposé",
                    "terminal-page.description": "Terminal - {name}",
                    "terminal-page.title": "Terminal - {name}",
                    "terminal-page.title-short": "Terminal",
                    "terms-of-use": "CGU",
                    "ticket-and-price-info": "Titres et informations tarifaires",
                    "ticket-single-adult": "Adulte",
                    "ticket-type-none": "Pas de limite tarifaire",
                    tickets: "Titres de transport",
                    time: "Heure",
                    timetable: "Fiche horaire",
                    "to-stop": "à l'arrêt",
                    today: "Aujourd'hui",
                    tomorrow: "Demain",
                    tram: "Tramway",
                    "tram-with-route-number": "Tramway {routeNumber} {headSign}",
                    transfers: "Correspondances",
                    "transfers-allowed": "Autoriser les correspondances",
                    "transfers-margin": "Marge de correspondance",
                    "trip-co2-emissions": "Émissions de CO2",
                    "trip-information": "Informations de voyage",
                    "trip-page.description": "Ligne {shortName}, {longName}",
                    "trip-page.title": "Ligne {shortName}",
                    "try-again": "Réessayer",
                    unpreferred: "Éviter les lignes",
                    "use-citybike": "Utiliser",
                    "use-national-service": "Vous pouvez aussi utiliser le service national disponible à",
                    "use-own-position": "Utiliser la position actuelle",
                    "using-modes": "Modes de transport",
                    "very-likely": "Très probable",
                    "very-unlikely": "Très improbable",
                    "via-leg-stop-duration": "Attente de {stayDuration} à l'étape",
                    "via-point": "Étape",
                    "viapoint-slack-amount": "Durée de l'étape",
                    "view-route": "Voir l'itinéraire",
                    wait: "Attendre",
                    "wait-amount-of-time": "Attendre {duration}",
                    walk: "marche",
                    "walk-distance-duration": "Marcher {distance} ({duration})",
                    walking: "Marcher",
                    "walking-speed": "Vitesse de marche",
                    "warning-call-agency": "La ligne {routeName} est à la demande, et doit être réservée à l'avance",
                    "warning-call-agency-no-route": "Uniquement à la demande. Doit être réservé à l'avance",
                    "weather-at-destination": "Météo à destination",
                    yesterday: "Hier",
                    "your-favourites": "Favoris",
                    zones: "Zones tarifaires"
                },
                nb: {
                    "about-this-service": "Om tjenesten",
                    accessibility: "Tilgjengelighet",
                    "add-itinerary-via-point": "Tilføy viapunkt i reisen",
                    "add-location": "Legg til sted",
                    "add-location-to-favourites": "Legg til sted i favoritter",
                    address: "Adresse",
                    "address-or-stop": "Adresse eller stoppested",
                    agency: "Operatør",
                    airplane: "Fly",
                    "airplane-with-route-number": "Fly {routeNumber}",
                    "airport-check-in": "Bagasje kan sjekkes inn hos {agency}",
                    "airport-collect-luggage": "Hent eventuell bagasje",
                    "airport-security-check-go-to-gate": "Passer sikkerhetskontrollen og fortsett til gate",
                    "approx-meters": "{approxDistance} meter",
                    "arriving-at": "Ankomst",
                    "arriving-soon": "Nå",
                    "avoid-transfers": "Unngå bytter",
                    "avoid-walking": "Unngå gange",
                    "back-button-title": "Gå tilbake til forrige side",
                    "back-to-front-page": "Tilbake til forsiden ›",
                    "bike-availability": "Sykler finnes",
                    "bike-availability-short": "Sykler",
                    bus: "Buss",
                    "bus-with-route-number": "Buss {routeNumber} {headSign}",
                    "buy-ticket": "Kjøp billett",
                    call: "Ring",
                    cancel: "Avbryt",
                    "car-distance-duration": "Kjør {distance} ({duration})",
                    cause: "Årsak",
                    "char-left": "slett",
                    "choose-stop": "Velg stopp",
                    citybike: "Bysykkel",
                    "citybike-register-required": "Bysykkelregistrering påkreves",
                    close: "Steng",
                    "contact-information": "{contactName} kontaktinformasjon",
                    "create-account": "Lag {contactName}-konto",
                    "cycle-distance-duration": "Sykle {distance} ({duration})",
                    "cyclewalk-distance-duration": "Trill sykkelen {distance} ({duration})",
                    datasources: "Datakilder",
                    delete: "Slett",
                    "departure-time-in-minutes": "{minutes} m",
                    departures: "Avganger",
                    description: "En nasjonal reiseplanlegger skal bidra til å gjøre det lettere å reise kollektivt over hele landet.",
                    destination: "Til",
                    "destination-label-change": "Endre destinasjon",
                    "destination-placeholder": "Hvor vil du reise?",
                    "digitransit-platform": "Digitransit platform",
                    "disruption-info": "Avviksmelding",
                    "disruption-info-no-alerts": "Ingen avviksmeldinger.",
                    "disruption-info-route-no-alerts": "Ingen avviksmeldinger.",
                    disruptions: "Avvik",
                    "distance-between": "Avstand {distance1} m — {distance2} m",
                    "distance-under": "Avstand mindre enn {distance} m",
                    earlier: "Tidligere",
                    "edit-favourites": "Rediger favorittsted",
                    "extra-info": "Mer info",
                    "favourite-target": "Favorittdestinasjon",
                    ferry: "Ferge",
                    "ferry-with-route-number": "Ferge {routeNumber} {headSign}",
                    roadinspection: "Road inspection",
                    "roadinspection-vehicle-time-range": "Road inspection timerange: 30 days",
                    "realtime-roadinspection-vehicles": "Realtime road inspection",
                    frontpage: "Forside",
                    "geolocate-yourself": "Finn min posisjon",
                    "geolocation-denied-heading": "Tjenesten fungerer best når du oppgir din posisjon",
                    "geolocation-denied-text": "Lokalisering er ikke tillatt. Sjekk innstillingene for nettleseren din.",
                    "geolocation-failed-heading": "Lokalisering fungerer ikke",
                    "geolocation-failed-text": "Nettleseren din har ikke støtte for lokalisering.",
                    "geolocation-prompt-text": "Vennligst aksepter lokalisering.",
                    "geolocation-timeout-heading": "Lokalisering tar lengre tid enn forventet.",
                    "geolocation-timeout-text": "Velg startsted og prøv igjen.",
                    "give-destination": "skriv hvor du vil reise",
                    "give-name-to-location": "Skriv inn et beskrivende navn på stedet",
                    "give-origin": "skriv avgangssted",
                    "give-position": "Skriv inn posisjon i søkefeltet over.",
                    "hour-short": "t",
                    "how-to-rate-service": "Hvordan vil du rangere tjenesten?",
                    "in-addition": "Og",
                    inquiry: "Send tilbakemelding",
                    instructions: "Instruksjoner",
                    "itinerary-feedback-button": "Send tilbakemelding",
                    "itinerary-feedback-message": "Fant du ikke det du lette etter?",
                    "itinerary-feedback-placeholder": "Beskrivelse (valgfritt)",
                    "itinerary-hide-stops": "Skjul stopp",
                    "itinerary-page.description": "Reisebeskrivelser",
                    "itinerary-page.title": "Reisebeskrivelser",
                    "itinerary-summary-page.description": "Anbefalte ruter",
                    "itinerary-summary-page.title": "Anbefalte ruter",
                    later: "Senere",
                    leaves: "Går",
                    "leaving-at": "Avgang",
                    "likely-to-recommend": "Hvor sannsynlig er det at du anbefaler vår tjeneste til en venn eller kollega?",
                    "likely-to-use": "Hvor sannsynlig er det at du vil bruke denne tjenesten fremfor tjenesten du allerede bruker?",
                    loading: "laster",
                    locate: "Der jeg er",
                    "location-examples": "f.eks hjemme, arbeid, skole ...",
                    "location-from-map": "Velg posisjon",
                    login: "Logg inn",
                    "long-transfers-margin": "Veldig lang",
                    "main-menu-label-open": "Åpen hovedmenyen",
                    "main-mode": "Jeg reiser med",
                    map: "Kart",
                    "messagebar-label-close-message-bar": "Lukk melding",
                    "messagebar-label-page": "Side",
                    "minute-short": "m",
                    minutes: "min",
                    navigate: "Naviger",
                    "near-you": "Nær deg",
                    nearest: "Forrige",
                    "network-error": "Nettverksfeil",
                    next: "Neste",
                    "no-favourite-locations": "Tilføy de mest besøkte steder her. Det gir deg hurtig rejseplanlegging.",
                    "no-favourites": "Du kan legge til favoritter ved å trykke på favorittknapper forskjellige steder i reiseplanleggeren",
                    "no-position": "Ingen posisjon",
                    "no-position-no-stops": "Kan ikke vise holdeplasser i nærheten da vi ikke vet din posisjon.",
                    "no-route-end-date-not-in-range": "Current timetable does not include routes departing later.",
                    "no-route-msg": "Vi finner dessverre ingen reiseforslag til angitt rute. Forsøk å endre adresse",
                    "no-route-start-date-too-early": "Current timetable does not include routes departing earlier.",
                    "no-route-start-end": "Vennligst velg avgangssted og destinasjon.",
                    "no-transfers-margin": "Ingen",
                    "no-trips-found": "Ingen reiser tilgjenelig for denne dagen.",
                    now: "Nå",
                    "number-of-intermediate-stops": "{number, plural, =0 {Ingen stopp} other {{number} stopp} }",
                    "off-canvas-info": "Ved å logge inn kan du finne tilbake til dine favoritter på andre enheter",
                    or: "eller",
                    origin: "Fra",
                    "origin-label-change": "Endre avreisested",
                    "origin-placeholder": "Fra",
                    "own-position": "Min posisjon",
                    "page-not-found": "Siden finnes ikke ੨( ･᷄ ︵･᷅ )ｼ",
                    "park-and-ride": "Innfartsparkering",
                    "park-and-ride-availability": "Tilgjengelighet",
                    "park-and-ride-unknown": "Ukjent kapasitet",
                    "parking-availability": "Tilgjengelighet",
                    "pay-attention": "Obs!",
                    "pick-icon": "Velg et ikon",
                    "place-route-or-keyword": "Adresse eller stoppested",
                    "platform-num": "Plattform {platformCode}",
                    "platform-short": "Plat. {platformCode}",
                    "prefer-walking": "Foretrekk gange",
                    previous: "Tidligere",
                    print: "Skriv ut",
                    "print-timetable": "Tidstabeller",
                    rail: "Tog",
                    "rail-with-route-number": "Tog {routeNumber} {headSign}",
                    "realtime-matching": "Sanntidsmatching",
                    "rent-cycle-at": "Lei sykkel fra stativ {station}",
                    "required-ticket": "Billett før påstigning",
                    "right-now": "Nå",
                    route: "linje",
                    "route-destination-arrives": "Destinasjon / Siste holdeplass",
                    "route-from-here": "Finn rute herfra",
                    "route-here": "Finn rute hit",
                    "route-not-possible": 'Dessverre kan vi ikke finne et reiseforslag til deg. Teknisk feil: "{error}"',
                    "route-page.description": "Rute {shortName}, {longName}",
                    "route-page.title": "Rute {shortName}",
                    "route-page.title-short": "Rute",
                    "route-stop-or-keyword": "Linje eller stoppested",
                    routes: "Ruter",
                    run: "Løping",
                    save: "Lagre",
                    search: "Til",
                    "search-destination-results-but-no-search": "Se resultater i Til-fanen",
                    "search-no-results": "Ingen resultater",
                    "search-origin": "skriv avgangssted",
                    "search-position": "Let etter posisjon",
                    "search-search-results-but-no-destination": "Se resultater i Fra-fanen",
                    "searching-position": "Leter etter posisjon",
                    "select-position": "Velg din posisjon basert på tidligere søk",
                    send: "Send",
                    settings: "Innstillinger",
                    "settings-label-change": "Endre innstillinger",
                    "settings-reset": "Nullstill innstillinger",
                    "settings-savebutton": "Lagre innstillinger",
                    "settings-saved": "Endringer lagret!",
                    share: "Del reisen",
                    "show-departures": "Vis avganger",
                    "show-more": "Vis flere",
                    "skip-positioning": "Hopp over",
                    slow: "Spasering",
                    "specify-location": "Angi sted",
                    "splash-choose": "Angi avgangssted",
                    "splash-locating": "Søker etter din posisjon",
                    "splash-or-choose": "Eller velg din posisjon fra",
                    "splash-use-positioning": "Bruk min posisjon",
                    "splash-welcome": "Velkommen til ny versjon av din reiseplanlegger",
                    "splash-you-can-also": "Alternativt",
                    stop: "Holdeplass",
                    "stop-number": "Holdeplassnummer",
                    "stop-page.description": "Holdeplass - {name} {code}, {desc}",
                    "stop-page.title": "Holdeplass - {name} {code}",
                    "stop-page.title-short": "Holdeplass",
                    stops: "Holdeplasser",
                    subway: "T-bane",
                    "subway-with-route-number": "T-bane {routeNumber} {headSign}",
                    "summary-page.description": "{from} - {to}",
                    "summary-page.title": "Anbefalte ruter",
                    "terminal-page.description": "Terminal - {name}",
                    "terminal-page.title": "Terminal",
                    "terminal-page.title-short": "Terminal - {name}",
                    "terms-of-use": "Brukervilkår",
                    "ticket-and-price-info": "Billett- og prisinformasjon",
                    tickets: "Billetter",
                    time: "Tid",
                    timetable: "Tidstabeller",
                    "to-stop": "Avstand",
                    today: "I dag",
                    tomorrow: "I morgen",
                    tram: "Trikk",
                    "tram-with-route-number": "Trikk {routeNumber} {headSign}",
                    transfers: "Bytter",
                    "transfers-allowed": "Bytter tillatt",
                    "transfers-margin": "Byttetid",
                    "trip-co2-emissions": "Reisens CO2-utslipp",
                    "trip-page.description": "Linje {shortName}, {longName}",
                    "trip-page.title": "Linje {shortName}",
                    "try-again": "Prøv igjen.",
                    "use-citybike": "Bruk bysykkel",
                    "use-own-position": "Bruk min posisjon",
                    "using-modes": "Transportform",
                    "very-likely": "Svært sannsynlig",
                    "very-unlikely": "Lite sannsynlig",
                    "via-leg-stop-duration": "Viapunkt {stayDuration}",
                    "via-point": "Viapunkt",
                    wait: "Vent",
                    "wait-amount-of-time": "Vent {duration}",
                    walk: "gå",
                    "walk-distance-duration": "Gå {distance} ({duration})",
                    walking: "Gange",
                    "walking-speed": "Ganghastighet",
                    "warning-call-agency": "Bestillingsrute: {routeName}, avgangen må forhåndsbestilles fra operatør.",
                    "warning-call-agency-no-route": "Kun bestillingsrute. Avgangen må forhåndsbestilles fra operatør.",
                    "weather-at-destination": "Været på destinasjonen",
                    yesterday: "I går",
                    "your-favourites": "Favoritter",
                    zones: "Billettsoner"
                },
                sv: {
                    "1. time range": "1. tidsintervall",
                    "2. time range": "2. tidsintervall",
                    "about-this-service": "Om tjänsten",
                    accessibility: "Tillgänglighet",
                    "accessibility-limited": "Med rullstolen",
                    "accessibility-nolimit": "Ingen begränsning",
                    "accessibility-report": "Tillgänglighetsrapport",
                    "add-itinerary-via-point": "Lägg till mellanstopp",
                    "add-location": "Lägg till en plats",
                    "add-location-to-favourites": "Lägg till en plats som är viktig för dig på fliken Favoriter",
                    "additional-analytics": "Ytterligare analyser",
                    address: "Adress",
                    "address-or-stop": "Adress eller hållplats",
                    agency: "Trafikidkare",
                    "air-humidity": "Luftfuktighet",
                    "air-temperature": "Lufttemperatur",
                    airplane: "Flyg",
                    "airplane-with-route-number": "Flyg {routeNumber}",
                    "airport-check-in": "Bagage kan checkas in på {agency}",
                    "airport-collect-luggage": "Plocka upp ditt bagage",
                    "airport-security-check-go-to-gate": "Gå igenom säkerhetskontrollen till gate",
                    "all-routes": "Alla linjer",
                    "all-routes-disabled": "Inga linjer",
                    "approx-meters": "{approxDistance} m",
                    "arriving-at": "Anländer",
                    "arriving-soon": "Nu",
                    "average-speed": "Medelhastighet",
                    "avoid-transfers": "Undvik byten",
                    "avoid-walking": "Undvik gång",
                    back: "Tillbaka",
                    "back-button-title": "Tillbaka till föregående sida",
                    "back-to-front-page": "Tillbaka till framsidan ›",
                    bicycle: "cyckel",
                    "bicycle-distance-duration": "Cykla {distance} ({duration})",
                    "bicycle-route-prop-name": "Name",
                    "bicycle-route-prop-type": "Type",
                    "bicycle-route-prop-type-PLANNED": "Planned",
                    "bicycle-route-prop-type-CURRENT": "Current",
                    "bicycle-route-prop-year": "Year of completion",
                    "bicycle-route-prop-length": "Length",
                    "bicycle-routes": "Cykelvägar",
                    "bicycle-routes-BAANA": "Baana",
                    "bicycle-routes-BAANA-CURRENT": "Baana",
                    "bicycle-routes-BAANA-PLANNED": "Planned baana",
                    "bicycle-routes-BRAND": "Brand routes",
                    "bicycle-routes-BRAND-MAIN": "Brand route",
                    "bicycle-routes-BRAND-PERIMETER": "Perimeter route",
                    "bicycle-routes-MAIN_REGIONAL": "Main and regional routes",
                    "bicycle-routes-MAIN_REGIONAL-MAIN": "Main route",
                    "bicycle-routes-MAIN_REGIONAL-REGIONAL": "Regional route",
                    "bicycle-routes-MAIN_REGIONAL-PLANNED_MAIN": "Planned main route",
                    "bicycle-routes-MAIN_REGIONAL-PLANNED_REGIONAL": "Planned regional route",
                    "bicycle-routes-TYPES": "Other routes",
                    "bicycle-routes-TYPES-2_WAY": "2-way pp+jk",
                    "bicycle-routes-TYPES-SLOW_STREET": "Slow street (=bicycle street)",
                    "bicycle-routes-TYPES-BICYCLE_LANE": "Bicycle lane",
                    "bicycle-routes-TYPES-SHARED_SPACE": "Shared space",
                    "bicycle-routes-TYPES-4MW_SHARED": "4 m wide shared pp+jk",
                    "bicycle-routes-TYPES-35MW_SHARED": "3.5 m wide shared pp+jk",
                    "bicycle-routes-TYPES-ACCESS_ROAD": "Access road",
                    "bicycle-routes-TYPES-WIDE_SHOULDER": "Wide shoulder",
                    "bike-availability": "Antal cyklar just nu",
                    "bike-availability-short": "Cyklar",
                    "bike-not-allowed-bus": "Cyklar är inte tillåtna på bussen",
                    "bike-not-allowed-tram": "Cyklar är inte tillåtna på spårvagnen",
                    "biketransport-citybike": "Jag använder en stadscykel",
                    "biketransport-only-bike": "Jag reser bara med cykel",
                    "biking-amount": "Antal cyklar",
                    "biking-speed": "Cykling hastighet",
                    bus: "Buss",
                    "bus-with-route-number": "Buss {routeNumber} {headSign}",
                    "buy-ticket": "Så här köper du biljetten (HSL.fi)",
                    call: "Ring",
                    cameras: "Kameror",
                    cancel: "Avbryt",
                    car: "Bil",
                    "car-distance-duration": "Kör {distance} ({duration})",
                    car_park: "infartsparkering",
                    cause: "Orsak",
                    "char-left": "tecken",
                    "choose-date": "Välj datum",
                    "choose-date-error": "Slutdatumet måste vara större än startdatumet.",
                    "choose-stop": "Specifiera val",
                    "weather-station": "Väderstation",
                    citybike: "Stadscykel",
                    "citybike-distance-duration": "Cykla {distance} ({duration})",
                    "citybike-off-season": "Stadscyklarna tas i bruk igen nästa vår",
                    "citybike-register-required": "Det krävs registrering för att kunna använda stadscyklar",
                    citybike_off: "Stängd",
                    clear: "Klar",
                    "clear-selected-options": "Töm dina val",
                    close: "Stäng",
                    "close-comparison": "Avslut",
                    compare: "Jämför",
                    condition: "Förhållande",
                    "contact-information": "{contactName} Kontaktuppgifter",
                    "create-account": "Skapa {contactName} konto",
                    "cycle-distance-duration": "Cykla {distance} ({duration})",
                    "cyclewalk-distance-duration": "Led cykeln {distance} ({duration})",
                    daily: "Dagligen",
                    datasources: "Datakällor",
                    date: "Datum",
                    delete: "Ta bort",
                    "departure-time-in-minutes": "{minutes} min",
                    departures: "Avgångar",
                    description: "Res kollektivt när och fjärran.",
                    destination: "Destination",
                    "destination-copied": "Destinationslänk kopierad till urklipp",
                    "destination-label-change": "Byt destination",
                    "destination-needed": "En destination måste vara specifierad",
                    "destination-outside-service": "Vi kunde tyvärr inte hitta några reseförslag för denna sträcka. Ändra destination, som ligger utanför serviceområde.",
                    "destination-placeholder": "Destination, linje eller hållplats",
                    "dew-point-temperature": "Daggpunktstemperatur",
                    "dialog-return-to-map": "Tillbaka till kartan",
                    "digitransit-platform": "Digitransit-serviceplattformen",
                    disclaimer: "Resultaten baserar sig på beräknade körtider. Vi kan inte garantera att den förslagna förbindelsen kan förverkligas.",
                    disruption: "Störning",
                    "disruption-info": "Undantagsinfo",
                    "disruption-info-no-alerts": "Inga kända störningar eller avvikelser.",
                    "disruption-info-route-no-alerts": "Linjen har för tillfället inga kända störningar eller avvikelser.",
                    disruptions: "Störningar",
                    "distance-between": "Avstånd {distance1} m — {distance2} m",
                    "distance-total": "Resans längd",
                    "distance-under": "Avstånd mindre än {distance} m",
                    "driving-conditions": "Körförhållanden",
                    earlier: "Tidigare",
                    "eco-counter": "Eco counter",
                    "eco-counter-direction-1": "Till centrum",
                    "eco-counter-direction-2": "Från centrum",
                    "eco-counter-direction-5": "Ej specificerad",
                    "eco-counter-direction-6": "Norrifrån",
                    "eco-counter-direction-7": "Österifrån",
                    "eco-counter-direction-8": "Söderifrån",
                    "eco-counter-direction-9": "Västerifån",
                    "eco-counter-total": "Totalt",
                    "eco-counter-week-title": "Vecka {date}",
                    "edit-favourites": "Redigera favoritdestination",
                    "elevation-gained-total": "Uppförsbacke totalt",
                    "elevation-lost-total": "Nedförsbacke totalt",
                    explanations: "Förklaringar",
                    "export-time-range-1": "Export time range 1",
                    "export-time-range-2": "Export time range 2",
                    "external-modes": "Övriga färdmedel",
                    "extra-info": "Mer info",
                    "favourite-target": "Favoritdestination",
                    ferry: "Färja",
                    "ferry-with-route-number": "Färja {routeNumber} {headSign}",
                    roadinspection: "Väggranskning",
                    "roadinspection-vehicle-time-range": "Väggranskning tidsintervall: 30 dagar",
                    "realtime-roadinspection-vehicles": "Väggranskning i realtid",
                    fluency: "Rusningar",
                    "footer-links": "Sidfotslänkar",
                    "footer-faq": "Frågor och svar",
                    "footer-feedback": "Skicka respons",
                    "footer-link-to-privacy-policy": "Registerbeskrivning",
                    "from-city": "Från centrum",
                    frontpage: "Framsidan",
                    "generic-error": "Det hände ett fel",
                    "geolocate-yourself": "Sök position",
                    "geolocation-denied-heading": "Delning av platsinformation är förbjudet",
                    "geolocation-denied-text": "Du har inte aktiverat platstjänster. Du kan aktivera platsdelning via webbläsarens eller telefonens inställningar.",
                    "geolocation-failed-heading": "Platstjänster otillgängliga.",
                    "geolocation-failed-text": "Försök igen eller skriv in din plats.",
                    "geolocation-prompt-text": "Vänligen tillåt delning av platsinformation.",
                    "geolocation-timeout-heading": "Det tar längre tid än väntat att hitta din plats.",
                    "geolocation-timeout-text": "Har du godkänt att webbläsaren får använda din plats?",
                    "give-destination": "Skriv in din destination",
                    "give-name-to-location": "Ge ett namn som beskriver platsen",
                    "give-origin": "Skriv in din avfärdsplats",
                    "give-position": "Skriv in din position eller avfärdsplats i sökfältet.",
                    "give-route": "Sök linje",
                    "hide-realtime-on-map": "Dölj fordonen på kartan",
                    hour: "Timme",
                    "hour-short": "h",
                    hourly: "Varje timme",
                    "hourly-with-date": "Varje timme ({date})",
                    "how-to-rate-service": "Hur skulle du utvärdera tjänsten?",
                    "in-addition": "Även",
                    inquiry: "Vad tycker du om den nya Reseplaneraren. Berätta för oss!",
                    instructions: "Anvisningar",
                    "itinerary-feedback-button": "Skicka respons",
                    "itinerary-feedback-message": "Hittade du inte vad du sökte?",
                    "itinerary-feedback-placeholder": "Beskrivning (valfri)",
                    "itinerary-hide-stops": "Dölj hållplatserna",
                    "itinerary-page.description": "Ruttinformation",
                    "itinerary-page.title": "Ruttinformation",
                    "itinerary-summary-page.description": "Ruttförslag",
                    "itinerary-summary-page.title": "Ruttförslag",
                    "itinerary-ticket.title": "Biljett som behövs",
                    "itinerary-tickets.title": "Biljetter som behövs",
                    "itinerary-time.title": "Restid",
                    "itinerary-walk.title": "Gång totalt",
                    "journeyplanner.title": "HRT Reseplaneraren",
                    "last-updated": "Senast uppdaterad",
                    later: "Senare",
                    leaves: "Avgår",
                    "leaving-at": "Avgångstid",
                    "likely-to-recommend": "Hur sannolikt är det att du skulle rekommendera den här tjänsten åt en vän eller kollega?",
                    "likely-to-use": "Hur sannolikt skulle du använda denna tjänst i stället för den nuvarande Reseplaneraren?",
                    links: "Länkar",
                    loading: "Laddar...",
                    locate: "Lokalisera",
                    "location-examples": "t.ex. Hem, Arbetsplats, Skola,...",
                    "location-from-map": "Vald position",
                    "location-home": "Hem",
                    "location-school": "Skola",
                    "location-shopping": "Affär",
                    "location-sport": "Sport",
                    "location-work": "Arbetsplats",
                    login: "Logga in",
                    "long-transfers-margin": "12 min",
                    "main-bicycle-route-contract": "Endast huvudcykelvägar",
                    "main-menu-label-close": "Stäng huvudmenyn",
                    "main-menu-label-open": "Öppna huvudmenyn",
                    "main-mode": "Jag använder",
                    maintenance: "Underhåll",
                    "maintenance-job": "Underhållsjobb",
                    "maintenance-job-0": "Andra underhållsjobb",
                    "maintenance-job-1357": "Gatuborstning",
                    "maintenance-job-1364": "Utjämning av vägytan",
                    "maintenance-job-1366": "Utjämning av vägytan",
                    "maintenance-job-1367": "Halkbekämpning",
                    "maintenance-job-1368": "Halkbekämpning",
                    "maintenance-job-1369": "Halkbekämpning",
                    "maintenance-job-1370": "Snöplogning",
                    "maintenance-job-2864": "Utjämning av vägytan",
                    "maintenance-job-99901": "SnöGatuborstning",
                    "maintenance-job-99902": "Väggranskning",
                    "maintenance-job-legend-0": "Andra underhållsjobb",
                    "maintenance-job-legend-1357": "Gatuborstning",
                    "maintenance-job-legend-1364": "Utjämning av vägytan",
                    "maintenance-job-legend-1366": "Utjämning av vägytan",
                    "maintenance-job-legend-1367": "Halkbekämpning",
                    "maintenance-job-legend-1368": "Halkbekämpning",
                    "maintenance-job-legend-1369": "Halkbekämpning",
                    "maintenance-job-legend-1370": "Snöplogning",
                    "maintenance-job-legend-2864": "Utjämning av vägytan",
                    "maintenance-job-legend-99901": "Gatuborstning",
                    "maintenance-job-legend-99902-car": "Väggranskning (bil)",
                    "maintenance-job-legend-99902-bicycle": "Väggranskning (cykel)",
                    "maintenance-job-realization": "Förverkligande",
                    "maintenance-vehicle-name": "Ajoneuvo #{vehicleNumber}",
                    "maintenance-vehicle-time-range": "Tidsintervall",
                    "maintenance-vehicle-time-range-12h": "12h",
                    "maintenance-vehicle-time-range-1d": "1d",
                    "maintenance-vehicle-time-range-1h": "1h",
                    "maintenance-vehicle-time-range-3d": "3d",
                    "maintenance-vehicle-time-range-30d": "30d Gatuborstning",
                    "maintenance-vehicle-time-range-3h": "3h",
                    "maintenance-vehicle-time-range-6h": "6h",
                    "maintenance-inspection-vehicle-type-car": "(bil) ",
                    "maintenance-inspection-vehicle-type-bicycle": "(cykel) ",
                    "maintenance-inspection-vehicle-type-unknown": "(okänd) ",
                    map: "Karta",
                    "map-layer-citybike": "Stadscykelstation",
                    "map-layer-park-and-ride": "Infartsparkering",
                    "map-layer-stop-bus": "Busshållplats",
                    "map-layer-stop-ferry": "Färja",
                    "map-layer-stop-tram": "Spårvagnshållplats",
                    "map-layer-terminal-bus": "Bussterminal",
                    "map-layer-terminal-rail": "Tågstation",
                    "map-layer-terminal-subway": "Metrostation",
                    "map-layer-ticket-sales-machine": "Biljettautomat",
                    "map-layer-ticket-sales-point": "Laddningsplats för resekort",
                    "messagebar-label-close-message-bar": "Stäng banner",
                    "messagebar-label-page": "Sidan",
                    "minute-short": "min",
                    minutes: "min",
                    "minutes-or-route": "Min / Linje",
                    monthly: "Månatligen",
                    more: "Mer",
                    "more-settings": "Fler inställningar",
                    motorist: "Bilist",
                    navigate: "Navigera",
                    "near-you": "Nära dig",
                    nearest: "Närmaste",
                    "network-error": "Nätverksfel",
                    next: "Nästa",
                    "no-bike-allowed-popup": "Cyklar är inte tillåtna i bussar eller spårvagnar. Om du använder dessa fordon på din färd, lämna cykeln vid hållplatsen eller vid infartsparkeringen.",
                    "no-favourite-locations": "Lägg till dina oftast använda platser här. Knapparna för dig rakt till reseplanen.",
                    "no-favourites": "Genom att klicka på stjärnan kan du lägga till en linje eller hållplats till dina favoriter. Dina favoriter syns på den här sidan.",
                    "no-position": "Ingen position",
                    "no-position-no-stops": "De närmaste hållplatserna kan inte visas, eftersom din position inte är känd.",
                    "no-route-end-date-not-in-range": "Tidtabellen har inga resor som avgår senare.",
                    "no-route-msg": "Vi kunde tyvärr inte hitta några reseförslag för denna sträcka. Ändra adress.",
                    "no-route-start-date-too-early": "Tidtabellen har inga resor som avgår tidigare.",
                    "no-route-start-end": "Välj avfärdsplats och destination.",
                    "no-transfers-margin": "1 min",
                    "no-trips-found": "Inga resor på den valda dagen.",
                    now: "Nu",
                    "number-of-intermediate-stops": "{number, plural, =0 {Inga hållplatser} one {1 hållplats} other {{number} hållplatser} }",
                    "number-of-minutes": "{number, plural, =0 {0 minuter} one {1 minut} other {{number} minuter}}",
                    "off-canvas-info": "Genom att logga in kan du spara dina favoriter och använda dem med dina andra enheter.",
                    "option-default": "Standard",
                    "option-least": "Minst",
                    "option-less": "Mindre",
                    "option-more": "Mera",
                    "option-most": "Mest",
                    or: "eller",
                    origin: "Avfärdsplats",
                    "origin-label-change": "Byt avfärdsplats",
                    "origin-outside-service": "Vi kunde tyvärr inte hitta några reseförslag för denna sträcka. Ändra avfärdsplats, som ligger utanför serviceområde.",
                    "origin-placeholder": "Från - adress eller hållplats",
                    "own-position": "Min position",
                    "page-not-found": "Sidan kunde inte hittas.",
                    "park-and-ride": "Infartsparkering",
                    "park-and-ride-availability": "Lediga parkeringsplatser",
                    parking: "Parkering",
                    "parking-availability": "Lediga parkeringsplatser",
                    "pay-attention": "Obs!",
                    "pick-icon": "Välj en ikon",
                    "pick-mode": "Välj ett transportläge",
                    "place-route-or-keyword": "Destination, linje eller hållplats",
                    "platform-num": "Plattform {platformCode}",
                    "platform-short": "Plattf. {platformCode}",
                    "prefer-walking": "Främja gång",
                    preferred: "Föredra rutter",
                    previous: "Senaste",
                    print: "Skriv ut",
                    "print-timetable": "Veckans tidtabell",
                    "public-transport": "Kollektivtrafik",
                    rail: "Tåg",
                    "rail-with-route-number": "Tåg {routeNumber} {headSign}",
                    rain: "Regn",
                    "rain-classification": "Klassificering av regn",
                    "rainfall-depth": "Nederbörd",
                    "rainfall-intensity": "Regnintensitet",
                    "no-rain": "Torrväder",
                    "has-rain": "Regn",
                    "light-snow": "Lätt snöfall",
                    "moderate-snow": "Måttligt snöfall",
                    "heavy-snow": "Kraftigt snöfall",
                    realtime: "Realtid",
                    "realtime-maintenance-vehicles": "Vägunderhåll i realtid",
                    "realtime-matching": "Realtidsintegration",
                    "rent-cycle-at": "Hyr en cykel från stationen {station}",
                    "required-ticket": "Biljett som behövs under resan",
                    "return-cycle-to": "Returnera cykeln till stationen {station}",
                    "reverse-route": "Omvänd färdriktning",
                    "right-now": "Just nu",
                    "road-condition": "Väglag",
                    "road-condition-air": "Luft",
                    "road-condition-condition": "Väglag",
                    "road-condition-now": "Nu",
                    "road-condition-road": "Väg",
                    "road-condition-time": "Tid",
                    "road-condition-weather": "Väder",
                    "road-condition-wind": "Vind",
                    "road-info": "Väginformation",
                    "road-signs": "Variabla vägmärker",
                    "road-sign": "Variabel vägmärke",
                    "road-sign-type": "Type",
                    "road-sign-display-value": "Display value",
                    "road-sign-effective-from": "Effective from",
                    "road-sign-SPEEDLIMIT": "Hastighetsbegränsning",
                    "road-sign-WARNING": "Varning",
                    "road-sign-INFORMATION": "Information",
                    "road-sign-warning-144": "Slirig körbana",
                    "road-sign-warning-165": "Trafikljus",
                    "road-sign-warning-189": "Annan fara",
                    "road-sign-warning-133": "Köbildning",
                    "road-sign-warning-142": "Vägarbete",
                    "road-sign-warning-183": "Sidvind",
                    "road-sign-warning-141": "Ojämn väg",
                    "road-sign-warning-143": "Stenskott",
                    "road-sign-warning-147": "Farlig vägkant",
                    "road-sign-warning-154": "Skidspår",
                    "road-sign-warning-155": "Älgar",
                    "road-sign-warning-156": "Renar",
                    "road-temperature": "Vägtemperatur",
                    roadwork: "Vägarbete",
                    roadworks: "Vägarbeten",
                    route: "Linje",
                    "route-custom-settings": "Mina inställningar",
                    "route-default": "Standardrutt",
                    "route-destination-arrives": "Ankomst / Ändhållplats",
                    "route-fastest": "Snabb rutt",
                    "route-from-here": "Sök rutt härifrån",
                    "route-guide": "Linjeguide",
                    "route-here": "Sök rutt hit",
                    "route-here-button": "Kopiera rutten hit",
                    "route-least-elevation-changes": "Undvik höjdskillnader",
                    "route-least-transfers": "Minsta överföringar",
                    "route-least-walking": "Minsta gången",
                    "route-not-possible": 'Tyvärr är din rutt inte möjlig. Tekniskt fel: "{error}"',
                    "route-page.description": "Linje {shortName} - {longName}",
                    "route-page.title": "Linje {shortName}",
                    "route-page.title-short": "Linje",
                    "route-prefer-greenways": "Föredra lättrafikleder",
                    "route-prefer-illuminated": "Föredra upplysta rutter",
                    "route-prefer-paved": "Föredra belagda rutter",
                    "route-prefer-walking-routes": "Föredra gångvägar",
                    "route-prefer-winter-maintenance": "Föredra rutter med vinterunderhåll",
                    "route-preferences": "Ruttpreferenser",
                    "route-public-transport-with-bicycle": "Med cykel och kollektivtrafik",
                    "route-saved-settings": "Sparade inställningar",
                    "route-stop-or-keyword": "Linje eller hållplats",
                    routes: "Linjer",
                    run: "Springande",
                    save: "Spara",
                    search: "Sök",
                    "search-destination": "Sök destination, linje eller hållplats",
                    "search-destination-results-but-no-search": "Se resultaten under fliken Destination",
                    "search-no-results": "Inga sökresultat",
                    "search-origin": "Sök avfärdsplats, linje eller hållplats",
                    "search-position": "Sök position",
                    "search-search-results-but-no-destination": "Se resultaten under fliken Linje eller hållplats",
                    "searching-position": "Söker position...",
                    "select-map-layers-header": "Vad vill du visa på kartan?",
                    "select-position": "Välj din position bland tidigare sökningar",
                    send: "Skicka",
                    settings: "Anpassa",
                    "settings-label-change": "Anpassa sökning",
                    "settings-loadbutton": "Ladda inställningarna",
                    "settings-loaded": "Inställningarna laddades!",
                    "settings-reset": "Återställ inställningarna",
                    "settings-savebutton": "Spara inställningarna",
                    "settings-saved": "Inställningarna sparades!",
                    share: "Dela resan",
                    "show-departures": "Visa avgångarna",
                    "show-information-as-list": "Visa informationen som en lista",
                    "show-more": "Visa flera",
                    "show-realtime-on-map": "Visa fordonen på kartan",
                    "show-routes": "Visa linjer",
                    "skip-positioning": "Hoppa över",
                    slow: "Långsam",
                    "snow-depth": "Snödjup",
                    "specify-location": "Ange en plats",
                    "speed-limit": "Hastighetsbegränsning",
                    "splash-choose": "Ange en avfärdsplats",
                    "splash-locating": "Söker din plats...",
                    "splash-or-choose": "eller välj en avfärdsplats",
                    "splash-please-allow-positioning": "Tjänsten fungerar bäst om du delar din plats.",
                    "splash-use-positioning": "Använd min plats",
                    "splash-you-can-also": "alternativt",
                    stop: "Hållplats",
                    "stop-number": "Hållplatsnummer",
                    "stop-page.description": "Hållplats {name} - {code}",
                    "stop-page.title": "Hållplats {name} - {code}",
                    "stop-page.title-short": "Hållplats",
                    stops: "Hållplatser",
                    "street-mode-bicycle": "Cykel",
                    "street-mode-car": "Bil",
                    "street-mode-car_park": "Infarts­parkering",
                    "street-mode-public_transport": "Kollektiv­trafik",
                    "street-mode-walk": "Gång",
                    subway: "Metro",
                    "subway-with-route-number": "Metro {routeNumber} {headSign}",
                    "summary-page.description": "{from} - {to}",
                    "summary-page.title": "Ruttförslag",
                    "terminal-page.description": "Terminal {name}",
                    "terminal-page.title": "Terminal {name}",
                    "terminal-page.title-short": "Terminal",
                    "terms-of-use": "Användarvillkor",
                    "ticket-and-price-info": "Biljett- och prisinformation",
                    "ticket-single-adult": "Vuxen",
                    "ticket-type-none": "Ingen resezonsbegränsning",
                    tickets: "Biljetter",
                    time: "Tid",
                    timetable: "Tidtabell",
                    "to-city": "Till centrum",
                    "to-stop": "Avstånd",
                    today: "I dag",
                    tomorrow: "I morgon",
                    "traffic-announcement-additional-info": "Specifikation",
                    "traffic-announcement-additional-info-at": "Uppvärmning med eld",
                    "traffic-announcement-additional-info-fd": "Följ vägledning",
                    "traffic-announcement-additional-info-pd": "Polisen dirigerar trafiken",
                    "traffic-announcement-class-acc": "Onnettomuus",
                    "traffic-announcement-class-act": "Yleisö- tai muut tapahtumat",
                    "traffic-announcement-class-equ": "Tienvarsilaitteiden toiminta",
                    "traffic-announcement-class-fos": "Näkyvyys- ja ympäristöolosuhteet",
                    "traffic-announcement-class-krk": "Kelirikko",
                    "traffic-announcement-class-los": "Liikennetilanne",
                    "traffic-announcement-class-mhz": "Vaaraa aiheuttava ajoneuvo tai kuljetus tiellä",
                    "traffic-announcement-class-ohz": "Este esine tai eläin tiellä",
                    "traffic-announcement-class-res": "Liikennerajoitukset",
                    "traffic-announcement-class-rmt": "Tietyö",
                    "traffic-announcement-class-shz": "Ajo-olot liukkaus kelitilanne",
                    "traffic-announcement-duration": "Beräknad varaktighet",
                    "traffic-announcement-duration-gte_180_lte_360": "3 - 6 timmar",
                    "traffic-announcement-duration-gte_30_lte_60": "30 - 60 minuter",
                    "traffic-announcement-duration-gte_360": "Över 6 timmar",
                    "traffic-announcement-duration-gte_60_lte_180": "1 - 3 timmar",
                    "traffic-announcement-duration-lte_30": "Under 30 minuter",
                    "traffic-announcement-modes-of-transport": "Trafikformat",
                    "traffic-announcement-modes-of-transport-bicycle": "Cyckel",
                    "traffic-announcement-modes-of-transport-car": "Bil",
                    "traffic-announcement-modes-of-transport-pedestrian": "Fotgängare",
                    "traffic-announcement-modes-of-transport-public_transport": "Kollektivtrafik",
                    "traffic-announcement-oversize-load": "Specialtransport",
                    "traffic-announcement-oversize-load-definition": "(B. x H. x L. i meter)",
                    "traffic-announcement-severity": "Påverkan",
                    "traffic-announcement-severity-high": "Påverkar trafiken betydligt",
                    "traffic-announcement-severity-low": "Påverkar ej trafiken",
                    "traffic-announcement-severity-medium": "Påverkar trafiken",
                    "traffic-announcement-subclass-abl": "Erikoiskuljetus",
                    "traffic-announcement-subclass-acb": "Onnettomuus, jossa mukana linja-auto",
                    "traffic-announcement-subclass-ach": "Onnettomuus, jossa mukana raskas ajoneuvo",
                    "traffic-announcement-subclass-aci": "Onnettomuus",
                    "traffic-announcement-subclass-acl": "Onnettomuuspaikan raivaus käynnissä",
                    "traffic-announcement-subclass-acm": "Usean ajoneuvon onnettomuus",
                    "traffic-announcement-subclass-acz": "Onnettomuus, jossa mukana vaarallisia aineita",
                    "traffic-announcement-subclass-ali": "Alikulkukäytävän rakentaminen",
                    "traffic-announcement-subclass-anh": "Poroja tiel",
                    "traffic-announcement-subclass-anl": "Hirviä tiellä",
                    "traffic-announcement-subclass-anm": "Eläimiä tiellä",
                    "traffic-announcement-subclass-aol": "Raskas ajoneuvo kaatunut tielle",
                    "traffic-announcement-subclass-aqd": "Vesiliirron vaara",
                    "traffic-announcement-subclass-asp": "Ulosajo",
                    "traffic-announcement-subclass-bkd": "Rikkoutunut ajoneuvo tiellä",
                    "traffic-announcement-subclass-bli": "Lumimyrsky",
                    "traffic-announcement-subclass-bls": "Pöllyävää lunta",
                    "traffic-announcement-subclass-brc": "Silta suljettu liikenteeltä",
                    "traffic-announcement-subclass-ctr": "Liikenne ohjataan kaksisuuntaisena toiselle ajoradalle",
                    "traffic-announcement-subclass-dcd": "Huono ajokeli",
                    "traffic-announcement-subclass-dcn": "Ajo-olot parantuneet",
                    "traffic-announcement-subclass-do": "Kiertotie käytössä",
                    "traffic-announcement-subclass-efa": "Messut",
                    "traffic-announcement-subclass-ens": "ENSITIEDOTE LIIKENNEONNETTOMUUDESTA",
                    "traffic-announcement-subclass-epr": "Kulkue",
                    "traffic-announcement-subclass-esp": "Urheilutapahtuma",
                    "traffic-announcement-subclass-evd": "Mielenosoitus",
                    "traffic-announcement-subclass-evm": "Yleisötapahtuma",
                    "traffic-announcement-subclass-fig": "Maastopalo",
                    "traffic-announcement-subclass-fir": "Tulipalo",
                    "traffic-announcement-subclass-fld": "Tulva",
                    "traffic-announcement-subclass-flt": "Puu kaatunut tielle",
                    "traffic-announcement-subclass-fod": "Sakeaa sumua",
                    "traffic-announcement-subclass-fof": "Jäätävää sumua",
                    "traffic-announcement-subclass-fog": "Sumua",
                    "traffic-announcement-subclass-fop": "Paikoitellen sumua",
                    "traffic-announcement-subclass-fpc": "Sähköjohtoja pudonnut tielle",
                    "traffic-announcement-subclass-fue": "Öljyä tiellä",
                    "traffic-announcement-subclass-gal": "Kova tuuli",
                    "traffic-announcement-subclass-hai": "Raekuuro",
                    "traffic-announcement-subclass-hav": "Hirviaita vaurioitunut",
                    "traffic-announcement-subclass-hbd": "Rikkoutunut raskas ajoneuvo tiellä",
                    "traffic-announcement-subclass-ibu": "Tiet jäätymässä",
                    "traffic-announcement-subclass-icp": "Paikoin liukasta",
                    "traffic-announcement-subclass-jjm": "Kevyen liikenteen väylät jäisiä ja märkiä",
                    "traffic-announcement-subclass-jjt": "Kevyen liikenteen väylät jäätymäs",
                    "traffic-announcement-subclass-jli": "Kevyen liikenteen väylät liukkaita",
                    "traffic-announcement-subclass-jlu": "Kevyen liikenteen väylillä lunta",
                    "traffic-announcement-subclass-jpl": "Kevyen liikenteen väylät paikoin liukkaita",
                    "traffic-announcement-subclass-jyr": "Päällysteen jyrsintätyö",
                    "traffic-announcement-subclass-kai": "Sadevesikaivojen puhdistustyö",
                    "traffic-announcement-subclass-kav": "Kaidevaurio",
                    "traffic-announcement-subclass-kdt": "Kaidetyö",
                    "traffic-announcement-subclass-kkp": "Kaivon kansi rikki/poissa paikaltaan",
                    "traffic-announcement-subclass-klv": "Kevyenliikenteen väylän rakentaminen",
                    "traffic-announcement-subclass-kri": "Kelirikko",
                    "traffic-announcement-subclass-kuo": "Kuoppia tiessä",
                    "traffic-announcement-subclass-lc1": "Yksi ajokaista suljettu liikenteeltä",
                    "traffic-announcement-subclass-lc2": "Kaksi ajokaistaa suljettu liikenteeltä",
                    "traffic-announcement-subclass-lcs": "Ajokaistoja on suljettu liikenteeltä",
                    "traffic-announcement-subclass-lij": "Liittymän parannustyö",
                    "traffic-announcement-subclass-lin": "Ajokaista ajoittain suljettu",
                    "traffic-announcement-subclass-lo1": "Vain yksi ajokaista käytössä",
                    "traffic-announcement-subclass-lo2": "Vain kaksi kaistaa käytössä",
                    "traffic-announcement-subclass-loh": "Tienvarsilaitteiden huoltotyö",
                    "traffic-announcement-subclass-lpa": "Liikenne pysäytetään ajoittain",
                    "traffic-announcement-subclass-ls1": "Liikenne seisoo",
                    "traffic-announcement-subclass-ls2": "Liikenne pysähtelee",
                    "traffic-announcement-subclass-ls3": "Liikenne hidasta",
                    "traffic-announcement-subclass-ls4": "Liikenne jonoutunut",
                    "traffic-announcement-subclass-ls6": "Pitkiä jonoja",
                    "traffic-announcement-subclass-lsl": "Tie sortunut",
                    "traffic-announcement-subclass-lso": "Liikenne saattaa ruuhkautua",
                    "traffic-announcement-subclass-lsr": "Liikenne saattaa ruuhkautua",
                    "traffic-announcement-subclass-lvt": "Liikennevalotyö",
                    "traffic-announcement-subclass-mar": "Maratonjuoksu",
                    "traffic-announcement-subclass-mil": "Sotilassaattue",
                    "traffic-announcement-subclass-nit": "Niittotyö",
                    "traffic-announcement-subclass-nls": "Ajokaistoja kavennettu",
                    "traffic-announcement-subclass-ohx": "Liikennettä vaarantava este tiellä",
                    "traffic-announcement-subclass-oil": "Polttoainetta tiellä",
                    "traffic-announcement-subclass-pav": "Päällystevaurio",
                    "traffic-announcement-subclass-pel": "Pelastusharjoitus",
                    "traffic-announcement-subclass-pki": "POLIISIN KELI-ILMOITUS",
                    "traffic-announcement-subclass-pys": "Pysäkkiin liittyvä ilmoitus",
                    "traffic-announcement-subclass-rad": "Kiertotieopastus",
                    "traffic-announcement-subclass-raf": "Jäätävää sadetta",
                    "traffic-announcement-subclass-rai": "Vesisade",
                    "traffic-announcement-subclass-raj": "Raskas ajoneuvo jumissa",
                    "traffic-announcement-subclass-rba": "Liikenne pysäytetään",
                    "traffic-announcement-subclass-rbi": "Mustaa jäätä",
                    "traffic-announcement-subclass-rbl": "Räjäytystyö",
                    "traffic-announcement-subclass-rbm": "Siltatyö",
                    "traffic-announcement-subclass-rca": "Toinen ajorata suljettu liikenteeltä",
                    "traffic-announcement-subclass-rcd": "Tie suljettu liikenteeltä",
                    "traffic-announcement-subclass-rcw": "Tienrakennustyö",
                    "traffic-announcement-subclass-reb": "Liittymisramppi tukossa",
                    "traffic-announcement-subclass-rec": "Ramppi suljettu liikenteeltä",
                    "traffic-announcement-subclass-ret": "Poikkeavat kaistajärjestelyt",
                    "traffic-announcement-subclass-rew": "Raivaus- ja korjaustöitä",
                    "traffic-announcement-subclass-ric": "Tiet ovat jäisiä",
                    "traffic-announcement-subclass-ril": "Risteykset liukkaita",
                    "traffic-announcement-subclass-rin": "Tie ajoittain suljettu liikenteeltä",
                    "traffic-announcement-subclass-rmk": "Kunnossapito- ja hoitotyöt",
                    "traffic-announcement-subclass-rmv": "Työmaa-ajoa liikenteen seassa",
                    "traffic-announcement-subclass-rmw": "Tiemerkintätyö",
                    "traffic-announcement-subclass-rnl": "Muuttuneet liikennejärjestelyt",
                    "traffic-announcement-subclass-rno": "Rekan nosto",
                    "traffic-announcement-subclass-rpc": "Tienpinta huonossa kunnossa",
                    "traffic-announcement-subclass-rrw": "Tietyö keskikaistalla",
                    "traffic-announcement-subclass-rsl": "Tiet ovat liukkaita",
                    "traffic-announcement-subclass-rwi": "Tiet jäisiä ja märkiä",
                    "traffic-announcement-subclass-rwk": "Tietyö",
                    "traffic-announcement-subclass-rwl": "Pitkäaikainen tienparannustyö",
                    "traffic-announcement-subclass-rwm": "Tienparannustyö",
                    "traffic-announcement-subclass-rwr": "Päällystystyö",
                    "traffic-announcement-subclass-rxb": "Poistumisramppi tukossa",
                    "traffic-announcement-subclass-sat": "Kohtaava liikenne, ajo vuorotellen ohjauksen mukaan",
                    "traffic-announcement-subclass-sav": "Savea tiellä",
                    "traffic-announcement-subclass-sfh": "Sakea lumisade",
                    "traffic-announcement-subclass-sfl": "Lumisade",
                    "traffic-announcement-subclass-shl": "Kuorma levinnyt tielle",
                    "traffic-announcement-subclass-sjt": "Sähköjohtotyö",
                    "traffic-announcement-subclass-slt": "Räntäsade",
                    "traffic-announcement-subclass-slu": "Lumisohjoa",
                    "traffic-announcement-subclass-smo": "Savu haittaa näkyvyyttä",
                    "traffic-announcement-subclass-smv": "Nestettä vuotanut liikkuvasta ajoneuvosta",
                    "traffic-announcement-subclass-snp": "Lumi- tai jääpolanne",
                    "traffic-announcement-subclass-snr": "Lumikinoksia",
                    "traffic-announcement-subclass-snw": "Kaistaopasteet eivät toimi",
                    "traffic-announcement-subclass-sok": "Sivuojan kaivuutyö",
                    "traffic-announcement-subclass-son": "SUURONNETTOMUUS",
                    "traffic-announcement-subclass-spk": "Sirotepaikkaus, irtokiviä",
                    "traffic-announcement-subclass-spy": "Roiskevesi haittaa näkyvyyttä",
                    "traffic-announcement-subclass-sro": "Lunta tiellä",
                    "traffic-announcement-subclass-std": "Myrskyvaurioita",
                    "traffic-announcement-subclass-stk": "Soratien kunto huono",
                    "traffic-announcement-subclass-stm": "Myrsky",
                    "traffic-announcement-subclass-taa": "Toinen ajokaista avattu liikenteelle",
                    "traffic-announcement-subclass-tal": "Akselipainorajoitus",
                    "traffic-announcement-subclass-tav": "Tie on avattu liikenteelle",
                    "traffic-announcement-subclass-tbu": "Liikenne ruuhkautuu",
                    "traffic-announcement-subclass-tcn": "Liikenneruuhka",
                    "traffic-announcement-subclass-tcx": "Liikenneruuhka ohi",
                    "traffic-announcement-subclass-tea": "Liikenne on palautumassa normaaliksi",
                    "traffic-announcement-subclass-tgw": "Painorajoitus asetettu",
                    "traffic-announcement-subclass-tlo": "Liikennevalot eivät toimi",
                    "traffic-announcement-subclass-tlt": "Tilapäinen liikennevalo-ohjaus",
                    "traffic-announcement-subclass-tmt": "Tutkimus- ja mittaustyö",
                    "traffic-announcement-subclass-tnr": "Tilapäinen nopeusrajoitus",
                    "traffic-announcement-subclass-tol": "Tie on liukas",
                    "traffic-announcement-subclass-tri": "Tasoristeystyö",
                    "traffic-announcement-subclass-tuc": "Tunneli suljettu liikenteeltä",
                    "traffic-announcement-subclass-tvl": "Tievalaistuksen lamppuja pimeänä",
                    "traffic-announcement-subclass-tvm": "Tievalaistus vioittunut myrskyssä",
                    "traffic-announcement-subclass-tvo": "Tievalaistus vioittunut onnettomuudessa",
                    "traffic-announcement-subclass-tvt": "Tievalaistustyö",
                    "traffic-announcement-subclass-vet": "Vettä tiellä",
                    "traffic-announcement-subclass-vfr": "Palava ajoneuvo",
                    "traffic-announcement-subclass-vir": "Näkyvyys heikentynyt",
                    "traffic-announcement-subclass-vka": "Järjestelmän vikatila",
                    "traffic-announcement-subclass-vmt": "Viimeistelytyö",
                    "traffic-announcement-subclass-vnw": "Muuttuvat opasteet eivät toimi",
                    "traffic-announcement-subclass-vrt": "Vesakon raivaus",
                    "traffic-announcement-subclass-vwc": "Ajoneuvo väärällä ajoradalla",
                    "traffic-announcement-subclass-wbc": "Kaapelityö",
                    "traffic-announcement-subclass-wbs": "Kunnallistekninen työ",
                    "traffic-announcement-subclass-wic": "Kova sivutuuli",
                    "traffic-announcement-subclass-wig": "Puuskittainen tuuli",
                    "traffic-announcement-subclass-yak": "Työkohteessa vain yksi ajokaista käytössä",
                    "traffic-announcement-temporary-speed-limit": "Tillfällig hastighetsbegränsning",
                    "traffic-announcement-traffic-direction": "Riktning",
                    "traffic-announcement-traffic-direction-both": "Båda hållen",
                    "traffic-announcement-traffic-direction-negative": "Motgående riktning",
                    "traffic-announcement-traffic-direction-positive": "Vald riktning",
                    "traffic-announcement-vehicle-size-limit": "Fordonsbegränsning",
                    "traffic-announcement-vehicle-size-limit-definition": "(B. x H. x L. x V. i meter och ton)",
                    "traffic-camera": "Trafikkamera",
                    "traffic-camera-no-recent-images": "Inga nyligen tagna bilder",
                    "traffic-count": "Trafikmängd",
                    "traffic-direction": "Riktning",
                    "traffic-flow": "Trafikflöde",
                    "traffic-flow-heavy": "Rusning",
                    "traffic-flow-medium": "Långsam",
                    "traffic-flow-normal": "Normal",
                    "traffic-flow-unknown": "Kunde ej definieras",
                    "traffic-info": "Trafikinformation",
                    "traffic-monitoring": "Trafikövervakning",
                    "traffic-restriction": "Trafikrestriktion",
                    tram: "Spårvagn",
                    "tram-with-route-number": "Spårvagn {routeNumber} {headSign}",
                    transfers: "Antal byten",
                    "transfers-allowed": "Flera byten",
                    "transfers-margin": "Bytestid minst",
                    "trip-co2-emissions": "Resans CO2-utsläpp",
                    "trip-information": "Visa avgång",
                    "trip-page.description": "Linje {shortName} - {longName}",
                    "trip-page.title": "Linje {shortName}",
                    "try-again": "Försök igen",
                    unpreferred: "Undvik rutter",
                    "use-citybike": "Ta i bruk",
                    "use-national-service": "Du kan också använda national tjänsten:",
                    "use-own-position": "Använd min position",
                    "using-modes": "Jag vill åka",
                    "very-likely": "Väldigt sannolikt",
                    "very-unlikely": "Väldigt osannolikt",
                    "via-leg-stop-duration": "Mellanstopp {stayDuration}",
                    "via-point": "Stoppets längd",
                    "viapoint-remove": "Ta bort stoppet",
                    "viapoint-slack-amount": "Stoppets varaktighet",
                    "view-route": "Visa linje",
                    wait: "Vänta",
                    "wait-amount-of-time": "Vänta {duration}",
                    walk: "gång",
                    "walk-distance-duration": "Gå {distance} ({duration})",
                    walking: "Gång",
                    "walking-speed": "Promenadhastighet",
                    "warning-call-agency": "Trafikeras enligt behov: {routeName}, som bör beställas på förhand.",
                    "warning-call-agency-no-route": "Trafikeras enligt behov som bör beställas på förhand.",
                    "weather-at-destination": "Vädret på destinationen",
                    "weather-stations": "Väderstationer",
                    weekly: "Varje vecka",
                    "wind-direction": "Vindriktning",
                    "wind-speed": "Vindhastighet",
                    north: "Nord",
                    northeast: "Nordost",
                    east: "Ost",
                    southeast: "Sydost",
                    south: "Syd",
                    southwest: "Sydväst",
                    west: "Väst",
                    northwest: "Nordväst",
                    yesterday: "I går",
                    "your-favourites": "Favoriter",
                    zones: "Biljettzoner"
                }
            }
        },
        "./app/util/authUtils.js": function(e, t, a) {
            "use strict";

            function n(e, t) {
                return t + "?digitransit-subscription-key=" + e.SUBSCRIPTION_KEY
            }
            a.d(t, "a", (function() {
                return n
            }))
        },
        "./app/util/bicycleRouteUtils.js": function(e, t, a) {
            "use strict";
            a.d(t, "a", (function() {
                return r
            })), a.d(t, "b", (function() {
                return s
            }));
            var n = a("./node_modules/@babel/runtime/helpers/esm/extends.js"),
                i = a("./app/constants.js"),
                r = function(e, t) {
                    var a = {
                        bicycleRoutesBaana: "BAANA",
                        bicycleRoutesBrand: "BRAND",
                        bicycleRoutesMainRegional: "MAIN_REGIONAL",
                        bicycleRouteTypes: "TYPES"
                    } [e];
                    return a ? "" + a + (t ? "-" + t : "") : null
                },
                o = function(e, t) {
                    return void 0 === i.c[e] && void 0 !== i.c[t] ? 1 : void 0 !== i.c[e] && void 0 === i.c[t] ? -1 : void 0 === i.c[e] && void 0 === i.c[t] ? 0 : i.c[e] - i.c[t]
                },
                s = function(e) {
                    return Object.keys(e).sort(o).map((function(t) {
                        return Object(n.a)({
                            type: t
                        }, e[t])
                    }))
                }
        },
        "./app/util/browser.js": function(e, t, a) {
            "use strict";
            a.d(t, "b", (function() {
                return n
            })), a.d(t, "c", (function() {
                return i
            })), a.d(t, "e", (function() {
                return r
            })), a.d(t, "k", (function() {
                return o
            })), a.d(t, "i", (function() {
                return s
            })), a.d(t, "d", (function() {
                return l
            })), a.d(t, "j", (function() {
                return c
            })), a.d(t, "f", (function() {
                return u
            })), a.d(t, "g", (function() {
                return d
            })), a.d(t, "h", (function() {
                return p
            })), a.d(t, "a", (function() {
                return m
            }));
            var n = function() {
                    return "undefined" != typeof window && null !== window
                },
                i = n(),
                r = i && navigator.standalone,
                o = i && null != navigator.userAgent.match(/Windows Phone/),
                s = i && -1 !== window.location.search.indexOf("enmock"),
                l = i && -1 !== window.location.search.indexOf("debugTiles"),
                c = i && null != navigator.userAgent.match(/Mobile/),
                u = (i && navigator.userAgent.match(/Firefox/), i && navigator.userAgent.match(/Android/), i && navigator.userAgent.match(/Chrome/), i && navigator.userAgent.match(/SamsungBrowser/), i && null != navigator.userAgent.match(/Trident/)),
                d = function(e) {
                    return !(!e.imperialEnabled || "en-us" !== String(navigator.userLanguage).toLowerCase() && "en-us" !== String(navigator.language).toLowerCase())
                },
                p = function(e) {
                    var t = e && (e.key || e.which || e.keyCode) || "";
                    return !(!t || ![13, " ", "Spacebar"].concat([32, "Enter"]).includes(t)) && (e.preventDefault(), !0)
                },
                m = function(e, t) {
                    var a = void 0 === t ? {} : t,
                        n = a.minWidth,
                        i = void 0 === n ? 291 : n,
                        r = a.maxWidth,
                        o = void 0 === r ? 600 : r;
                    return void 0 !== e ? .5 * e.innerWidth > i ? Math.min(o, .5 * e.innerWidth) : "100%" : i
                }
        },
        "./app/util/citybikes.js": function(e, t, a) {
            "use strict";
            a.d(t, "c", (function() {
                return n
            })), a.d(t, "b", (function() {
                return i
            })), a.d(t, "a", (function() {
                return r
            }));
            var n = "Station on",
                i = "Station off",
                r = "Station closed"
        },
        "./app/util/events.js": function(e, t, a) {
            "use strict";
            var n = a("./node_modules/node-libs-browser/node_modules/events/events.js"),
                i = new n.EventEmitter;
            t.a = i
        },
        "./app/util/geo-utils.js": function(e, t, a) {
            "use strict";
            a.d(t, "e", (function() {
                return c
            })), a.d(t, "f", (function() {
                return u
            })), a.d(t, "d", (function() {
                return d
            })), a.d(t, "c", (function() {
                return p
            })), a.d(t, "b", (function() {
                return m
            })), a.d(t, "h", (function() {
                return f
            })), a.d(t, "g", (function() {
                return h
            })), a.d(t, "a", (function() {
                return b
            })), a.d(t, "i", (function() {
                return j
            }));
            var n = a("./node_modules/@babel/runtime/helpers/esm/extends.js"),
                i = a("./node_modules/lodash-es/unzip.js"),
                r = a("./app/util/browser.js");

            function o(e) {
                return e * (Math.PI / 180)
            }

            function s(e) {
                return e * (180 / Math.PI)
            }
            var l = 6371e3;

            function c(e, t) {
                var a = Math.PI / 180,
                    n = e.lat * a,
                    i = t.lat * a,
                    r = Math.sin((t.lat - e.lat) * a / 2),
                    o = Math.sin((t.lng - e.lng) * a / 2),
                    s = r * r + Math.cos(n) * Math.cos(i) * o * o,
                    c = 2 * Math.atan2(Math.sqrt(s), Math.sqrt(1 - s));
                return l * c
            }

            function u(e, t, a) {
                var n = {
                        lat: e,
                        lng: t
                    },
                    i = Number.MAX_VALUE,
                    r = null;
                return a.forEach((function(e) {
                    var t = {
                            lat: e.lat,
                            lng: e.lon
                        },
                        a = c(n, t);
                    a < i && (i = a, r = e)
                })), {
                    stop: r,
                    distance: i
                }
            }

            function d(e) {
                var t = 3.2808399 * e;
                return t < 100 ? 10 * Math.round(t / 10) + " ft" : t < 1e3 ? 50 * Math.round(t / 50) + " ft" : Math.round(t / 528) / 10 + " mi"
            }

            function p(e, t) {
                return Object(r.g)(t) ? d(e) : e < 100 ? 10 * Math.round(e / 10) + " m" : e < 1e3 ? 50 * Math.round(e / 50) + " m" : e < 1e4 ? 100 * Math.round(e / 100) / 1e3 + " km" : e < 1e5 ? Math.round(e / 1e3) + " km" : 10 * Math.round(e / 1e4) + " km"
            }

            function m(e) {
                if (!e || !e[0]) return null;
                var t = Object(i.a)(e.filter((function(e) {
                        var t = e[0],
                            a = e[1];
                        return !Number.isNaN(t) && !Number.isNaN(a)
                    }))),
                    a = t[0],
                    n = t[1],
                    r = Math.min.apply(Math, a),
                    o = Math.min.apply(Math, n),
                    s = Math.max.apply(Math, a),
                    l = Math.max.apply(Math, n),
                    c = Math.max(0, .002 - (s - r)),
                    u = Math.max(0, .002 - (l - o));
                return [
                    [r - c / 2, o - u / 2],
                    [s + c / 2, l + u / 2]
                ]
            }

            function f(e, t, a) {
                return e[0][0] <= t && e[0][1] <= a && e[1][0] >= t && e[1][1] >= a
            }

            function g(e) {
                for (var t = 0, a = 0, n = .5 * function(e) {
                        for (var t = 0, a = 0; a < e.length - 1; ++a) {
                            var n = e[a + 1][0] - e[a][0],
                                i = e[a + 1][1] - e[a][1];
                            t += Math.sqrt(n * n + i * i)
                        }
                        return t
                    }(e), i = 0; i < e.length - 1; ++i) {
                    var r = e[i + 1][0] - e[i][0],
                        o = e[i + 1][1] - e[i][1];
                    if ((a += Math.sqrt(r * r + o * o)) >= n) {
                        t = i;
                        break
                    }
                }
                return t
            }

            function h(e) {
                if (e.length <= 0) return {
                    lat: 0,
                    lon: 0
                };
                if (1 === e.length) return {
                    lat: e[0][0],
                    lon: e[0][1]
                };
                var t = Math.max(1, g(e));
                return {
                    lat: e[t - 1][0] + .5 * (e[t][0] - e[t - 1][0]),
                    lon: e[t - 1][1] + .5 * (e[t][1] - e[t - 1][1])
                }
            }
            var b = function() {
                function e(e) {
                    this.pts = e
                }
                var t = e.prototype;
                return t.area = function() {
                    for (var e, t, a = 0, n = this.pts, i = n.length, r = i - 1, o = 0; o < i; r = o++) e = n[o], t = n[r], a += e.x * t.y, a -= e.y * t.x;
                    return a /= 2, a
                }, t.centroid = function() {
                    for (var e, t, a, n = this.pts, i = n.length, r = 0, o = 0, s = i - 1, l = 0; l < i; s = l++) t = n[l], a = n[s], e = t.x * a.y - a.x * t.y, r += (t.x + a.x) * e, o += (t.y + a.y) * e;
                    return {
                        x: r / (e = 6 * this.area()),
                        y: o / e
                    }
                }, e
            }();

            function y(e) {
                var t = e.a,
                    a = e.f,
                    i = Object(n.a)({}, e);
                i.b = t - i.a * i.f;
                var r = a / (2 - a);
                return i.n = r, i.A1 = t / (1 + r) * (1 + Math.pow(r, 2) / 4 + Math.pow(r, 4) / 64), i.e = Math.sqrt(2 * a - Math.pow(a, 2)), i.h1 = .5 * r - 2 / 3 * Math.pow(r, 2) + 37 / 96 * Math.pow(r, 3) - 1 / 360 * Math.pow(r, 4), i.h2 = 1 / 48 * Math.pow(r, 2) + 1 / 15 * Math.pow(r, 3) - 437 / 1440 * Math.pow(r, 4), i.h3 = 17 / 480 * Math.pow(r, 3) - 37 / 840 * Math.pow(r, 4), i.h4 = 4397 / 161280 * Math.pow(r, 4), i.h1p = .5 * r - 2 / 3 * Math.pow(r, 2) + 5 / 16 * Math.pow(r, 3) + 41 / 180 * Math.pow(r, 4), i.h2p = 13 / 48 * Math.pow(r, 2) - .6 * Math.pow(r, 3) + 557 / 1440 * Math.pow(r, 4), i.h3p = 61 / 240 * Math.pow(r, 3) - 103 / 140 * Math.pow(r, 4), i.h4p = 49561 / 161280 * Math.pow(r, 4), i
            }
            var v = y({
                    a: 6378388,
                    f: 1 / 297,
                    k0: 1
                }),
                k = y({
                    a: 6378137,
                    b: 6356752.314245,
                    f: 1 / 298.257223563,
                    k0: .9996
                });

            function j(e) {
                var t = o(24),
                    a = v.A1,
                    n = v.k0,
                    i = v.e,
                    r = v.h1,
                    l = v.h2,
                    c = v.h3,
                    u = v.h4,
                    d = parseFloat(e[0]),
                    p = parseFloat(e[1]) / (a * n),
                    m = (d - 25e5) / (a * n),
                    f = p - r * Math.sin(2 * p) * Math.cosh(2 * m) - l * Math.sin(4 * p) * Math.cosh(4 * m) - c * Math.sin(6 * p) * Math.cosh(6 * m) - u * Math.sin(8 * p) * Math.cosh(8 * m),
                    g = m - r * Math.cos(2 * p) * Math.sinh(2 * m) - l * Math.cos(4 * p) * Math.sinh(4 * m) - c * Math.cos(6 * p) * Math.sinh(6 * m) - u * Math.cos(8 * p) * Math.sinh(8 * m),
                    h = Math.asin(Math.sin(f) / Math.cosh(g)),
                    b = Math.asinh(Math.tan(h)),
                    y = b + i * Math.atanh(i * Math.tanh(b));
                y = b + i * Math.atanh(i * Math.tanh(y)), y = b + i * Math.atanh(i * Math.tanh(y)), y = b + i * Math.atanh(i * Math.tanh(y));
                for (var j = Math.atan(Math.sinh(y)), S = t + Math.asin(Math.tanh(g) / Math.cos(h)), E = v.a, N = v.e, R = k.a, w = k.e, T = E / Math.sqrt(1 - Math.pow(N * Math.sin(j), 2)), C = T * Math.cos(j) * Math.cos(S), x = T * Math.cos(j) * Math.sin(S), L = T * (1 - Math.pow(N, 2)) * Math.sin(j), O = o(-4.80107 / 3600), M = o(-.34543 / 3600), _ = o(38235e-8), P = 14964e-10, A = (1 + P) * (C + _ * x - M * L) - 96.0617, I = (1 + P) * (x - _ * C + O * L) - 82.4278, D = (1 + P) * (M * C - O * x + L) - 121.7535, F = Math.sqrt(Math.pow(A, 2) + Math.pow(I, 2)), q = Math.pow(w, 2), B = Math.atan(D / ((1 - q) * F)), V = B, U = 1, H = 100; H > 0 && !(U < 1e-12); H--) {
                    var W = R / Math.sqrt(1 - q * Math.pow(Math.sin(V), 2)),
                        K = Math.abs(B) < Math.pi / 4 ? F / Math.cos(V) - W : D / Math.sin(V) - W * (1 - q),
                        G = Math.atan(D / (F * (1 - W * q / (W + K))));
                    U = Math.abs(G - V), V = G
                }
                return [s(Math.atan(I / A)), V = s(V)]
            }
        },
        "./app/util/getIterator.js": function(e, t, a) {
            "use strict";
            a.r(t), t.default = function(e) {
                var t = e[Symbol.iterator];
                if ("function" != typeof t) throw TypeError(e + " is not iterable!");
                if (! function(e) {
                        return "object" == typeof e ? null !== e : "function" == typeof e
                    }(e)) throw TypeError(e + " is not an object!");
                return t.call(e)
            }
        },
        "./app/util/legUtils.js": function(e, t, a) {
            "use strict";
            a.d(t, "j", (function() {
                return r
            })), a.d(t, "i", (function() {
                return o
            })), a.d(t, "e", (function() {
                return l
            })), a.d(t, "a", (function() {
                return c
            })), a.d(t, "k", (function() {
                return m
            })), a.d(t, "b", (function() {
                return f
            })), a.d(t, "h", (function() {
                return g
            })), a.d(t, "f", (function() {
                return h
            })), a.d(t, "g", (function() {
                return b
            })), a.d(t, "c", (function() {
                return y
            })), a.d(t, "d", (function() {
                return v
            }));
            var n = a("./node_modules/lodash-es/cloneDeep.js"),
                i = a("./node_modules/lodash-es/forEach.js");

            function r(e) {
                return function(e, t) {
                    if (e.from.stop && e.to.stop && e.trip) {
                        var a = [e.from.stop.gtfsId, e.to.stop.gtfsId];
                        return e.trip.stoptimes.filter((function(e) {
                            return -1 !== a.indexOf(e.stop.gtfsId)
                        })).filter(t)
                    }
                    return !1
                }(e, (function(e) {
                    return "CALL_AGENCY" === e.pickupType
                })).length > 0
            }

            function o(e) {
                return "CALL_AGENCY" === e.pickupType
            }
            var s = {
                    Bicycle: "BICYCLE",
                    BicycleWalk: "BICYCLE_WALK",
                    CityBike: "CITYBIKE",
                    Walk: "WALK"
                },
                l = function(e) {
                    switch ((("string" == typeof e || e instanceof String ? e : e && e.mode) || "").toUpperCase()) {
                        case s.Bicycle:
                            return s.Bicycle;
                        case s.BicycleWalk:
                            return s.BicycleWalk;
                        case s.CityBike:
                            return s.CityBike;
                        case s.Walk:
                            return s.Walk;
                        default:
                            return
                    }
                },
                c = function(e) {
                    var t, a = null != e[0] && null != e[1] && (l(e[0]) === s.Bicycle && !e[0].rentedBike || l(e[1]) === s.Bicycle && !e[1].rentedBike),
                        r = [];
                    return Object(i.a)(e, (function(e) {
                        if (t) {
                            if (e.intermediatePlace) return r.push(t), void(t = Object(n.a)(e));
                            if (a && (i = e, l(t) === s.Bicycle && l(i) === s.Bicycle)) return t.duration += e.duration, t.distance += e.distance, t.to = e.to, t.endTime = e.endTime, void(t.mode = s.Bicycle);
                            var i;
                            if (e.rentedBike && function(e, t) {
                                    return null != e && !0 === e.rentedBike && null != t && !0 === t.rentedBike
                                }(t, e)) return t.duration += e.duration, t.distance += e.distance, t.to = e.to, t.endTime += e.endTime, void(t.mode = s.CityBike);
                            a && l(t) === s.Walk && (t.mode = s.BicycleWalk), r.push(t), t = Object(n.a)(e), a && l(e) === s.Walk && (t.mode = s.BicycleWalk)
                        } else t = Object(n.a)(e)
                    })), t && r.push(t), r
                },
                u = function(e) {
                    return e.map((function(e) {
                        return e.distance
                    })).reduce((function(e, t) {
                        return (e || 0) + (t || 0)
                    }), 0)
                },
                d = function(e) {
                    return [s.BicycleWalk, s.Walk].includes(l(e))
                },
                p = function(e) {
                    return [s.Bicycle, s.CityBike].includes(l(e))
                },
                m = function(e) {
                    return 1 === e.legs.length && p(e.legs[0])
                },
                f = function(e) {
                    return e.legs.some(p)
                },
                g = function(e) {
                    return u(e.legs.filter(d))
                },
                h = function(e) {
                    return u(e.legs.filter(p))
                },
                b = function(e) {
                    return u(e.legs)
                },
                y = function(e, t) {
                    return e > t.cityBike.fewAvailableCount ? "#64be14" : "#ff9000"
                },
                v = function(e, t) {
                    if (e.rentedBike && e.from && e.from.bikeRentalStation) {
                        var a = (e.from.bikeRentalStation || 0).bikesAvailable;
                        return {
                            badgeFill: y(a, t),
                            badgeText: "" + a
                        }
                    }
                }
        },
        "./app/util/maintenanceUtils.js": function(e, t, a) {
            "use strict";
            a.d(t, "c", (function() {
                return o
            })), a.d(t, "b", (function() {
                return s
            })), a.d(t, "a", (function() {
                return l
            }));
            var n = a("./node_modules/lodash-es/uniqBy.js"),
                i = a("./node_modules/lodash-es/orderBy.js"),
                r = a("./app/constants.js"),
                o = function(e) {
                    return e.sort((function(e, t) {
                        return r.j[e] - r.j[t]
                    }))
                },
                s = function(e) {
                    var t = e.featureArray,
                        a = e.timeRange,
                        o = e.includeOnlyInspectionJob,
                        s = e.includeOnlyBrushingJobs,
                        l = e.includeOnlyContractType,
                        c = [];
                    c = o ? [r.p] : s ? r.f : r.m;
                    for (var u = [], d = [], p = 0; p < t.length; p++) {
                        var m = t.feature(p);
                        0 === m.properties.jobId ? u.push(m) : c.includes(m.properties.jobId) && d.push(m)
                    }
                    var f = Date.now() / 1e3 - 60 * a,
                        g = d.filter((function(e) {
                            return !(!o && !s) || e.properties.timestamp >= f
                        })),
                        h = Object(i.a)(g, "properties.timestamp", "desc");
                    return Object(n.a)(h.concat(u), "properties.hash").filter((function(e) {
                        return !l || e.properties.contractType === l
                    }))
                },
                l = function(e) {
                    var t = {};
                    return Object.values(e).forEach((function(e) {
                        e.timestamp >= Date.now() / 1e3 - r.k && (t[e.id] = e)
                    })), t
                }
        },
        "./app/util/mapLayerUtils.js": function(e, t, a) {
            "use strict";
            a.d(t, "b", (function() {
                return n
            })), a.d(t, "a", (function() {
                return i
            }));
            var n = function(e, t) {
                    if (!e || !t) return !1;
                    var a = t[e];
                    return !!a && ("object" != typeof a ? Boolean(a) : !!Object.keys(a).map((function(e) {
                        return a[e]
                    })).some((function(e) {
                        return !0 === e
                    })))
                },
                i = function(e, t, a, r) {
                    if (void 0 === r && (r = void 0), !e || !t || !a) return !1;
                    if (!Object.keys(a).includes(t)) return !1;
                    var o = (e.properties.type || "").toLocaleLowerCase();
                    if (o && "disorders" !== t && "cameraStations" !== t && "fluencies" !== t && "roadSigns" !== t && -1 === t.indexOf("bicycleRoute")) return "stop" === t && e.properties.stops ? i(e, "terminal", a, r) : Boolean(a[t][o]);
                    if ("ticketSales" === t && e.properties.TYYPPI && r) {
                        var s = r.mapLayers.featureMapping.ticketSales[e.properties.TYYPPI];
                        return Boolean(a.ticketSales[s])
                    }
                    return n(t, a)
                }
        },
        "./app/util/modeUtils.js": function(e, t, a) {
            "use strict";
            a.d(t, "c", (function() {
                return h
            })), a.d(t, "f", (function() {
                return v
            })), a.d(t, "d", (function() {
                return k
            })), a.d(t, "b", (function() {
                return j
            })), a.d(t, "e", (function() {
                return S
            })), a.d(t, "g", (function() {
                return E
            })), a.d(t, "h", (function() {
                return N
            })), a.d(t, "k", (function() {
                return R
            })), a.d(t, "a", (function() {
                return w
            })), a.d(t, "i", (function() {
                return T
            })), a.d(t, "j", (function() {
                return C
            })), a.d(t, "l", (function() {
                return x
            }));
            var n = a("./node_modules/@babel/runtime/helpers/esm/extends.js"),
                i = a("./node_modules/lodash-es/without.js"),
                r = a("./node_modules/lodash-es/isEmpty.js"),
                o = a("./node_modules/lodash-es/get.js"),
                s = a("./node_modules/lodash-es/isString.js"),
                l = a("./node_modules/lodash-es/sortedUniq.js"),
                c = a("./node_modules/lodash-es/intersection.js"),
                u = a("./node_modules/lodash-es/xor.js"),
                d = a("./node_modules/point-in-polygon/index.js"),
                p = a.n(d),
                m = a("./app/util/queryUtils.js"),
                f = a("./app/store/localStorage.js"),
                g = a("./app/util/geo-utils.js"),
                h = function(e) {
                    return e.streetModes ? Object.keys(e.streetModes).filter((function(t) {
                        return e.streetModes[t].availableForSelection
                    })).map((function(t) {
                        return Object(n.a)({}, e.streetModes[t], {
                            name: t.toUpperCase()
                        })
                    })) : []
                },
                b = function(e) {
                    return h(e).map((function(e) {
                        return e.name
                    }))
                },
                y = function(e) {
                    return e.transportModes ? Object.keys(e.transportModes).filter((function(t) {
                        return e.transportModes[t].availableForSelection
                    })).map((function(t) {
                        return Object(n.a)({}, e.transportModes[t], {
                            name: t.toUpperCase()
                        })
                    })) : []
                },
                v = function(e) {
                    return y(e).filter((function(e) {
                        return e.defaultValue
                    })).map((function(e) {
                        return e.name
                    }))
                },
                k = function(e) {
                    return y(e).map((function(e) {
                        return e.name
                    }))
                },
                j = function(e, t, a, n, i) {
                    if (!t) return "";
                    var r = t instanceof Array ? t.join(",") : t;
                    return Object(s.a)(r) ? Object(l.a)(r.split(",").filter((function(t) {
                        return function(e, t) {
                            return [].concat(b(e), k(e)).includes(t.toUpperCase())
                        }(e, t)
                    })).filter((function(t) {
                        return function(e, t, a) {
                            if (t in e.modePolygons && a.length > 0) {
                                for (var n = 0; n < a.length; n++)
                                    for (var i = a[n], r = i.lat, o = i.lon, s = 0; s < e.modeBoundingBoxes[t].length; s++) {
                                        var l = e.modeBoundingBoxes[t][s];
                                        if (Object(g.h)(l, r, o) && p()([o, r], e.modePolygons[t][s])) return !0
                                    }
                                return !1
                            }
                            return !0
                        }(e, t, [a, n].concat(i))
                    })).map((function(t) {
                        return function(e, t) {
                            if (Object(s.a)(t)) {
                                var a = e.modeToOTP[t.toLowerCase()];
                                return a ? a.toUpperCase() : void 0
                            }
                        }(e, t)
                    })).filter((function(e) {
                        return !!e
                    })).sort()).join(",") : ""
                },
                S = function(e) {
                    return [].concat(v(e), function(e) {
                        return h(e).filter((function(e) {
                            return e.defaultValue
                        })).map((function(e) {
                            return e.name
                        }))
                    }(e))
                },
                E = function(e, t) {
                    if (e && e.query && e.query.modes) return decodeURI(e.query.modes).split("?")[0].split(",").map((function(e) {
                        return e.toUpperCase()
                    }));
                    var a = Object(f.a)().modes;
                    return Array.isArray(a) && !Object(r.a)(a) ? a : S(t)
                },
                N = function(e, t) {
                    var a = Object(c.a)(E(e, t), b(t));
                    if (a.length > 0) return a[0];
                    var n = h(t).filter((function(e) {
                        return e.defaultValue
                    }));
                    return n.length > 0 ? n[0].name : void 0
                },
                R = function(e, t, a, n) {
                    void 0 === n && (n = !1);
                    var s = function(e, t, a, n) {
                        void 0 === n && (n = !1);
                        var s = i.a.apply(void 0, [t].concat(b(e)));
                        Object(r.a)(s) && (s = y(e).filter((function(e) {
                            return e.defaultValue
                        })).map((function(e) {
                            return e.name
                        })));
                        var l = Object(o.a)(Object(f.a)(a), "modes");
                        return l ? {
                            modes: l.join(",")
                        } : {
                            modes: n ? a.toUpperCase() : s.concat(a.toUpperCase()).join(",")
                        }
                    }(t, E(a.location, t), e, n);
                    Object(m.j)(a, s);
                    var l = s.modes.split(",");
                    Object(f.q)(e, l)
                },
                w = function(e, t) {
                    var a = N(e, t),
                        n = E(e, t);
                    Object(f.q)(a, n)
                },
                T = function(e, t) {
                    return e.modesWithNoBike && e.modesWithNoBike.includes(t)
                },
                C = function(e, t, a) {
                    if (t.modesWithNoBike && "BICYCLE" === N(e, t)) {
                        if (Array.isArray(a) && a.some((function(e) {
                                return t.modesWithNoBike.includes(e)
                            }))) return !0;
                        if (t.modesWithNoBike.includes(a)) return !0
                    }
                    return !1
                },
                x = function(e, t, a) {
                    var n = a.getCurrentLocation();
                    if (!C(a.location, t, e)) {
                        var i = Object(u.a)(E(n, t), [e.toUpperCase()]).join(",");
                        Object(m.j)(a, {
                            modes: i
                        })
                    }
                }
        },
        "./app/util/otpStrings.js": function(e, t, a) {
            "use strict";
            a.d(t, "d", (function() {
                return i
            })), a.d(t, "c", (function() {
                return r
            })), a.d(t, "a", (function() {
                return o
            })), a.d(t, "b", (function() {
                return s
            }));
            var n = a("./node_modules/@babel/runtime/helpers/esm/extends.js"),
                i = function(e) {
                    var t = e.split(",");
                    if (2 === t.length) {
                        var a = parseFloat(t[0]),
                            n = parseFloat(t[1]);
                        if (!Number.isNaN(a) && !Number.isNaN(n)) return {
                            lat: a,
                            lon: n
                        }
                    }
                },
                r = function(e) {
                    var t, a, r = e.split("::"),
                        o = r[0],
                        s = r[1],
                        l = r[2];
                    if (o.includes("**")) {
                        var c = o.split("**");
                        t = c[0], a = c[1]
                    } else t = o;
                    var u = Object(n.a)({
                        address: t
                    }, a && {
                        stopId: a
                    });
                    if (l) {
                        var d = parseInt(l, 10);
                        Number.isNaN(d) || (u.locationSlack = d)
                    }
                    return s ? Object(n.a)({}, u, i(s)) : u
                },
                o = function(e) {
                    return !1 === e.set ? "-" : encodeURIComponent(e.address) + "::" + e.lat + "," + e.lon
                },
                s = function(e) {
                    return e.gps ? "POS" : !1 === e.set ? "-" : e.address + "::" + e.lat + "," + e.lon
                }
        },
        "./app/util/path.js": function(e, t, a) {
            "use strict";
            a.d(t, "f", (function() {
                return c
            })), a.d(t, "e", (function() {
                return u
            })), a.d(t, "b", (function() {
                return d
            })), a.d(t, "c", (function() {
                return p
            })), a.d(t, "d", (function() {
                return m
            })), a.d(t, "a", (function() {
                return f
            })), a.d(t, "h", (function() {
                return g
            })), a.d(t, "i", (function() {
                return y
            })), a.d(t, "k", (function() {
                return k
            })), a.d(t, "g", (function() {
                return j
            })), a.d(t, "j", (function() {
                return S
            }));
            var n = a("./node_modules/@babel/runtime/helpers/esm/extends.js"),
                i = a("./node_modules/lodash-es/get.js"),
                r = a("./node_modules/debug/src/browser.js"),
                o = a.n(r),
                s = a("./app/util/otpStrings.js"),
                l = o()("path.js"),
                c = "lahellasi",
                u = "suosikit",
                d = "linjat",
                p = "pysakit",
                m = "terminaalit",
                f = "reitti",
                g = function(e, t) {
                    return ["/" + f, encodeURIComponent(decodeURIComponent(e)), encodeURIComponent(decodeURIComponent(t))].join("/")
                },
                h = function(e) {
                    return null == e || "" === e.trim() || "-" === e.trim()
                },
                b = function(e, t, a) {
                    return h(e) && h(t) ? "/" : ["", encodeURIComponent(h(e) ? "-" : e), encodeURIComponent(h(t) ? "-" : t), a].join("/")
                },
                y = function(e, t) {
                    return !0 === Object(i.a)(e, "ready") && !0 === Object(i.a)(t, "ready")
                },
                v = function(e, t, a) {
                    return void 0 === a && (a = c), y(e, t) ? g(Object(s.a)(e), Object(s.a)(t)) : b(Object(s.b)(e), Object(s.b)(t), a)
                },
                k = function(e) {
                    if (h(e)) return {
                        set: !1,
                        ready: !1
                    };
                    if ("POS" === e) return {
                        set: !0,
                        ready: !1,
                        gps: !0
                    };
                    var t = Object(s.c)(decodeURIComponent(e));
                    return t.lat && t.lon ? (t.set = !0, t.ready = !0) : t.ready = !1, t
                },
                j = function(e) {
                    return v(e, {
                        set: !1,
                        ready: !1
                    })
                },
                S = function(e) {
                    var t, a, i = e.origin,
                        r = e.destination,
                        o = e.context,
                        s = e.router,
                        u = e.base,
                        m = e.tab,
                        g = void 0 === m ? c : m,
                        h = e.resetIndex,
                        b = void 0 !== h && h;
                    switch (o) {
                        case p:
                        case d:
                            t = !0;
                            break;
                        case f:
                            t = !1;
                            break;
                        default:
                            t = !(!i.ready || !r.ready)
                    }
                    a = b && u.state && u.state.summaryPageSelected ? Object(n.a)({}, u, {
                        state: Object(n.a)({}, u.state, {
                            summaryPageSelected: 0
                        }),
                        pathname: v(i, r, g)
                    }) : Object(n.a)({}, u, {
                        pathname: v(i, r, g)
                    }), l("url, push", a, t), t ? s.push(a) : s.replace(a)
                }
        },
        "./app/util/planParamUtil.js": function(e, t, a) {
            "use strict";
            a.d(t, "c", (function() {
                return d
            })), a.d(t, "b", (function() {
                return p
            })), a.d(t, "a", (function() {
                return m
            })), a.d(t, "d", (function() {
                return k
            }));
            var n = a("./node_modules/@babel/runtime/helpers/esm/extends.js"),
                i = a("./node_modules/lodash-es/omitBy.js"),
                r = a("./node_modules/moment/moment.js"),
                o = a.n(r),
                s = a("./app/util/modeUtils.js"),
                l = a("./app/util/otpStrings.js"),
                c = a("./app/util/queryUtils.js"),
                u = a("./app/store/localStorage.js"),
                d = function(e) {
                    return e ? Object(n.a)({}, e.defaultSettings, {
                        modes: Object(s.e)(e)
                    }) : {}
                },
                p = function(e, t) {
                    return Object(n.a)({}, d(e), Object(u.a)(), Object(c.g)(t))
                },
                m = {
                    ignoreRealtimeUpdates: null,
                    maxPreTransitTime: null,
                    walkOnStreetReluctance: null,
                    waitReluctance: null,
                    bikeSpeed: null,
                    bikeSwitchTime: null,
                    bikeSwitchCost: null,
                    bikeBoardCost: null,
                    optimize: null,
                    triangle: null,
                    carParkCarLegWeight: null,
                    maxTransfers: null,
                    waitAtBeginningFactor: null,
                    heuristicStepsPerMainStep: null,
                    compactLegsByReversedSearch: null,
                    disableRemainingWeightHeuristic: null,
                    modeWeight: null
                };

            function f(e) {
                return null == e
            }

            function g(e, t, a) {
                return void 0 === e || "string" == typeof e && !e.split(",").includes("BICYCLE") ? f(t.maxWalkDistance) ? a.maxWalkDistance : t.maxWalkDistance : f(t.maxBikingDistance) ? a.maxBikingDistance : t.maxBikingDistance
            }

            function h(e, t, a) {
                var n = e ? e.split(",") : void 0;
                return !(!n || !(n.includes("BICYCLE_RENT") || n.includes("BICYCLE") && n.length > 1 && a.length > 0)) || !f(t.disableRemainingWeightHeuristic) && t.disableRemainingWeightHeuristic
            }
            var b = function(e, t) {
                    return void 0 === t && (t = void 0), void 0 !== e ? Number(e) : t
                },
                y = function(e, t) {
                    return void 0 === t && (t = void 0), void 0 !== e ? "true" === e : t
                },
                v = function(e) {
                    var t;
                    return null == e || null == (t = e.split(",")) ? void 0 : t.map((function(e) {
                        return {
                            mode: e
                        }
                    }))
                },
                k = function(e) {
                    return function(t, a) {
                        var r, p, m, k, j, S, E, N = t.from,
                            R = t.to,
                            w = a.location.query,
                            T = w.accessibilityOption,
                            C = w.arriveBy,
                            x = w.bikeSpeed,
                            L = w.intermediatePlaces,
                            O = w.minTransferTime,
                            M = w.modes,
                            _ = w.numItineraries,
                            P = w.optimize,
                            A = w.preferredRoutes,
                            I = w.safetyFactor,
                            D = w.slopeFactor,
                            F = w.timeFactor,
                            q = w.ticketTypes,
                            B = w.time,
                            V = w.transferPenalty,
                            U = w.unpreferredRoutes,
                            H = w.walkBoardCost,
                            W = w.walkReluctance,
                            K = w.walkSpeed,
                            G = (r = Object(u.a)(), p = Object(u.m)(), {
                                walkSpeed: b(r.walkSpeed),
                                walkReluctance: b(r.walkReluctance),
                                walkBoardCost: b(r.walkBoardCost),
                                modes: void 0,
                                minTransferTime: b(r.minTransferTime),
                                accessibilityOption: b(r.accessibilityOption),
                                ticketTypes: r.ticketTypes,
                                transferPenalty: b(r.transferPenalty),
                                maxWalkDistance: b(p.maxWalkDistance),
                                maxBikingDistance: b(p.maxBikingDistance),
                                ignoreRealtimeUpdates: y(p.ignoreRealtimeUpdates),
                                maxPreTransitTime: b(p.maxPreTransitTime),
                                walkOnStreetReluctance: b(p.walkOnStreetReluctance),
                                waitReluctance: b(p.waitReluctance),
                                bikeSpeed: b(r.bikeSpeed, p.bikeSpeed),
                                bikeSwitchTime: b(p.bikeSwitchTime),
                                bikeSwitchCost: b(p.bikeSwitchCost),
                                bikeBoardCost: b(p.bikeBoardCost),
                                optimize: r.optimize || p.optimize || void 0,
                                safetyFactor: b(r.safetyFactor, p.safetyFactor),
                                slopeFactor: b(r.slopeFactor, p.slopeFactor),
                                timeFactor: b(r.timeFactor, p.timeFactor),
                                carParkCarLegWeight: b(p.carParkCarLegWeight),
                                maxTransfers: b(p.maxTransfers),
                                waitAtBeginningFactor: b(p.waitAtBeginningFactor),
                                heuristicStepsPerMainStep: b(p.heuristicStepsPerMainStep),
                                compactLegsByReversedSearch: y(p.compactLegsByReversedSearch),
                                disableRemainingWeightHeuristic: y(p.disableRemainingWeightHeuristic),
                                itineraryFiltering: b(p.itineraryFiltering),
                                busWeight: b(p.busWeight),
                                railWeight: b(p.railWeight),
                                subwayWeight: b(p.subwayWeight),
                                tramWeight: b(p.tramWeight),
                                ferryWeight: b(p.ferryWeight),
                                airplaneWeight: b(p.airplaneWeight),
                                preferredRoutes: r.preferredRoutes,
                                unpreferredRoutes: r.unpreferredRoutes
                            }),
                            z = Object(l.c)(N),
                            Y = Object(l.c)(R),
                            Q = (Object(c.e)({
                                intermediatePlaces: L
                            }) || []).map((function(e) {
                                return {
                                    visit: {
                                        label: e.address,
                                        stopLocationIds: [e.stopId],
                                        minimumWaitTime: "PT" + (e.locationSlack || 0) + "S"
                                    }
                                }
                            })),
                            J = Object(s.b)(e, Object(s.g)({
                                query: {
                                    modes: M
                                }
                            }, e), z, Y, Q),
                            Z = Object(n.a)({}, d(e));
                        return Object(n.a)({}, Z, Object(i.a)({
                            fromPlace: N,
                            toPlace: R,
                            from: z,
                            to: Y,
                            intermediatePlaces: Q,
                            numItineraries: b(_),
                            date: B ? o()(1e3 * B).format("YYYY-MM-DD") : void 0,
                            time: B ? o()(1e3 * B).format("HH:mm:ss") : void 0,
                            walkReluctance: b(W, G.walkReluctance),
                            walkBoardCost: b(H, G.walkBoardCost),
                            minTransferTime: b(O, G.minTransferTime),
                            walkSpeed: b(K, G.walkSpeed),
                            arriveBy: y(C),
                            maxWalkDistance: g(J, G, e),
                            wheelchair: 1 === b(T, G.accessibilityOption),
                            transferPenalty: b(V, G.transferPenalty),
                            ignoreRealtimeUpdates: G.ignoreRealtimeUpdates,
                            maxPreTransitTime: G.maxPreTransitTime,
                            walkOnStreetReluctance: G.walkOnStreetReluctance,
                            waitReluctance: G.waitReluctance,
                            bikeSpeed: b(x, G.bikeSpeed),
                            bikeSwitchTime: G.bikeSwitchTime,
                            bikeSwitchCost: G.bikeSwitchCost,
                            bikeBoardCost: G.bikeBoardCost,
                            optimize: P || G.optimize,
                            triangle: "TRIANGLE" === (P || G.optimize) ? {
                                safetyFactor: b(I, G.safetyFactor),
                                slopeFactor: b(D, G.slopeFactor),
                                timeFactor: b(F, G.timeFactor)
                            } : null,
                            carParkCarLegWeight: G.carParkCarLegWeight,
                            maxTransfers: G.maxTransfers,
                            waitAtBeginningFactor: G.waitAtBeginningFactor,
                            heuristicStepsPerMainStep: G.heuristicStepsPerMainStep,
                            compactLegsByReversedSearch: G.compactLegsByReversedSearch,
                            itineraryFiltering: b(G.itineraryFiltering, e.itineraryFiltering),
                            modeWeight: void 0 !== G.busWeight || void 0 !== G.railWeight || void 0 !== G.subwayWeight || void 0 !== G.tramWeight || void 0 !== G.ferryWeight || void 0 !== G.airplaneWeight ? Object(i.a)({
                                BUS: G.busWeight,
                                RAIL: G.railWeight,
                                SUBWAY: G.subwayWeight,
                                TRAM: G.tramWeight,
                                FERRY: G.ferryWeight,
                                AIRPLANE: G.airplaneWeight
                            }, f) : null,
                            preferred: {
                                routes: A || G.preferredRoutes
                            },
                            unpreferred: {
                                routes: U || G.unpreferredRoutes
                            },
                            disableRemainingWeightHeuristic: h(J, G, Q)
                        }, f), {
                            modes: v(J),
                            ticketTypes: (m = q, k = G.ticketTypes, j = Z.ticketTypes, S = function(e) {
                                return ("" + e).replace("_", ":")
                            }, E = function(e) {
                                return "none" !== e
                            }, m ? E(m) ? S(m) : null : k ? E(k) ? S(k) : null : j && E(j) ? S(j) : null)
                        })
                    }
                }
        },
        "./app/util/publicPath.js": function(e, t, a) {
            window.ASSET_URL && (a.p = window.ASSET_URL)
        },
        "./app/util/queryUtils.js": function(e, t, a) {
            "use strict";
            a.d(t, "c", (function() {
                return p
            })), a.d(t, "j", (function() {
                return m
            })), a.d(t, "e", (function() {
                return f
            })), a.d(t, "n", (function() {
                return g
            })), a.d(t, "a", (function() {
                return k
            })), a.d(t, "h", (function() {
                return j
            })), a.d(t, "b", (function() {
                return S
            })), a.d(t, "i", (function() {
                return E
            })), a.d(t, "g", (function() {
                return N
            })), a.d(t, "f", (function() {
                return w
            })), a.d(t, "d", (function() {
                return T
            })), a.d(t, "o", (function() {
                return C
            })), a.d(t, "m", (function() {
                return x
            })), a.d(t, "l", (function() {
                return L
            })), a.d(t, "k", (function() {
                return O
            }));
            var n = a("./node_modules/@babel/runtime/helpers/esm/extends.js"),
                i = a("./node_modules/lodash-es/isEmpty.js"),
                r = a("./node_modules/lodash-es/isString.js"),
                o = a("./node_modules/lodash-es/omit.js"),
                s = a("./node_modules/lodash-es/trim.js"),
                l = a("./node_modules/lodash-es/cloneDeep.js"),
                c = a("./app/util/otpStrings.js"),
                u = a("./app/constants.js"),
                d = function(e) {
                    var t = Object(l.a)(e);
                    if (t.state && t.state.summaryPageSelected && (t.state.summaryPageSelected = 0), t.pathname) {
                        var a = t.pathname.split("/");
                        5 === a.length && (a.pop(), t.pathname = a.join("/"))
                    }
                    return t
                },
                p = function(e, t) {
                    if (void 0 === t && (t = []), 0 !== t.length) {
                        var a = e.getCurrentLocation();
                        a = d(a);
                        var i = Object(o.a)(a.query, t);
                        e.replace(Object(n.a)({}, a, {
                            query: i
                        }))
                    }
                },
                m = function(e, t) {
                    var a = e.getCurrentLocation();
                    a = d(a);
                    var i = t.optimize && a.query.optimize && t.optimize !== a.query.optimize && a.query.optimize === u.n.Triangle,
                        r = Object(n.a)({}, a.query, t);
                    e.replace(Object(n.a)({}, a, {
                        query: i ? Object(o.a)(r, ["safetyFactor", "slopeFactor", "timeFactor"]) : r
                    }))
                },
                f = function(e) {
                    if (!e) return [];
                    var t = e.intermediatePlaces;
                    return t ? Array.isArray(t) ? t.map(c.c) : Object(r.a)(t) ? Object(i.a)(Object(s.a)(t)) ? [] : [Object(c.c)(t)] : [] : []
                },
                g = function(e, t) {
                    (Object(r.a)(t) || Array.isArray(t) && t.every(r.a)) && m(e, {
                        intermediatePlaces: t
                    })
                },
                h = function(e, t) {
                    if (void 0 === t && (t = []), !e) return t;
                    var a = decodeURI(e);
                    return a ? a.split(",") : t
                },
                b = function(e, t) {
                    return e ? h(t ? e.preferredRoutes : e.unpreferredRoutes) : []
                },
                y = function(e, t, a) {
                    var n, i = e.getCurrentLocation().query,
                        r = b(i, a);
                    r.includes(t) || (r.push(t), m(e, ((n = {})[(a ? "preferred" : "unpreferred") + "Routes"] = r.join(","), n)))
                },
                v = function(e, t, a) {
                    var n, i = e.getCurrentLocation().query,
                        r = b(i, a);
                    r.includes(t) && m(e, ((n = {})[(a ? "preferred" : "unpreferred") + "Routes"] = r.filter((function(e) {
                        return e !== t
                    })), n))
                },
                k = function(e, t) {
                    return y(e, t, !0)
                },
                j = function(e, t) {
                    return v(e, t, !0)
                },
                S = function(e, t) {
                    return y(e, t, !1)
                },
                E = function(e, t) {
                    return v(e, t, !1)
                },
                N = function(e) {
                    if (!e) return {};
                    var t = function(t) {
                            return Object.hasOwnProperty.call(e, t)
                        },
                        a = function(e, t) {
                            return void 0 === t && (t = void 0), null != e && "" !== e ? Number(e) : t
                        };
                    return Object(n.a)({}, t("accessibilityOption") && {
                        accessibilityOption: a(e.accessibilityOption)
                    }, t("bikeSpeed") && {
                        bikeSpeed: a(e.bikeSpeed)
                    }, t("minTransferTime") && {
                        minTransferTime: a(e.minTransferTime)
                    }, t("modes") && {
                        modes: h(e.modes)
                    }, t("optimize") && {
                        optimize: e.optimize
                    }, e.optimize === u.n.Triangle && Object(n.a)({}, t("safetyFactor") && {
                        safetyFactor: a(e.safetyFactor)
                    }, t("slopeFactor") && {
                        slopeFactor: a(e.slopeFactor)
                    }, t("timeFactor") && {
                        timeFactor: a(e.timeFactor)
                    }), t("preferredRoutes") && {
                        preferredRoutes: h(e.preferredRoutes)
                    }, t("ticketTypes") && {
                        ticketTypes: e.ticketTypes
                    }, t("transferPenalty") && {
                        transferPenalty: a(e.transferPenalty)
                    }, t("unpreferredRoutes") && {
                        unpreferredRoutes: h(e.unpreferredRoutes)
                    }, t("walkBoardCost") && {
                        walkBoardCost: a(e.walkBoardCost)
                    }, t("walkReluctance") && {
                        walkReluctance: a(e.walkReluctance)
                    }, t("walkSpeed") && {
                        walkSpeed: a(e.walkSpeed)
                    })
                },
                R = .45,
                w = function(e, t) {
                    var a = (void 0 === t ? {} : t).safetyFactor;
                    return e === u.n.Greenways || e === u.n.Triangle && a >= R
                },
                T = function(e, t) {
                    var a = (void 0 === t ? {} : t).slopeFactor;
                    return e === u.n.Triangle && a >= R
                },
                C = function(e, t, a, n) {
                    void 0 === a && (a = {}), void 0 === n && (n = !1), !n && w(t, a) || (!n && T(t, a) ? m(e, {
                        optimize: u.n.Triangle,
                        safetyFactor: R,
                        slopeFactor: R,
                        timeFactor: .1
                    }) : m(e, {
                        optimize: u.n.Greenways
                    }))
                },
                x = function(e, t, a, n) {
                    if (void 0 === a && (a = {}), void 0 === n && (n = !1), n || !T(t, a)) {
                        var i = !n && w(t, a);
                        m(e, {
                            optimize: u.n.Triangle,
                            safetyFactor: i ? R : .1,
                            slopeFactor: i ? R : .8,
                            timeFactor: .1
                        })
                    }
                },
                L = function(e, t, a, n) {
                    w(t, a) && (T(t, a) ? x(e, t, a, !0) : m(e, {
                        optimize: n
                    }))
                },
                O = function(e, t, a, n) {
                    T(t, a) && (w(t, a) ? C(e, t, a, !0) : m(e, {
                        optimize: n
                    }))
                }
        },
        "./app/util/route-compare.js": function(e, t, a) {
            "use strict";

            function n(e, t) {
                if (e.agency && e.agency.name && t.agency && t.agency.name) {
                    var a = e.agency.name.localeCompare(t.agency.name);
                    if (0 !== a) return a
                }
                var n = (e.shortName || "").match(/^[A-Za-z]?(0*)([0-9]*)/),
                    i = (t.shortName || "").match(/^[A-Za-z]?(0*)([0-9]*)/);
                return n[1].length !== i[1].length ? n[1].length + n[2].length === 0 ? -1 : i[1].length + i[2].length === 0 ? 1 : i[1].length - n[1].length : parseInt(n[2] || "0", 10) - parseInt(i[2] || "0", 10) || (e.shortName || "").localeCompare(t.shortName || "") || (e.longName || "").localeCompare(t.longName || "")
            }
            a.d(t, "a", (function() {
                return n
            }))
        },
        "./app/util/searchUtils.js": function(e, t, a) {
            "use strict";
            a.d(t, "c", (function() {
                return D
            })), a.d(t, "b", (function() {
                return B
            })), a.d(t, "a", (function() {
                return K
            })), a.d(t, "d", (function() {
                return G
            }));
            var n = a("./node_modules/@babel/runtime/helpers/esm/extends.js"),
                i = a("./node_modules/react-relay/classic.js"),
                r = a.n(i),
                o = a("./node_modules/lodash-es/get.js"),
                s = a("./node_modules/lodash-es/isString.js"),
                l = a("./node_modules/lodash-es/take.js"),
                c = a("./node_modules/lodash-es/orderBy.js"),
                u = a("./node_modules/lodash-es/sortBy.js"),
                d = a("./node_modules/lodash-es/debounce.js"),
                p = a("./node_modules/lodash-es/flatten.js"),
                m = a("./node_modules/lodash-es/merge.js"),
                f = a("./node_modules/lodash-es/uniqWith.js"),
                g = a("./app/util/xhrPromise.js"),
                h = a("./app/util/route-compare.js"),
                b = a("./app/util/geo-utils.js"),
                y = a("./app/util/suggestionUtils.js"),
                v = function(e, t) {
                    if (!t.search.mapPeliasModality) return e;
                    var a = t.search.peliasMapping;
                    return e.map((function(e) {
                        var i = Object(n.a)({}, e),
                            r = e.properties.category;
                        if (r)
                            for (var o = 0; o < r.length; o++) {
                                var s = r[o];
                                if (s in a) {
                                    i.properties.mode = a[s], t.search.peliasLayer && (i.properties.layer = t.search.peliasLayer(s));
                                    break
                                }
                            }
                        return t.search.peliasLocalization ? t.search.peliasLocalization(i) : i
                    }))
                },
                k = a("./app/util/path.js"),
                j = a("./app/util/authUtils.js"),
                S = "currentPosition",
                E = "favouriteStop",
                N = "favouriteStation",
                R = "favouritePlace",
                w = "station",
                T = "stop",
                C = "all",
                x = "endpoint",
                L = "search";

            function O(e) {
                return new Promise((function(t, a) {
                    r.a.Store.primeCache({
                        query: e
                    }, (function(n) {
                        n.error ? a(n.error) : n.done && t(r.a.Store.readQuery(e))
                    }))
                }))
            }
            var M = function(e) {
                var t = "/" + k.b + "/" + e.gtfsId + "/pysakit/" + Object(c.a)(e.patterns, "code", ["asc"])[0].code;
                return {
                    type: "Route",
                    properties: Object(n.a)({}, e, {
                        layer: "route-" + e.mode,
                        link: t
                    }),
                    geometry: {
                        coordinates: null
                    }
                }
            };

            function _(e, t) {
                return e && t && e === t
            }

            function P(e, t) {
                var a = e.properties,
                    n = t.properties;
                if (_(a.gtfsId, n.gtfsId)) return !0;
                if (a.gtfsId && n.gid && n.gid.includes(a.gtfsId)) return !0;
                if (n.gtfsId && a.gid && a.gid.includes(n.gtfsId)) return !0;
                var i = e.geometry.coordinates,
                    r = t.geometry.coordinates;
                return !!(i && r && Math.abs(i[0] - r[0]) < 1e-6 && Math.abs(i[1] - r[1]) < 1e-6 && (_(a.name, n.name) || _(a.label, n.label) || _(a.address, n.address) || _(a.address, n.label) || _(a.label, n.address)))
            }

            function A(e, t, a) {
                if ("string" == typeof t && t.length > 0) {
                    var n = t.toLowerCase().trim(),
                        i = n.includes(" ") || n.includes(",");
                    return e.filter((function(e) {
                        var t = [];
                        a.forEach((function(a) {
                            var n = Object(o.a)(e, a);
                            i || "properties.label" !== a && "address" !== a || !n || ((n = n.split(",")).length > 2 ? n.splice(n.length - 2, 2) : n.length > 1 && n.splice(n.length - 1, 1), n = n.join(",")), n && (t = i ? t.concat(n.toLowerCase()) : t.concat(n.toLowerCase().replace(/,/g, " ").split(" ")))
                        }));
                        for (var r = 0; r < t.length; r++)
                            if (0 === t[r].indexOf(n)) return !0;
                        return !1
                    }))
                }
                return e
            }

            function I(e, t, a) {
                var i = A(e, t, ["properties.name", "properties.label", "properties.address", "properties.shortName", "properties.longName"]);
                return a && (i = i.filter((function(e) {
                    return !a.includes(e.properties.layer)
                }))), Promise.resolve(Object(l.a)(i, 10).map((function(e) {
                    var t = Object(n.a)({}, e, {
                        type: "OldSearch",
                        timetableClicked: !1
                    });
                    return delete t.properties.confidence, t
                })))
            }

            function D(e, t, a, i, r, o) {
                var s = e ? e.trim() : null;
                if (null == s || s.length < 1 || o.search && o.search.minimalRegexp && !o.search.minimalRegexp.test(s)) return Promise.resolve([]);
                var l = Object(n.a)({
                    text: s
                }, t, i, {
                    lang: a
                });
                r && (l = Object(n.a)({}, l, {
                    sources: r
                }));
                var c = Object(j.a)(o, o.URL.PELIAS);
                return Object(g.a)(c, l).then((function(e) {
                    return v(e.features, o)
                }))
            }

            function F(e, t) {
                var a = e.map((function(e) {
                    return O(r.a.createQuery({
                        calls: [{
                            kind: "Call",
                            metadata: {
                                type: "String!"
                            },
                            name: "id",
                            value: {
                                kind: "CallVariable",
                                callVariableName: "id"
                            }
                        }],
                        children: [{
                            fieldName: "gtfsId",
                            kind: "Field",
                            metadata: {},
                            type: "String"
                        }, {
                            children: [{
                                fieldName: "name",
                                kind: "Field",
                                metadata: {},
                                type: "String"
                            }, {
                                fieldName: "id",
                                kind: "Field",
                                metadata: {
                                    isGenerated: !0,
                                    isRequisite: !0
                                },
                                type: "ID"
                            }],
                            fieldName: "agency",
                            kind: "Field",
                            metadata: {
                                canHaveSubselections: !0,
                                inferredRootCallName: "node",
                                inferredPrimaryKey: "id"
                            },
                            type: "Agency"
                        }, {
                            fieldName: "shortName",
                            kind: "Field",
                            metadata: {},
                            type: "String"
                        }, {
                            fieldName: "mode",
                            kind: "Field",
                            metadata: {},
                            type: "TransitMode"
                        }, {
                            fieldName: "longName",
                            kind: "Field",
                            metadata: {},
                            type: "String"
                        }, {
                            children: [{
                                fieldName: "code",
                                kind: "Field",
                                metadata: {},
                                type: "String"
                            }, {
                                fieldName: "id",
                                kind: "Field",
                                metadata: {
                                    isGenerated: !0,
                                    isRequisite: !0
                                },
                                type: "ID"
                            }],
                            fieldName: "patterns",
                            kind: "Field",
                            metadata: {
                                canHaveSubselections: !0,
                                inferredRootCallName: "node",
                                inferredPrimaryKey: "id",
                                isPlural: !0
                            },
                            type: "Pattern"
                        }, {
                            fieldName: "id",
                            kind: "Field",
                            metadata: {
                                isGenerated: !0,
                                isRequisite: !0
                            },
                            type: "ID"
                        }],
                        fieldName: "route",
                        kind: "Query",
                        metadata: {
                            identifyingArgName: "id",
                            identifyingArgType: "String!"
                        },
                        name: "FavouriteRoute",
                        type: "Route"
                    }, {
                        id: e
                    }))
                }));
                return Promise.all(a).then((function(e) {
                    return e.flat()
                })).then((function(e) {
                    return e.map(M)
                })).then((function(e) {
                    return e.map((function(e) {
                        return Object(n.a)({}, e, {
                            properties: Object(n.a)({}, e.properties, {
                                layer: "favouriteRoute"
                            }),
                            type: "FavouriteRoute"
                        })
                    }))
                })).then((function(e) {
                    return A(e, t, ["properties.shortName", "properties.longName"])
                })).then((function(e) {
                    return e.sort((function(e, t) {
                        return Object(h.a)(e.properties, t.properties)
                    }))
                }))
            }

            function q(e, t) {
                if ("string" != typeof e || 0 === e.trim().length) return Promise.resolve([]);
                var a = e.match(/^\d+$/);
                return a && a[0].length > 3 ? Promise.resolve([]) : O(r.a.createQuery({
                    children: [{
                        calls: [{
                            kind: "Call",
                            metadata: {},
                            name: "name",
                            value: {
                                kind: "CallVariable",
                                callVariableName: "name"
                            }
                        }],
                        children: [{
                            fieldName: "gtfsId",
                            kind: "Field",
                            metadata: {},
                            type: "String"
                        }, {
                            children: [{
                                fieldName: "name",
                                kind: "Field",
                                metadata: {},
                                type: "String"
                            }, {
                                fieldName: "id",
                                kind: "Field",
                                metadata: {
                                    isGenerated: !0,
                                    isRequisite: !0
                                },
                                type: "ID"
                            }],
                            fieldName: "agency",
                            kind: "Field",
                            metadata: {
                                canHaveSubselections: !0,
                                inferredRootCallName: "node",
                                inferredPrimaryKey: "id"
                            },
                            type: "Agency"
                        }, {
                            fieldName: "shortName",
                            kind: "Field",
                            metadata: {},
                            type: "String"
                        }, {
                            fieldName: "mode",
                            kind: "Field",
                            metadata: {},
                            type: "TransitMode"
                        }, {
                            fieldName: "longName",
                            kind: "Field",
                            metadata: {},
                            type: "String"
                        }, {
                            children: [{
                                fieldName: "code",
                                kind: "Field",
                                metadata: {},
                                type: "String"
                            }, {
                                fieldName: "id",
                                kind: "Field",
                                metadata: {
                                    isGenerated: !0,
                                    isRequisite: !0
                                },
                                type: "ID"
                            }],
                            fieldName: "patterns",
                            kind: "Field",
                            metadata: {
                                canHaveSubselections: !0,
                                inferredRootCallName: "node",
                                inferredPrimaryKey: "id",
                                isPlural: !0
                            },
                            type: "Pattern"
                        }, {
                            fieldName: "id",
                            kind: "Field",
                            metadata: {
                                isGenerated: !0,
                                isRequisite: !0
                            },
                            type: "ID"
                        }],
                        fieldName: "routes",
                        kind: "Field",
                        metadata: {
                            canHaveSubselections: !0,
                            inferredRootCallName: "node",
                            inferredPrimaryKey: "id",
                            isPlural: !0
                        },
                        type: "Route"
                    }],
                    fieldName: "viewer",
                    kind: "Query",
                    metadata: {},
                    name: "Routes",
                    type: "Query"
                }, {
                    name: e
                })).then((function(e) {
                    return e[0].routes.filter((function(e) {
                        return void 0 === t.feedIds || t.feedIds.indexOf(e.gtfsId.split(":")[0]) > -1
                    })).map(M).sort((function(e, t) {
                        return Object(h.a)(e.properties, t.properties)
                    }))
                })).then((function(e) {
                    return Object(l.a)(e, 10)
                }))
            }
            var B = function() {
                    return ["CurrentPosition", "FavouritePlace", "FavouriteStop", "OldSearch", "Geocoding", "Stops"]
                },
                V = function(e) {
                    return Object(s.a)(e) ? e.toLowerCase() : ""
                },
                U = function(e, t) {
                    switch (e) {
                        case S:
                            return 1;
                        case N:
                            return .45;
                        case w:
                            return Object(s.a)(t) && 0 === t.indexOf("gtfs") ? .44 : .43;
                        case R:
                            return .42;
                        case E:
                            return .41;
                        default:
                            return .4;
                        case T:
                            return .35
                    }
                },
                H = function(e, t, a) {
                    if (void 0 === a && (a = ""), !Array.isArray(t)) return t;
                    var n = function(t) {
                            return Object(s.a)(t) && e.search && e.search.lineRegexp && e.search.lineRegexp.test(t)
                        },
                        i = V(a),
                        r = n(i),
                        o = Object(c.a)(t, [function(e) {
                            return r && n(V(e.properties.shortName)) && 0 === V(e.properties.shortName).indexOf(i) ? 1 : 0
                        }, function(e) {
                            var t = e.properties,
                                a = t.confidence,
                                n = t.layer,
                                r = t.source;
                            if (0 === i.length) return U(n, r);
                            if (!a) return U(n, r) + function(e, t) {
                                return Object(s.a)(e) && 0 !== e.length ? ["name", "label", "address", "shortName"].map((function(e) {
                                    return t[e]
                                })).filter((function(e) {
                                    return Object(s.a)(e) && e.length > 0
                                })).map((function(t) {
                                    var a = V(t);
                                    return 0 === a.indexOf(e) ? .5 + e.length / a.length : .5 * e.length / (e.length + 1)
                                })).reduce((function(e, t) {
                                    return t > e ? t : e
                                }), 0) : 0
                            }(i, e.properties);
                            switch (n) {
                                case w:
                                    var o = 0 === r.indexOf("gtfs") ? .05 : .01;
                                    return Math.min(a + o, 1);
                                default:
                                    return a;
                                case T:
                                    return a - .1
                            }
                        }], ["desc", "desc"]);
                    return Object(f.a)(o, P)
                };
            var W = Object(d.a)((function(e, t, a, i) {
                    var s, l, d = a.input,
                        f = a.type,
                        g = a.layers,
                        h = a.config,
                        v = e("PositionStore").getLocationState(),
                        k = {
                            type: "endpoint",
                            term: d,
                            results: []
                        },
                        j = {
                            type: "search",
                            term: d,
                            results: []
                        },
                        S = g || B();
                    if (f === x || f === C) {
                        var E = e("FavouriteLocationStore").getLocations(),
                            N = e("OldSearchesStore").getOldSearches("endpoint"),
                            R = e("FavouriteStopsStore").getStops(),
                            w = e("PreferencesStore").getLanguage(),
                            T = [];
                        if (S.includes("CurrentPosition") && "geolocation-not-supported" !== v.status && T.push(function(e, t) {
                                return "string" != typeof e || 0 === e.length ? Promise.resolve([{
                                    type: "CurrentLocation",
                                    address: t.address,
                                    lat: t.lat,
                                    lon: t.lon,
                                    properties: {
                                        labelId: "use-own-position",
                                        layer: "currentPosition",
                                        address: t.address,
                                        lat: t.lat,
                                        lon: t.lon
                                    },
                                    geometry: {
                                        type: "Point",
                                        coordinates: [t.lon, t.lat]
                                    }
                                }]) : Promise.resolve([])
                            }(d, v)), S.includes("FavouritePlace") && T.push(function(e, t) {
                                return Promise.resolve(Object(c.a)(A(e, t, ["address", "locationName"]), (function(e) {
                                    return e.locationName
                                })).map((function(e) {
                                    return {
                                        type: "FavouritePlace",
                                        properties: Object(n.a)({}, e, {
                                            label: e.locationName,
                                            layer: "favouritePlace"
                                        }),
                                        geometry: {
                                            type: "Point",
                                            coordinates: [e.lon, e.lat]
                                        }
                                    }
                                })))
                            }(E, d)), S.includes("FavouriteStop") && T.push(function(e, t, a) {
                                var i = r.a.createQuery({
                                        calls: [{
                                            kind: "Call",
                                            metadata: {
                                                type: "[String]"
                                            },
                                            name: "ids",
                                            value: {
                                                kind: "CallVariable",
                                                callVariableName: "ids"
                                            }
                                        }],
                                        children: [{
                                            fieldName: "gtfsId",
                                            kind: "Field",
                                            metadata: {},
                                            type: "String"
                                        }, {
                                            fieldName: "lat",
                                            kind: "Field",
                                            metadata: {},
                                            type: "Float"
                                        }, {
                                            fieldName: "lon",
                                            kind: "Field",
                                            metadata: {},
                                            type: "Float"
                                        }, {
                                            fieldName: "name",
                                            kind: "Field",
                                            metadata: {},
                                            type: "String"
                                        }, {
                                            fieldName: "code",
                                            kind: "Field",
                                            metadata: {},
                                            type: "String"
                                        }, {
                                            fieldName: "id",
                                            kind: "Field",
                                            metadata: {
                                                isGenerated: !0,
                                                isRequisite: !0
                                            },
                                            type: "ID"
                                        }],
                                        fieldName: "stops",
                                        kind: "Query",
                                        metadata: {
                                            isPlural: !0,
                                            identifyingArgName: "ids",
                                            identifyingArgType: "[String]"
                                        },
                                        name: "FavouriteStops",
                                        type: "Stop"
                                    }, {
                                        ids: e.map((function(e) {
                                            return e.gtfsId
                                        }))
                                    }),
                                    o = r.a.createQuery({
                                        calls: [{
                                            kind: "Call",
                                            metadata: {
                                                type: "[String]"
                                            },
                                            name: "ids",
                                            value: {
                                                kind: "CallVariable",
                                                callVariableName: "ids"
                                            }
                                        }],
                                        children: [{
                                            fieldName: "gtfsId",
                                            kind: "Field",
                                            metadata: {},
                                            type: "String"
                                        }, {
                                            fieldName: "lat",
                                            kind: "Field",
                                            metadata: {},
                                            type: "Float"
                                        }, {
                                            fieldName: "lon",
                                            kind: "Field",
                                            metadata: {},
                                            type: "Float"
                                        }, {
                                            fieldName: "name",
                                            kind: "Field",
                                            metadata: {},
                                            type: "String"
                                        }, {
                                            fieldName: "id",
                                            kind: "Field",
                                            metadata: {
                                                isGenerated: !0,
                                                isRequisite: !0
                                            },
                                            type: "ID"
                                        }],
                                        fieldName: "stations",
                                        kind: "Query",
                                        metadata: {
                                            isPlural: !0,
                                            identifyingArgName: "ids",
                                            identifyingArgType: "[String]"
                                        },
                                        name: "FavouriteStations",
                                        type: "Stop"
                                    }, {
                                        ids: e.map((function(e) {
                                            return e.gtfsId
                                        }))
                                    }),
                                    s = a && a.lat && a.lon && {
                                        lat: a.lat,
                                        lng: a.lon
                                    };
                                return O(i).then((function(t) {
                                    return O(o).then((function(a) {
                                        return Object(m.default)(t, a, e).map((function(e) {
                                            return {
                                                type: "FavouriteStop",
                                                properties: Object(n.a)({}, e, {
                                                    label: e.locationName,
                                                    layer: Object(y.e)(e) ? "favouriteStop" : "favouriteStation"
                                                }),
                                                geometry: {
                                                    coordinates: [e.lon, e.lat]
                                                }
                                            }
                                        }))
                                    }))
                                })).then((function(e) {
                                    return A(e, t, ["properties.locationName", "properties.name", "properties.address"])
                                })).then((function(e) {
                                    return s ? Object(u.a)(e, (function(e) {
                                        return Object(b.e)(s, {
                                            lat: e.lat,
                                            lng: e.lon
                                        })
                                    })) : e
                                }))
                            }(R, d, t)), S.includes("OldSearch")) {
                            var M = ["currentPosition"];
                            S.includes("FavouritePlace") || M.push("favouritePlace"), T.push(I(N, d, M))
                        }
                        if (S.includes("Geocoding")) {
                            var _ = h.autoSuggest.locationAware && v.hasLocation ? {
                                    "focus.point.lat": v.lat.toFixed(2),
                                    "focus.point.lon": v.lon.toFixed(2)
                                } : {},
                                P = Object(o.a)(h, "searchSources", "").join(",");
                            T.push(D(d, h.searchParams, w, _, P, h))
                        }
                        if (S.includes("Stops")) {
                            var V = h.autoSuggest.locationAware && v.hasLocation ? {
                                    "focus.point.lat": v.lat.toFixed(2),
                                    "focus.point.lon": v.lon.toFixed(2)
                                } : {},
                                U = Object(o.a)(h, "feedIds", []).map((function(e) {
                                    return "gtfs" + e
                                })).join(",");
                            U && T.push(D(d, void 0, w, V, U, h))
                        }
                        if (s = Promise.all(T).then((function(e) {
                                if (S.includes("Stops") && S.includes("Geocoding")) {
                                    for (var t = [], a = 0; a < e.length - 2; a++) t.push(e[a]);
                                    var n = Object(c.a)(e[e.length - 1].concat(e[e.length - 2]), [function(e) {
                                        return e.properties.confidence
                                    }], ["desc"]);
                                    return t.push(n), t
                                }
                                return e
                            })).then(p.a).then(y.h).then((function(e) {
                                k.results = e
                            })).catch((function(e) {
                                k.error = e
                            })), f === x) return void s.then((function() {
                            return i(Object(n.a)({}, k, {
                                results: H(h, k.results, d)
                            }))
                        }))
                    }
                    if (f === L || f === C) {
                        var W = e("OldSearchesStore").getOldSearches("search"),
                            K = e("FavouriteRoutesStore").getRoutes();
                        if (l = Promise.all([F(K, d), I(W, d), q(d, h)]).then(p.a).then(y.h).then((function(e) {
                                j.results = e
                            })).catch((function(e) {
                                j.error = e
                            })), "search" === f) return void l.then((function() {
                            i(Object(n.a)({}, j, {
                                results: H(h, j.results, d)
                            }))
                        }))
                    }
                    Promise.all([s, l]).then((function() {
                        var e = [];
                        k && Array.isArray(k.results) && e.push.apply(e, k.results), j && Array.isArray(j.results) && e.push.apply(e, j.results), i({
                            results: H(h, e, d)
                        })
                    }))
                }), 300, {
                    leading: !0
                }),
                K = function(e, t, a, n) {
                    n(null), W(e, t, a, n)
                },
                G = function(e, t) {
                    var a = t && t.query || {};
                    return Object(n.a)({}, t, {
                        query: Object(n.a)({}, a, {
                            time: a.time ? a.time : e("TimeStore").getCurrentTime().unix()
                        })
                    })
                }
        },
        "./app/util/shapes.js": function(e, t, a) {
            "use strict";
            a.d(t, "a", (function() {
                return r
            }));
            var n = a("./node_modules/prop-types/index.js"),
                i = a.n(n),
                r = i.a.oneOfType([i.a.shape({
                    lat: i.a.number.isRequired,
                    lon: i.a.number.isRequired,
                    address: i.a.string.isRequired,
                    ready: i.a.boolean
                }), i.a.shape({
                    gps: i.a.boolean,
                    ready: i.a.boolean
                })])
        },
        "./app/util/slicedToArray.js": function(e, t, a) {
            "use strict";
            a.r(t), t.default = function(e, t) {
                if (Array.isArray(e)) return e;
                if (Symbol.iterator in Object(e)) return function(e, t) {
                    var a, n, i, r = [],
                        o = !0,
                        s = !1;
                    try {
                        for (n = e[Symbol.iterator](); !(o = (i = n.next()).done) && (r.push(i.value), !t || r.length !== t); o = !0);
                    } catch (e) {
                        s = !0, a = e
                    } finally {
                        try {
                            !o && n.return && n.return()
                        } finally {
                            if (s) throw a
                        }
                    }
                    return r
                }(e, t);
                throw new TypeError("Invalid attempt to destructure non-iterable instance")
            }
        },
        "./app/util/suggestionUtils.js": function(e, t, a) {
            "use strict";
            a.d(t, "a", (function() {
                return f
            })), a.d(t, "e", (function() {
                return g
            })), a.d(t, "f", (function() {
                return h
            })), a.d(t, "d", (function() {
                return b
            })), a.d(t, "h", (function() {
                return y
            })), a.d(t, "c", (function() {
                return v
            })), a.d(t, "g", (function() {
                return k
            })), a.d(t, "b", (function() {
                return j
            }));
            var n = a("./node_modules/react/index.js"),
                i = a.n(n),
                r = a("./node_modules/react-intl/lib/index.es.js"),
                o = a("./node_modules/lodash-es/uniqWith.js"),
                s = a("./node_modules/lodash-es/isEqual.js"),
                l = a("./node_modules/lodash-es/memoize.js"),
                c = a("./node_modules/lodash-es/escapeRegExp.js"),
                u = a("./node_modules/lodash-es/cloneDeep.js"),
                d = a("./app/component/StopCode.js"),
                p = function(e) {
                    return e.localadmin || e.locality || ""
                };
            l.a.Cache = Map;
            var m = function(e) {
                    var t = e.id,
                        a = e.code;
                    return a || (void 0 !== t && void 0 !== t.indexOf && -1 !== t.indexOf("#") ? t.substring(t.indexOf("#") + 1) : void 0)
                },
                f = function(e) {
                    var t = e.id,
                        a = e.gtfsId;
                    return a || (t && "function" == typeof t.indexOf && 0 === t.indexOf("GTFS:") ? -1 === t.indexOf("#") ? t.substring(5) : t.substring(5, t.indexOf("#")) : void 0)
                },
                g = function(e) {
                    var t = e.layer;
                    return "stop" === t || "favouriteStop" === t
                },
                h = function(e) {
                    var t = e.layer;
                    return "station" === t || "favouriteStation" === t
                },
                b = Object(l.a)((function(e, t) {
                    switch (void 0 === t && (t = !1), e.layer) {
                        case "currentPosition":
                            return [e.labelId, e.address];
                        case "favouritePlace":
                            return [e.locationName, e.address];
                        case "favouriteRoute":
                        case "route-BUS":
                        case "route-TRAM":
                        case "route-RAIL":
                        case "route-SUBWAY":
                        case "route-FERRY":
                        case "route-AIRPLANE":
                            return !t && e.shortName ? [i.a.createElement("span", {
                                key: e.gtfsId
                            }, i.a.createElement("span", {
                                className: e.mode.toLowerCase()
                            }, e.shortName), i.a.createElement("span", {
                                className: "suggestion-type"
                            }, " - ", i.a.createElement(r.a, {
                                id: "route",
                                defaultMessage: "Route"
                            }))), e.longName] : [e.shortName, e.longName];
                        case "venue":
                        case "address":
                            return [e.name, e.label.replace(new RegExp(Object(c.a)(e.name) + "(,)?( )?"), "")];
                        case "favouriteStation":
                        case "favouriteStop":
                            return t ? [e.locationName] : [e.locationName, i.a.createElement("span", {
                                key: e.id
                            }, e.address)];
                        case "stop":
                            return t ? [e.name || e.label, p(e)] : [e.name, i.a.createElement("span", {
                                key: e.id
                            }, m(e) && i.a.createElement(d.a, {
                                code: m(e)
                            }), p(e))];
                        default:
                            return [e.name || e.label, p(e)]
                    }
                }), (function(e, t) {
                    var a = Object(u.a)(e);
                    return a.plain = t, a
                }));

            function y(e) {
                return Object(o.a)(e, (function(e, t) {
                    return Object(s.a)(b(e.properties), b(t.properties)) && e.properties.layer === t.properties.layer
                }))
            }

            function v(e) {
                var t = b(e, !0);
                switch (e.layer) {
                    case "currentPosition":
                        return t[1] || t[0];
                    case "favouritePlace":
                        return t[0];
                    default:
                        return t.length > 1 && "" !== t[1] ? t.join(", ") : t[1] || t[0]
                }
            }

            function k(e) {
                return {
                    address: v(e.properties),
                    type: e.type,
                    id: f(e.properties),
                    code: m(e.properties),
                    layer: e.properties.layer,
                    lat: e.lat || e.geometry && e.geometry.coordinates && e.geometry.coordinates[1],
                    lon: e.lon || e.geometry && e.geometry.coordinates && e.geometry.coordinates[0]
                }
            }

            function j(e) {
                return new Map([
                    ["currentPosition", "icon-icon_locate"],
                    ["favouritePlace", "icon-icon_star"],
                    ["favouriteRoute", "icon-icon_star"],
                    ["favouriteStop", "icon-icon_star"],
                    ["favouriteStation", "icon-icon_star"],
                    ["favourite", "icon-icon_star"],
                    ["address", "icon-icon_place"],
                    ["stop", "icon-icon_bus-stop"],
                    ["locality", "icon-icon_city"],
                    ["station", "icon-icon_station"],
                    ["localadmin", "icon-icon_city"],
                    ["neighbourhood", "icon-icon_city"],
                    ["route-BUS", "icon-icon_bus-withoutBox"],
                    ["route-TRAM", "icon-icon_tram-withoutBox"],
                    ["route-RAIL", "icon-icon_rail-withoutBox"],
                    ["route-SUBWAY", "icon-icon_subway-withoutBox"],
                    ["route-FERRY", "icon-icon_ferry-withoutBox"],
                    ["route-AIRPLANE", "icon-icon_airplane-withoutBox"]
                ]).get(e) || "icon-icon_place"
            }
        },
        "./app/util/timeUtils.js": function(e, t, a) {
            "use strict";
            a.d(t, "b", (function() {
                return r
            })), a.d(t, "a", (function() {
                return o
            })), a.d(t, "e", (function() {
                return s
            })), a.d(t, "d", (function() {
                return l
            })), a.d(t, "c", (function() {
                return c
            })), a.d(t, "f", (function() {
                return u
            })), a.d(t, "g", (function() {
                return d
            }));
            var n = a("./node_modules/moment/moment.js"),
                i = a.n(n),
                r = "HH:mm",
                o = "dd D.M.";

            function s(e) {
                return ("0" + Math.floor(e / 60 / 60)).slice(-2) + ("0" + e / 60 % 60).slice(-2)
            }

            function l(e) {
                var t = i.a.duration(e);
                return t.asHours() >= 1 ? t.hours() + 24 * t.days() + " h " + t.minutes() + " min" : t.minutes() + " min"
            }
            var c = function(e, t) {
                    return e.isSame(t, "day") ? "" : e.format(o)
                },
                u = function(e, t) {
                    return "" === c(e, t)
                },
                d = function(e, t) {
                    var a = t ? i.a.unix(t) : i()(),
                        n = a.clone().subtract(7, "d").unix(),
                        r = a.clone().add(30, "d").unix(),
                        o = a.unix();
                    if (!e) return {
                        start: n,
                        end: r
                    };
                    var s = Math.min(Math.max(e.start, n), o);
                    s = i.a.unix(s).startOf("day").unix();
                    var l = Math.max(Math.min(e.end, r), o);
                    return {
                        start: s,
                        end: l = i.a.unix(l).endOf("day").unix()
                    }
                }
        },
        "./app/util/withBreakpoint.js": function(e, t, a) {
            "use strict";
            a.d(t, "b", (function() {
                return b
            })), a.d(t, "a", (function() {
                return y
            })), a.d(t, "c", (function() {
                return v
            }));
            var n = a("./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"),
                i = a("./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js"),
                r = a("./node_modules/react/index.js"),
                o = a.n(r),
                s = a("./node_modules/prop-types/index.js"),
                l = a.n(s),
                c = a("./node_modules/lodash-es/throttle.js"),
                u = a("./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"),
                d = a.n(u),
                p = ["breakpoint", "forwardedRef"],
                m = Object(r.createContext)("large"),
                f = m.Provider,
                g = m.Consumer;

            function h() {
                return window.innerWidth < 400 ? "small" : window.innerWidth < 900 ? "medium" : "large"
            }
            var b = function(e) {
                function t() {
                    for (var t, a = arguments.length, n = new Array(a), i = 0; i < a; i++) n[i] = arguments[i];
                    return (t = e.call.apply(e, [this].concat(n)) || this).state = {
                        breakpoint: t.props.serverGuessedBreakpoint || h()
                    }, t
                }
                Object(i.a)(t, e);
                var a = t.prototype;
                return a.componentDidMount = function() {
                    var e = this;
                    this.updateBreakpoint = Object(c.default)((function() {
                        return e.setState((function(e) {
                            var t = e.breakpoint;
                            return h() !== t ? {
                                breakpoint: h()
                            } : null
                        }))
                    }), 100), this.updateBreakpoint(), window.addEventListener("resize", this.updateBreakpoint)
                }, a.componentWillUnmount = function() {
                    window.removeEventListener("resize", this.updateBreakpoint)
                }, a.render = function() {
                    return o.a.createElement(f, Object.assign({
                        value: this.state.breakpoint
                    }, this.props))
                }, t
            }(o.a.Component);
            b.propTypes = {
                children: l.a.node.isRequired,
                serverGuessedBreakpoint: l.a.string
            }, b.defaultProps = {
                serverGuessedBreakpoint: null
            };
            var y = g;

            function v(e) {
                var t = e.desktop,
                    a = e.mobile;
                return o.a.createElement(g, null, (function(e) {
                    return "large" === e ? t() : a()
                }))
            }
            v.propTypes = {
                desktop: l.a.func.isRequired,
                mobile: l.a.func.isRequired
            }, t.d = function(e, t) {
                var a = (void 0 === t ? {
                        forwardRef: !1
                    } : t).forwardRef,
                    r = function(t) {
                        function a() {
                            return t.apply(this, arguments) || this
                        }
                        return Object(i.a)(a, t), a.prototype.render = function() {
                            var t = this.props,
                                a = t.breakpoint,
                                i = t.forwardedRef,
                                r = Object(n.a)(t, p);
                            return o.a.createElement(e, Object.assign({
                                breakpoint: a,
                                ref: i
                            }, r))
                        }, a
                    }(o.a.Component);
                return r.displayName = "WithBreakpoint(" + function(e) {
                    return e.displayName || e.name || "Component"
                }(e) + ")", d()(r, e), a ? o.a.forwardRef((function(e, t) {
                    return o.a.createElement(g, null, (function(a) {
                        return o.a.createElement(r, Object.assign({}, e, {
                            breakpoint: a,
                            forwardedRef: t
                        }))
                    }))
                })) : function(e) {
                    return o.a.createElement(g, null, (function(t) {
                        return o.a.createElement(r, Object.assign({}, e, {
                            breakpoint: t
                        }))
                    }))
                }
            }
        },
        "./app/util/xhrPromise.js": function(e, t, a) {
            "use strict";

            function n(e, t) {
                return e ? Object.keys(e).map((function(a) {
                    var i = t || a,
                        r = e[a];
                    return "object" == typeof r ? n(r, i) : encodeURIComponent(i) + "=" + encodeURIComponent(r)
                })).join("&") : ""
            }

            function i(e, t) {
                return fetch(encodeURI(e) + (t ? (-1 === e.search(/\?/) ? "?" : "&") + n(t) : ""), {
                    timeout: 1e4,
                    method: "GET",
                    headers: {
                        Accept: "application/json"
                    }
                }).then((function(e) {
                    return e.json()
                }))
            }
            a.d(t, "a", (function() {
                return i
            }))
        },
        "./node_modules/intl/locale-data/jsonp lazy-once recursive ^.\\/(fi|sv|en|fr|nb|de)$": function(e, t, a) {
            var n = {
                "./de": "./node_modules/intl/locale-data/jsonp/de.js",
                "./en": "./node_modules/intl/locale-data/jsonp/en.js",
                "./fi": "./node_modules/intl/locale-data/jsonp/fi.js",
                "./fr": "./node_modules/intl/locale-data/jsonp/fr.js",
                "./nb": "./node_modules/intl/locale-data/jsonp/nb.js",
                "./sv": "./node_modules/intl/locale-data/jsonp/sv.js"
            };

            function i(e) {
                return r(e).then((function(e) {
                    return a.t(e, 7)
                }))
            }

            function r(e) {
                return Promise.all([a.e("vendors~intl"), a.e("intl")]).then((function() {
                    if (!a.o(n, e)) {
                        var t = new Error("Cannot find module '" + e + "'");
                        throw t.code = "MODULE_NOT_FOUND", t
                    }
                    return n[e]
                }))
            }
            i.keys = function() {
                return Object.keys(n)
            }, i.resolve = r, i.id = "./node_modules/intl/locale-data/jsonp lazy-once recursive ^.\\/(fi|sv|en|fr|nb|de)$", e.exports = i
        },
        "./node_modules/moment/locale sync recursive ^.\\/(fi|sv|en|fr|nb|de)$": function(e, t, a) {
            var n = {
                "./de": "./node_modules/moment/locale/de.js",
                "./fi": "./node_modules/moment/locale/fi.js",
                "./fr": "./node_modules/moment/locale/fr.js",
                "./nb": "./node_modules/moment/locale/nb.js",
                "./sv": "./node_modules/moment/locale/sv.js"
            };

            function i(e) {
                var t = r(e);
                return a(t)
            }

            function r(e) {
                if (!a.o(n, e)) {
                    var t = new Error("Cannot find module '" + e + "'");
                    throw t.code = "MODULE_NOT_FOUND", t
                }
                return n[e]
            }
            i.keys = function() {
                return Object.keys(n)
            }, i.resolve = r, e.exports = i, i.id = "./node_modules/moment/locale sync recursive ^.\\/(fi|sv|en|fr|nb|de)$"
        },
        "./node_modules/react-intl/locale-data sync recursive ^.\\/(fi|sv|en|fr|nb|de)$": function(e, t, a) {
            var n = {
                "./de": "./node_modules/react-intl/locale-data/de.js",
                "./en": "./node_modules/react-intl/locale-data/en.js",
                "./fi": "./node_modules/react-intl/locale-data/fi.js",
                "./fr": "./node_modules/react-intl/locale-data/fr.js",
                "./nb": "./node_modules/react-intl/locale-data/nb.js",
                "./sv": "./node_modules/react-intl/locale-data/sv.js"
            };

            function i(e) {
                var t = r(e);
                return a(t)
            }

            function r(e) {
                if (!a.o(n, e)) {
                    var t = new Error("Cannot find module '" + e + "'");
                    throw t.code = "MODULE_NOT_FOUND", t
                }
                return n[e]
            }
            i.keys = function() {
                return Object.keys(n)
            }, i.resolve = r, e.exports = i, i.id = "./node_modules/react-intl/locale-data sync recursive ^.\\/(fi|sv|en|fr|nb|de)$"
        },
        0: function(e, t, a) {
            a("./app/util/publicPath.js"), e.exports = a("./app/client.js")
        },
        1: function(e, t) {},
        10: function(e, t) {},
        11: function(e, t) {},
        2: function(e, t) {},
        3: function(e, t) {},
        4: function(e, t) {},
        5: function(e, t) {},
        6: function(e, t) {},
        7: function(e, t) {},
        8: function(e, t) {},
        9: function(e, t) {},
        "babel-runtime/core-js/json/stringify": function(e, t) {
            e.exports = JSON.stringify
        },
        "babel-runtime/core-js/map": function(e, t) {
            e.exports = Map
        },
        "babel-runtime/core-js/object/entries": function(e, t) {
            e.exports = Object.entries
        },
        "babel-runtime/core-js/object/get-prototype-of": function(e, t) {
            e.exports = Object.getPrototypeOf
        },
        "babel-runtime/core-js/object/keys": function(e, t) {
            e.exports = Object.keys
        },
        "babel-runtime/core-js/promise": function(e, t) {
            e.exports = Promise
        },
        "babel-runtime/core-js/weak-map": function(e, t) {
            e.exports = WeakMap
        },
        "babel-runtime/helpers/extends": function(e, t) {
            e.exports = Object.assign
        },
        "fbjs/lib/fetch": function(e, t) {
            e.exports = fetch
        }
    },
    [
        [0, "runtime~main", "react", "vendors~main"]
    ]
]);
//# sourceMappingURL=fd62456e290a0fbf7323.js.map